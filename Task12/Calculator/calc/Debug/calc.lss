
calc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000026d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000026d6  0000276a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800068  00800068  00002772  2**0
                  ALLOC
  3 .stab         00001a64  00000000  00000000  00002774  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b2e  00000000  00000000  000041d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004d06  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004e46  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004fb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006bff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007aea  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008898  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000089f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008c85  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009453  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a0 37       	cpi	r26, 0x70	; 112
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e6 ed       	ldi	r30, 0xD6	; 214
      78:	f6 e2       	ldi	r31, 0x26	; 38
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <main>
      8a:	0c 94 69 13 	jmp	0x26d2	; 0x26d2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 01 13 	jmp	0x2602	; 0x2602 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1d 13 	jmp	0x263a	; 0x263a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0d 13 	jmp	0x261a	; 0x261a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 29 13 	jmp	0x2652	; 0x2652 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0d 13 	jmp	0x261a	; 0x261a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 29 13 	jmp	0x2652	; 0x2652 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 01 13 	jmp	0x2602	; 0x2602 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1d 13 	jmp	0x263a	; 0x263a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0d 13 	jmp	0x261a	; 0x261a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 29 13 	jmp	0x2652	; 0x2652 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 0d 13 	jmp	0x261a	; 0x261a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 29 13 	jmp	0x2652	; 0x2652 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 0d 13 	jmp	0x261a	; 0x261a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 29 13 	jmp	0x2652	; 0x2652 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 11 13 	jmp	0x2622	; 0x2622 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 2d 13 	jmp	0x265a	; 0x265a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <LCD_init>:
#include "LCD.h"



void LCD_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW);
     b4e:	a7 e3       	ldi	r26, 0x37	; 55
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e3       	ldi	r30, 0x37	; 55
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8e 60       	ori	r24, 0x0E	; 14
     b5a:	8c 93       	st	X, r24

	#if (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT_DIR |= 0xF0;
		#else
			LCD_DATA_PORT_DIR |= 0x0F;
     b5c:	a1 e3       	ldi	r26, 0x31	; 49
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e1 e3       	ldi	r30, 0x31	; 49
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8f 60       	ori	r24, 0x0F	; 15
     b68:	8c 93       	st	X, r24
		#endif
		LCD_sendCommand(FOUR_BITS_DATA_MODE);
     b6a:	82 e0       	ldi	r24, 0x02	; 2
     b6c:	0e 94 c4 05 	call	0xb88	; 0xb88 <LCD_sendCommand>
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE);
     b70:	88 e2       	ldi	r24, 0x28	; 40
     b72:	0e 94 c4 05 	call	0xb88	; 0xb88 <LCD_sendCommand>
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF;
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE);
	#endif

	LCD_sendCommand(CURSOR_OFF);
     b76:	8c e0       	ldi	r24, 0x0C	; 12
     b78:	0e 94 c4 05 	call	0xb88	; 0xb88 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND);
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	0e 94 c4 05 	call	0xb88	; 0xb88 <LCD_sendCommand>
}
     b82:	cf 91       	pop	r28
     b84:	df 91       	pop	r29
     b86:	08 95       	ret

00000b88 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
     b88:	0f 93       	push	r16
     b8a:	1f 93       	push	r17
     b8c:	df 93       	push	r29
     b8e:	cf 93       	push	r28
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
     b94:	c3 56       	subi	r28, 0x63	; 99
     b96:	d0 40       	sbci	r29, 0x00	; 0
     b98:	0f b6       	in	r0, 0x3f	; 63
     b9a:	f8 94       	cli
     b9c:	de bf       	out	0x3e, r29	; 62
     b9e:	0f be       	out	0x3f, r0	; 63
     ba0:	cd bf       	out	0x3d, r28	; 61
     ba2:	fe 01       	movw	r30, r28
     ba4:	ed 59       	subi	r30, 0x9D	; 157
     ba6:	ff 4f       	sbci	r31, 0xFF	; 255
     ba8:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT,RS);
     baa:	a8 e3       	ldi	r26, 0x38	; 56
     bac:	b0 e0       	ldi	r27, 0x00	; 0
     bae:	e8 e3       	ldi	r30, 0x38	; 56
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	80 81       	ld	r24, Z
     bb4:	8d 7f       	andi	r24, 0xFD	; 253
     bb6:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW);
     bb8:	a8 e3       	ldi	r26, 0x38	; 56
     bba:	b0 e0       	ldi	r27, 0x00	; 0
     bbc:	e8 e3       	ldi	r30, 0x38	; 56
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	80 81       	ld	r24, Z
     bc2:	8b 7f       	andi	r24, 0xFB	; 251
     bc4:	8c 93       	st	X, r24
     bc6:	fe 01       	movw	r30, r28
     bc8:	e1 5a       	subi	r30, 0xA1	; 161
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	a0 e8       	ldi	r26, 0x80	; 128
     bd2:	bf e3       	ldi	r27, 0x3F	; 63
     bd4:	80 83       	st	Z, r24
     bd6:	91 83       	std	Z+1, r25	; 0x01
     bd8:	a2 83       	std	Z+2, r26	; 0x02
     bda:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bdc:	8e 01       	movw	r16, r28
     bde:	05 5a       	subi	r16, 0xA5	; 165
     be0:	1f 4f       	sbci	r17, 0xFF	; 255
     be2:	fe 01       	movw	r30, r28
     be4:	e1 5a       	subi	r30, 0xA1	; 161
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	60 81       	ld	r22, Z
     bea:	71 81       	ldd	r23, Z+1	; 0x01
     bec:	82 81       	ldd	r24, Z+2	; 0x02
     bee:	93 81       	ldd	r25, Z+3	; 0x03
     bf0:	20 e0       	ldi	r18, 0x00	; 0
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	4a ef       	ldi	r20, 0xFA	; 250
     bf6:	54 e4       	ldi	r21, 0x44	; 68
     bf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bfc:	dc 01       	movw	r26, r24
     bfe:	cb 01       	movw	r24, r22
     c00:	f8 01       	movw	r30, r16
     c02:	80 83       	st	Z, r24
     c04:	91 83       	std	Z+1, r25	; 0x01
     c06:	a2 83       	std	Z+2, r26	; 0x02
     c08:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c0a:	fe 01       	movw	r30, r28
     c0c:	e5 5a       	subi	r30, 0xA5	; 165
     c0e:	ff 4f       	sbci	r31, 0xFF	; 255
     c10:	60 81       	ld	r22, Z
     c12:	71 81       	ldd	r23, Z+1	; 0x01
     c14:	82 81       	ldd	r24, Z+2	; 0x02
     c16:	93 81       	ldd	r25, Z+3	; 0x03
     c18:	20 e0       	ldi	r18, 0x00	; 0
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	40 e8       	ldi	r20, 0x80	; 128
     c1e:	5f e3       	ldi	r21, 0x3F	; 63
     c20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c24:	88 23       	and	r24, r24
     c26:	44 f4       	brge	.+16     	; 0xc38 <LCD_sendCommand+0xb0>
		__ticks = 1;
     c28:	fe 01       	movw	r30, r28
     c2a:	e7 5a       	subi	r30, 0xA7	; 167
     c2c:	ff 4f       	sbci	r31, 0xFF	; 255
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	91 83       	std	Z+1, r25	; 0x01
     c34:	80 83       	st	Z, r24
     c36:	64 c0       	rjmp	.+200    	; 0xd00 <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
     c38:	fe 01       	movw	r30, r28
     c3a:	e5 5a       	subi	r30, 0xA5	; 165
     c3c:	ff 4f       	sbci	r31, 0xFF	; 255
     c3e:	60 81       	ld	r22, Z
     c40:	71 81       	ldd	r23, Z+1	; 0x01
     c42:	82 81       	ldd	r24, Z+2	; 0x02
     c44:	93 81       	ldd	r25, Z+3	; 0x03
     c46:	20 e0       	ldi	r18, 0x00	; 0
     c48:	3f ef       	ldi	r19, 0xFF	; 255
     c4a:	4f e7       	ldi	r20, 0x7F	; 127
     c4c:	57 e4       	ldi	r21, 0x47	; 71
     c4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c52:	18 16       	cp	r1, r24
     c54:	0c f0       	brlt	.+2      	; 0xc58 <LCD_sendCommand+0xd0>
     c56:	43 c0       	rjmp	.+134    	; 0xcde <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c58:	fe 01       	movw	r30, r28
     c5a:	e1 5a       	subi	r30, 0xA1	; 161
     c5c:	ff 4f       	sbci	r31, 0xFF	; 255
     c5e:	60 81       	ld	r22, Z
     c60:	71 81       	ldd	r23, Z+1	; 0x01
     c62:	82 81       	ldd	r24, Z+2	; 0x02
     c64:	93 81       	ldd	r25, Z+3	; 0x03
     c66:	20 e0       	ldi	r18, 0x00	; 0
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	40 e2       	ldi	r20, 0x20	; 32
     c6c:	51 e4       	ldi	r21, 0x41	; 65
     c6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c72:	dc 01       	movw	r26, r24
     c74:	cb 01       	movw	r24, r22
     c76:	8e 01       	movw	r16, r28
     c78:	07 5a       	subi	r16, 0xA7	; 167
     c7a:	1f 4f       	sbci	r17, 0xFF	; 255
     c7c:	bc 01       	movw	r22, r24
     c7e:	cd 01       	movw	r24, r26
     c80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c84:	dc 01       	movw	r26, r24
     c86:	cb 01       	movw	r24, r22
     c88:	f8 01       	movw	r30, r16
     c8a:	91 83       	std	Z+1, r25	; 0x01
     c8c:	80 83       	st	Z, r24
     c8e:	1f c0       	rjmp	.+62     	; 0xcce <LCD_sendCommand+0x146>
     c90:	fe 01       	movw	r30, r28
     c92:	e9 5a       	subi	r30, 0xA9	; 169
     c94:	ff 4f       	sbci	r31, 0xFF	; 255
     c96:	88 ec       	ldi	r24, 0xC8	; 200
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	91 83       	std	Z+1, r25	; 0x01
     c9c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c9e:	fe 01       	movw	r30, r28
     ca0:	e9 5a       	subi	r30, 0xA9	; 169
     ca2:	ff 4f       	sbci	r31, 0xFF	; 255
     ca4:	80 81       	ld	r24, Z
     ca6:	91 81       	ldd	r25, Z+1	; 0x01
     ca8:	01 97       	sbiw	r24, 0x01	; 1
     caa:	f1 f7       	brne	.-4      	; 0xca8 <LCD_sendCommand+0x120>
     cac:	fe 01       	movw	r30, r28
     cae:	e9 5a       	subi	r30, 0xA9	; 169
     cb0:	ff 4f       	sbci	r31, 0xFF	; 255
     cb2:	91 83       	std	Z+1, r25	; 0x01
     cb4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cb6:	de 01       	movw	r26, r28
     cb8:	a7 5a       	subi	r26, 0xA7	; 167
     cba:	bf 4f       	sbci	r27, 0xFF	; 255
     cbc:	fe 01       	movw	r30, r28
     cbe:	e7 5a       	subi	r30, 0xA7	; 167
     cc0:	ff 4f       	sbci	r31, 0xFF	; 255
     cc2:	80 81       	ld	r24, Z
     cc4:	91 81       	ldd	r25, Z+1	; 0x01
     cc6:	01 97       	sbiw	r24, 0x01	; 1
     cc8:	11 96       	adiw	r26, 0x01	; 1
     cca:	9c 93       	st	X, r25
     ccc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cce:	fe 01       	movw	r30, r28
     cd0:	e7 5a       	subi	r30, 0xA7	; 167
     cd2:	ff 4f       	sbci	r31, 0xFF	; 255
     cd4:	80 81       	ld	r24, Z
     cd6:	91 81       	ldd	r25, Z+1	; 0x01
     cd8:	00 97       	sbiw	r24, 0x00	; 0
     cda:	d1 f6       	brne	.-76     	; 0xc90 <LCD_sendCommand+0x108>
     cdc:	27 c0       	rjmp	.+78     	; 0xd2c <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cde:	8e 01       	movw	r16, r28
     ce0:	07 5a       	subi	r16, 0xA7	; 167
     ce2:	1f 4f       	sbci	r17, 0xFF	; 255
     ce4:	fe 01       	movw	r30, r28
     ce6:	e5 5a       	subi	r30, 0xA5	; 165
     ce8:	ff 4f       	sbci	r31, 0xFF	; 255
     cea:	60 81       	ld	r22, Z
     cec:	71 81       	ldd	r23, Z+1	; 0x01
     cee:	82 81       	ldd	r24, Z+2	; 0x02
     cf0:	93 81       	ldd	r25, Z+3	; 0x03
     cf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cf6:	dc 01       	movw	r26, r24
     cf8:	cb 01       	movw	r24, r22
     cfa:	f8 01       	movw	r30, r16
     cfc:	91 83       	std	Z+1, r25	; 0x01
     cfe:	80 83       	st	Z, r24
     d00:	de 01       	movw	r26, r28
     d02:	ab 5a       	subi	r26, 0xAB	; 171
     d04:	bf 4f       	sbci	r27, 0xFF	; 255
     d06:	fe 01       	movw	r30, r28
     d08:	e7 5a       	subi	r30, 0xA7	; 167
     d0a:	ff 4f       	sbci	r31, 0xFF	; 255
     d0c:	80 81       	ld	r24, Z
     d0e:	91 81       	ldd	r25, Z+1	; 0x01
     d10:	8d 93       	st	X+, r24
     d12:	9c 93       	st	X, r25
     d14:	fe 01       	movw	r30, r28
     d16:	eb 5a       	subi	r30, 0xAB	; 171
     d18:	ff 4f       	sbci	r31, 0xFF	; 255
     d1a:	80 81       	ld	r24, Z
     d1c:	91 81       	ldd	r25, Z+1	; 0x01
     d1e:	01 97       	sbiw	r24, 0x01	; 1
     d20:	f1 f7       	brne	.-4      	; 0xd1e <LCD_sendCommand+0x196>
     d22:	fe 01       	movw	r30, r28
     d24:	eb 5a       	subi	r30, 0xAB	; 171
     d26:	ff 4f       	sbci	r31, 0xFF	; 255
     d28:	91 83       	std	Z+1, r25	; 0x01
     d2a:	80 83       	st	Z, r24
	_delay_ms(1);
	SET_BIT(LCD_CTRL_PORT,E);
     d2c:	a8 e3       	ldi	r26, 0x38	; 56
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	e8 e3       	ldi	r30, 0x38	; 56
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	88 60       	ori	r24, 0x08	; 8
     d38:	8c 93       	st	X, r24
     d3a:	fe 01       	movw	r30, r28
     d3c:	ef 5a       	subi	r30, 0xAF	; 175
     d3e:	ff 4f       	sbci	r31, 0xFF	; 255
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	a0 e8       	ldi	r26, 0x80	; 128
     d46:	bf e3       	ldi	r27, 0x3F	; 63
     d48:	80 83       	st	Z, r24
     d4a:	91 83       	std	Z+1, r25	; 0x01
     d4c:	a2 83       	std	Z+2, r26	; 0x02
     d4e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d50:	8e 01       	movw	r16, r28
     d52:	03 5b       	subi	r16, 0xB3	; 179
     d54:	1f 4f       	sbci	r17, 0xFF	; 255
     d56:	fe 01       	movw	r30, r28
     d58:	ef 5a       	subi	r30, 0xAF	; 175
     d5a:	ff 4f       	sbci	r31, 0xFF	; 255
     d5c:	60 81       	ld	r22, Z
     d5e:	71 81       	ldd	r23, Z+1	; 0x01
     d60:	82 81       	ldd	r24, Z+2	; 0x02
     d62:	93 81       	ldd	r25, Z+3	; 0x03
     d64:	20 e0       	ldi	r18, 0x00	; 0
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	4a ef       	ldi	r20, 0xFA	; 250
     d6a:	54 e4       	ldi	r21, 0x44	; 68
     d6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d70:	dc 01       	movw	r26, r24
     d72:	cb 01       	movw	r24, r22
     d74:	f8 01       	movw	r30, r16
     d76:	80 83       	st	Z, r24
     d78:	91 83       	std	Z+1, r25	; 0x01
     d7a:	a2 83       	std	Z+2, r26	; 0x02
     d7c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d7e:	fe 01       	movw	r30, r28
     d80:	e3 5b       	subi	r30, 0xB3	; 179
     d82:	ff 4f       	sbci	r31, 0xFF	; 255
     d84:	60 81       	ld	r22, Z
     d86:	71 81       	ldd	r23, Z+1	; 0x01
     d88:	82 81       	ldd	r24, Z+2	; 0x02
     d8a:	93 81       	ldd	r25, Z+3	; 0x03
     d8c:	20 e0       	ldi	r18, 0x00	; 0
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	40 e8       	ldi	r20, 0x80	; 128
     d92:	5f e3       	ldi	r21, 0x3F	; 63
     d94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d98:	88 23       	and	r24, r24
     d9a:	44 f4       	brge	.+16     	; 0xdac <LCD_sendCommand+0x224>
		__ticks = 1;
     d9c:	fe 01       	movw	r30, r28
     d9e:	e5 5b       	subi	r30, 0xB5	; 181
     da0:	ff 4f       	sbci	r31, 0xFF	; 255
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	91 83       	std	Z+1, r25	; 0x01
     da8:	80 83       	st	Z, r24
     daa:	64 c0       	rjmp	.+200    	; 0xe74 <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
     dac:	fe 01       	movw	r30, r28
     dae:	e3 5b       	subi	r30, 0xB3	; 179
     db0:	ff 4f       	sbci	r31, 0xFF	; 255
     db2:	60 81       	ld	r22, Z
     db4:	71 81       	ldd	r23, Z+1	; 0x01
     db6:	82 81       	ldd	r24, Z+2	; 0x02
     db8:	93 81       	ldd	r25, Z+3	; 0x03
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	3f ef       	ldi	r19, 0xFF	; 255
     dbe:	4f e7       	ldi	r20, 0x7F	; 127
     dc0:	57 e4       	ldi	r21, 0x47	; 71
     dc2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dc6:	18 16       	cp	r1, r24
     dc8:	0c f0       	brlt	.+2      	; 0xdcc <LCD_sendCommand+0x244>
     dca:	43 c0       	rjmp	.+134    	; 0xe52 <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dcc:	fe 01       	movw	r30, r28
     dce:	ef 5a       	subi	r30, 0xAF	; 175
     dd0:	ff 4f       	sbci	r31, 0xFF	; 255
     dd2:	60 81       	ld	r22, Z
     dd4:	71 81       	ldd	r23, Z+1	; 0x01
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	20 e0       	ldi	r18, 0x00	; 0
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	40 e2       	ldi	r20, 0x20	; 32
     de0:	51 e4       	ldi	r21, 0x41	; 65
     de2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     de6:	dc 01       	movw	r26, r24
     de8:	cb 01       	movw	r24, r22
     dea:	8e 01       	movw	r16, r28
     dec:	05 5b       	subi	r16, 0xB5	; 181
     dee:	1f 4f       	sbci	r17, 0xFF	; 255
     df0:	bc 01       	movw	r22, r24
     df2:	cd 01       	movw	r24, r26
     df4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     df8:	dc 01       	movw	r26, r24
     dfa:	cb 01       	movw	r24, r22
     dfc:	f8 01       	movw	r30, r16
     dfe:	91 83       	std	Z+1, r25	; 0x01
     e00:	80 83       	st	Z, r24
     e02:	1f c0       	rjmp	.+62     	; 0xe42 <LCD_sendCommand+0x2ba>
     e04:	fe 01       	movw	r30, r28
     e06:	e7 5b       	subi	r30, 0xB7	; 183
     e08:	ff 4f       	sbci	r31, 0xFF	; 255
     e0a:	88 ec       	ldi	r24, 0xC8	; 200
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	91 83       	std	Z+1, r25	; 0x01
     e10:	80 83       	st	Z, r24
     e12:	fe 01       	movw	r30, r28
     e14:	e7 5b       	subi	r30, 0xB7	; 183
     e16:	ff 4f       	sbci	r31, 0xFF	; 255
     e18:	80 81       	ld	r24, Z
     e1a:	91 81       	ldd	r25, Z+1	; 0x01
     e1c:	01 97       	sbiw	r24, 0x01	; 1
     e1e:	f1 f7       	brne	.-4      	; 0xe1c <LCD_sendCommand+0x294>
     e20:	fe 01       	movw	r30, r28
     e22:	e7 5b       	subi	r30, 0xB7	; 183
     e24:	ff 4f       	sbci	r31, 0xFF	; 255
     e26:	91 83       	std	Z+1, r25	; 0x01
     e28:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e2a:	de 01       	movw	r26, r28
     e2c:	a5 5b       	subi	r26, 0xB5	; 181
     e2e:	bf 4f       	sbci	r27, 0xFF	; 255
     e30:	fe 01       	movw	r30, r28
     e32:	e5 5b       	subi	r30, 0xB5	; 181
     e34:	ff 4f       	sbci	r31, 0xFF	; 255
     e36:	80 81       	ld	r24, Z
     e38:	91 81       	ldd	r25, Z+1	; 0x01
     e3a:	01 97       	sbiw	r24, 0x01	; 1
     e3c:	11 96       	adiw	r26, 0x01	; 1
     e3e:	9c 93       	st	X, r25
     e40:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e42:	fe 01       	movw	r30, r28
     e44:	e5 5b       	subi	r30, 0xB5	; 181
     e46:	ff 4f       	sbci	r31, 0xFF	; 255
     e48:	80 81       	ld	r24, Z
     e4a:	91 81       	ldd	r25, Z+1	; 0x01
     e4c:	00 97       	sbiw	r24, 0x00	; 0
     e4e:	d1 f6       	brne	.-76     	; 0xe04 <LCD_sendCommand+0x27c>
     e50:	27 c0       	rjmp	.+78     	; 0xea0 <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e52:	8e 01       	movw	r16, r28
     e54:	05 5b       	subi	r16, 0xB5	; 181
     e56:	1f 4f       	sbci	r17, 0xFF	; 255
     e58:	fe 01       	movw	r30, r28
     e5a:	e3 5b       	subi	r30, 0xB3	; 179
     e5c:	ff 4f       	sbci	r31, 0xFF	; 255
     e5e:	60 81       	ld	r22, Z
     e60:	71 81       	ldd	r23, Z+1	; 0x01
     e62:	82 81       	ldd	r24, Z+2	; 0x02
     e64:	93 81       	ldd	r25, Z+3	; 0x03
     e66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e6a:	dc 01       	movw	r26, r24
     e6c:	cb 01       	movw	r24, r22
     e6e:	f8 01       	movw	r30, r16
     e70:	91 83       	std	Z+1, r25	; 0x01
     e72:	80 83       	st	Z, r24
     e74:	de 01       	movw	r26, r28
     e76:	a9 5b       	subi	r26, 0xB9	; 185
     e78:	bf 4f       	sbci	r27, 0xFF	; 255
     e7a:	fe 01       	movw	r30, r28
     e7c:	e5 5b       	subi	r30, 0xB5	; 181
     e7e:	ff 4f       	sbci	r31, 0xFF	; 255
     e80:	80 81       	ld	r24, Z
     e82:	91 81       	ldd	r25, Z+1	; 0x01
     e84:	8d 93       	st	X+, r24
     e86:	9c 93       	st	X, r25
     e88:	fe 01       	movw	r30, r28
     e8a:	e9 5b       	subi	r30, 0xB9	; 185
     e8c:	ff 4f       	sbci	r31, 0xFF	; 255
     e8e:	80 81       	ld	r24, Z
     e90:	91 81       	ldd	r25, Z+1	; 0x01
     e92:	01 97       	sbiw	r24, 0x01	; 1
     e94:	f1 f7       	brne	.-4      	; 0xe92 <LCD_sendCommand+0x30a>
     e96:	fe 01       	movw	r30, r28
     e98:	e9 5b       	subi	r30, 0xB9	; 185
     e9a:	ff 4f       	sbci	r31, 0xFF	; 255
     e9c:	91 83       	std	Z+1, r25	; 0x01
     e9e:	80 83       	st	Z, r24
#if (DATA_BITS_MODE == 4)

#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((command & 0xF0) >> 4);
     ea0:	a2 e3       	ldi	r26, 0x32	; 50
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	e2 e3       	ldi	r30, 0x32	; 50
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	98 2f       	mov	r25, r24
     eac:	90 7f       	andi	r25, 0xF0	; 240
     eae:	fe 01       	movw	r30, r28
     eb0:	ed 59       	subi	r30, 0x9D	; 157
     eb2:	ff 4f       	sbci	r31, 0xFF	; 255
     eb4:	80 81       	ld	r24, Z
     eb6:	82 95       	swap	r24
     eb8:	8f 70       	andi	r24, 0x0F	; 15
     eba:	89 2b       	or	r24, r25
     ebc:	8c 93       	st	X, r24
     ebe:	fe 01       	movw	r30, r28
     ec0:	ed 5b       	subi	r30, 0xBD	; 189
     ec2:	ff 4f       	sbci	r31, 0xFF	; 255
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	a0 e8       	ldi	r26, 0x80	; 128
     eca:	bf e3       	ldi	r27, 0x3F	; 63
     ecc:	80 83       	st	Z, r24
     ece:	91 83       	std	Z+1, r25	; 0x01
     ed0:	a2 83       	std	Z+2, r26	; 0x02
     ed2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ed4:	8e 01       	movw	r16, r28
     ed6:	01 5c       	subi	r16, 0xC1	; 193
     ed8:	1f 4f       	sbci	r17, 0xFF	; 255
     eda:	fe 01       	movw	r30, r28
     edc:	ed 5b       	subi	r30, 0xBD	; 189
     ede:	ff 4f       	sbci	r31, 0xFF	; 255
     ee0:	60 81       	ld	r22, Z
     ee2:	71 81       	ldd	r23, Z+1	; 0x01
     ee4:	82 81       	ldd	r24, Z+2	; 0x02
     ee6:	93 81       	ldd	r25, Z+3	; 0x03
     ee8:	20 e0       	ldi	r18, 0x00	; 0
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	4a ef       	ldi	r20, 0xFA	; 250
     eee:	54 e4       	ldi	r21, 0x44	; 68
     ef0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ef4:	dc 01       	movw	r26, r24
     ef6:	cb 01       	movw	r24, r22
     ef8:	f8 01       	movw	r30, r16
     efa:	80 83       	st	Z, r24
     efc:	91 83       	std	Z+1, r25	; 0x01
     efe:	a2 83       	std	Z+2, r26	; 0x02
     f00:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f02:	fe 01       	movw	r30, r28
     f04:	ff 96       	adiw	r30, 0x3f	; 63
     f06:	60 81       	ld	r22, Z
     f08:	71 81       	ldd	r23, Z+1	; 0x01
     f0a:	82 81       	ldd	r24, Z+2	; 0x02
     f0c:	93 81       	ldd	r25, Z+3	; 0x03
     f0e:	20 e0       	ldi	r18, 0x00	; 0
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	40 e8       	ldi	r20, 0x80	; 128
     f14:	5f e3       	ldi	r21, 0x3F	; 63
     f16:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f1a:	88 23       	and	r24, r24
     f1c:	2c f4       	brge	.+10     	; 0xf28 <LCD_sendCommand+0x3a0>
		__ticks = 1;
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	9e af       	std	Y+62, r25	; 0x3e
     f24:	8d af       	std	Y+61, r24	; 0x3d
     f26:	46 c0       	rjmp	.+140    	; 0xfb4 <LCD_sendCommand+0x42c>
	else if (__tmp > 65535)
     f28:	fe 01       	movw	r30, r28
     f2a:	ff 96       	adiw	r30, 0x3f	; 63
     f2c:	60 81       	ld	r22, Z
     f2e:	71 81       	ldd	r23, Z+1	; 0x01
     f30:	82 81       	ldd	r24, Z+2	; 0x02
     f32:	93 81       	ldd	r25, Z+3	; 0x03
     f34:	20 e0       	ldi	r18, 0x00	; 0
     f36:	3f ef       	ldi	r19, 0xFF	; 255
     f38:	4f e7       	ldi	r20, 0x7F	; 127
     f3a:	57 e4       	ldi	r21, 0x47	; 71
     f3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f40:	18 16       	cp	r1, r24
     f42:	64 f5       	brge	.+88     	; 0xf9c <LCD_sendCommand+0x414>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f44:	fe 01       	movw	r30, r28
     f46:	ed 5b       	subi	r30, 0xBD	; 189
     f48:	ff 4f       	sbci	r31, 0xFF	; 255
     f4a:	60 81       	ld	r22, Z
     f4c:	71 81       	ldd	r23, Z+1	; 0x01
     f4e:	82 81       	ldd	r24, Z+2	; 0x02
     f50:	93 81       	ldd	r25, Z+3	; 0x03
     f52:	20 e0       	ldi	r18, 0x00	; 0
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	40 e2       	ldi	r20, 0x20	; 32
     f58:	51 e4       	ldi	r21, 0x41	; 65
     f5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f5e:	dc 01       	movw	r26, r24
     f60:	cb 01       	movw	r24, r22
     f62:	bc 01       	movw	r22, r24
     f64:	cd 01       	movw	r24, r26
     f66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f6a:	dc 01       	movw	r26, r24
     f6c:	cb 01       	movw	r24, r22
     f6e:	9e af       	std	Y+62, r25	; 0x3e
     f70:	8d af       	std	Y+61, r24	; 0x3d
     f72:	0f c0       	rjmp	.+30     	; 0xf92 <LCD_sendCommand+0x40a>
     f74:	88 ec       	ldi	r24, 0xC8	; 200
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	9c af       	std	Y+60, r25	; 0x3c
     f7a:	8b af       	std	Y+59, r24	; 0x3b
     f7c:	8b ad       	ldd	r24, Y+59	; 0x3b
     f7e:	9c ad       	ldd	r25, Y+60	; 0x3c
     f80:	01 97       	sbiw	r24, 0x01	; 1
     f82:	f1 f7       	brne	.-4      	; 0xf80 <LCD_sendCommand+0x3f8>
     f84:	9c af       	std	Y+60, r25	; 0x3c
     f86:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f88:	8d ad       	ldd	r24, Y+61	; 0x3d
     f8a:	9e ad       	ldd	r25, Y+62	; 0x3e
     f8c:	01 97       	sbiw	r24, 0x01	; 1
     f8e:	9e af       	std	Y+62, r25	; 0x3e
     f90:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f92:	8d ad       	ldd	r24, Y+61	; 0x3d
     f94:	9e ad       	ldd	r25, Y+62	; 0x3e
     f96:	00 97       	sbiw	r24, 0x00	; 0
     f98:	69 f7       	brne	.-38     	; 0xf74 <LCD_sendCommand+0x3ec>
     f9a:	16 c0       	rjmp	.+44     	; 0xfc8 <LCD_sendCommand+0x440>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f9c:	fe 01       	movw	r30, r28
     f9e:	ff 96       	adiw	r30, 0x3f	; 63
     fa0:	60 81       	ld	r22, Z
     fa2:	71 81       	ldd	r23, Z+1	; 0x01
     fa4:	82 81       	ldd	r24, Z+2	; 0x02
     fa6:	93 81       	ldd	r25, Z+3	; 0x03
     fa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fac:	dc 01       	movw	r26, r24
     fae:	cb 01       	movw	r24, r22
     fb0:	9e af       	std	Y+62, r25	; 0x3e
     fb2:	8d af       	std	Y+61, r24	; 0x3d
     fb4:	8d ad       	ldd	r24, Y+61	; 0x3d
     fb6:	9e ad       	ldd	r25, Y+62	; 0x3e
     fb8:	9a af       	std	Y+58, r25	; 0x3a
     fba:	89 af       	std	Y+57, r24	; 0x39
     fbc:	89 ad       	ldd	r24, Y+57	; 0x39
     fbe:	9a ad       	ldd	r25, Y+58	; 0x3a
     fc0:	01 97       	sbiw	r24, 0x01	; 1
     fc2:	f1 f7       	brne	.-4      	; 0xfc0 <LCD_sendCommand+0x438>
     fc4:	9a af       	std	Y+58, r25	; 0x3a
     fc6:	89 af       	std	Y+57, r24	; 0x39
#endif

	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT,E);
     fc8:	a8 e3       	ldi	r26, 0x38	; 56
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e8 e3       	ldi	r30, 0x38	; 56
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	87 7f       	andi	r24, 0xF7	; 247
     fd4:	8c 93       	st	X, r24
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	a0 e8       	ldi	r26, 0x80	; 128
     fdc:	bf e3       	ldi	r27, 0x3F	; 63
     fde:	8d ab       	std	Y+53, r24	; 0x35
     fe0:	9e ab       	std	Y+54, r25	; 0x36
     fe2:	af ab       	std	Y+55, r26	; 0x37
     fe4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fe6:	6d a9       	ldd	r22, Y+53	; 0x35
     fe8:	7e a9       	ldd	r23, Y+54	; 0x36
     fea:	8f a9       	ldd	r24, Y+55	; 0x37
     fec:	98 ad       	ldd	r25, Y+56	; 0x38
     fee:	20 e0       	ldi	r18, 0x00	; 0
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	4a ef       	ldi	r20, 0xFA	; 250
     ff4:	54 e4       	ldi	r21, 0x44	; 68
     ff6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ffa:	dc 01       	movw	r26, r24
     ffc:	cb 01       	movw	r24, r22
     ffe:	89 ab       	std	Y+49, r24	; 0x31
    1000:	9a ab       	std	Y+50, r25	; 0x32
    1002:	ab ab       	std	Y+51, r26	; 0x33
    1004:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1006:	69 a9       	ldd	r22, Y+49	; 0x31
    1008:	7a a9       	ldd	r23, Y+50	; 0x32
    100a:	8b a9       	ldd	r24, Y+51	; 0x33
    100c:	9c a9       	ldd	r25, Y+52	; 0x34
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	40 e8       	ldi	r20, 0x80	; 128
    1014:	5f e3       	ldi	r21, 0x3F	; 63
    1016:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    101a:	88 23       	and	r24, r24
    101c:	2c f4       	brge	.+10     	; 0x1028 <LCD_sendCommand+0x4a0>
		__ticks = 1;
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	98 ab       	std	Y+48, r25	; 0x30
    1024:	8f a7       	std	Y+47, r24	; 0x2f
    1026:	3f c0       	rjmp	.+126    	; 0x10a6 <LCD_sendCommand+0x51e>
	else if (__tmp > 65535)
    1028:	69 a9       	ldd	r22, Y+49	; 0x31
    102a:	7a a9       	ldd	r23, Y+50	; 0x32
    102c:	8b a9       	ldd	r24, Y+51	; 0x33
    102e:	9c a9       	ldd	r25, Y+52	; 0x34
    1030:	20 e0       	ldi	r18, 0x00	; 0
    1032:	3f ef       	ldi	r19, 0xFF	; 255
    1034:	4f e7       	ldi	r20, 0x7F	; 127
    1036:	57 e4       	ldi	r21, 0x47	; 71
    1038:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    103c:	18 16       	cp	r1, r24
    103e:	4c f5       	brge	.+82     	; 0x1092 <LCD_sendCommand+0x50a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1040:	6d a9       	ldd	r22, Y+53	; 0x35
    1042:	7e a9       	ldd	r23, Y+54	; 0x36
    1044:	8f a9       	ldd	r24, Y+55	; 0x37
    1046:	98 ad       	ldd	r25, Y+56	; 0x38
    1048:	20 e0       	ldi	r18, 0x00	; 0
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	40 e2       	ldi	r20, 0x20	; 32
    104e:	51 e4       	ldi	r21, 0x41	; 65
    1050:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1054:	dc 01       	movw	r26, r24
    1056:	cb 01       	movw	r24, r22
    1058:	bc 01       	movw	r22, r24
    105a:	cd 01       	movw	r24, r26
    105c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1060:	dc 01       	movw	r26, r24
    1062:	cb 01       	movw	r24, r22
    1064:	98 ab       	std	Y+48, r25	; 0x30
    1066:	8f a7       	std	Y+47, r24	; 0x2f
    1068:	0f c0       	rjmp	.+30     	; 0x1088 <LCD_sendCommand+0x500>
    106a:	88 ec       	ldi	r24, 0xC8	; 200
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	9e a7       	std	Y+46, r25	; 0x2e
    1070:	8d a7       	std	Y+45, r24	; 0x2d
    1072:	8d a5       	ldd	r24, Y+45	; 0x2d
    1074:	9e a5       	ldd	r25, Y+46	; 0x2e
    1076:	01 97       	sbiw	r24, 0x01	; 1
    1078:	f1 f7       	brne	.-4      	; 0x1076 <LCD_sendCommand+0x4ee>
    107a:	9e a7       	std	Y+46, r25	; 0x2e
    107c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    107e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1080:	98 a9       	ldd	r25, Y+48	; 0x30
    1082:	01 97       	sbiw	r24, 0x01	; 1
    1084:	98 ab       	std	Y+48, r25	; 0x30
    1086:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1088:	8f a5       	ldd	r24, Y+47	; 0x2f
    108a:	98 a9       	ldd	r25, Y+48	; 0x30
    108c:	00 97       	sbiw	r24, 0x00	; 0
    108e:	69 f7       	brne	.-38     	; 0x106a <LCD_sendCommand+0x4e2>
    1090:	14 c0       	rjmp	.+40     	; 0x10ba <LCD_sendCommand+0x532>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1092:	69 a9       	ldd	r22, Y+49	; 0x31
    1094:	7a a9       	ldd	r23, Y+50	; 0x32
    1096:	8b a9       	ldd	r24, Y+51	; 0x33
    1098:	9c a9       	ldd	r25, Y+52	; 0x34
    109a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    109e:	dc 01       	movw	r26, r24
    10a0:	cb 01       	movw	r24, r22
    10a2:	98 ab       	std	Y+48, r25	; 0x30
    10a4:	8f a7       	std	Y+47, r24	; 0x2f
    10a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    10a8:	98 a9       	ldd	r25, Y+48	; 0x30
    10aa:	9c a7       	std	Y+44, r25	; 0x2c
    10ac:	8b a7       	std	Y+43, r24	; 0x2b
    10ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    10b0:	9c a5       	ldd	r25, Y+44	; 0x2c
    10b2:	01 97       	sbiw	r24, 0x01	; 1
    10b4:	f1 f7       	brne	.-4      	; 0x10b2 <LCD_sendCommand+0x52a>
    10b6:	9c a7       	std	Y+44, r25	; 0x2c
    10b8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	SET_BIT(LCD_CTRL_PORT,E);
    10ba:	a8 e3       	ldi	r26, 0x38	; 56
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e8 e3       	ldi	r30, 0x38	; 56
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	88 60       	ori	r24, 0x08	; 8
    10c6:	8c 93       	st	X, r24
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	a0 e8       	ldi	r26, 0x80	; 128
    10ce:	bf e3       	ldi	r27, 0x3F	; 63
    10d0:	8f a3       	std	Y+39, r24	; 0x27
    10d2:	98 a7       	std	Y+40, r25	; 0x28
    10d4:	a9 a7       	std	Y+41, r26	; 0x29
    10d6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10d8:	6f a1       	ldd	r22, Y+39	; 0x27
    10da:	78 a5       	ldd	r23, Y+40	; 0x28
    10dc:	89 a5       	ldd	r24, Y+41	; 0x29
    10de:	9a a5       	ldd	r25, Y+42	; 0x2a
    10e0:	20 e0       	ldi	r18, 0x00	; 0
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	4a ef       	ldi	r20, 0xFA	; 250
    10e6:	54 e4       	ldi	r21, 0x44	; 68
    10e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ec:	dc 01       	movw	r26, r24
    10ee:	cb 01       	movw	r24, r22
    10f0:	8b a3       	std	Y+35, r24	; 0x23
    10f2:	9c a3       	std	Y+36, r25	; 0x24
    10f4:	ad a3       	std	Y+37, r26	; 0x25
    10f6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    10f8:	6b a1       	ldd	r22, Y+35	; 0x23
    10fa:	7c a1       	ldd	r23, Y+36	; 0x24
    10fc:	8d a1       	ldd	r24, Y+37	; 0x25
    10fe:	9e a1       	ldd	r25, Y+38	; 0x26
    1100:	20 e0       	ldi	r18, 0x00	; 0
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	40 e8       	ldi	r20, 0x80	; 128
    1106:	5f e3       	ldi	r21, 0x3F	; 63
    1108:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    110c:	88 23       	and	r24, r24
    110e:	2c f4       	brge	.+10     	; 0x111a <LCD_sendCommand+0x592>
		__ticks = 1;
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	9a a3       	std	Y+34, r25	; 0x22
    1116:	89 a3       	std	Y+33, r24	; 0x21
    1118:	3f c0       	rjmp	.+126    	; 0x1198 <LCD_sendCommand+0x610>
	else if (__tmp > 65535)
    111a:	6b a1       	ldd	r22, Y+35	; 0x23
    111c:	7c a1       	ldd	r23, Y+36	; 0x24
    111e:	8d a1       	ldd	r24, Y+37	; 0x25
    1120:	9e a1       	ldd	r25, Y+38	; 0x26
    1122:	20 e0       	ldi	r18, 0x00	; 0
    1124:	3f ef       	ldi	r19, 0xFF	; 255
    1126:	4f e7       	ldi	r20, 0x7F	; 127
    1128:	57 e4       	ldi	r21, 0x47	; 71
    112a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    112e:	18 16       	cp	r1, r24
    1130:	4c f5       	brge	.+82     	; 0x1184 <LCD_sendCommand+0x5fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1132:	6f a1       	ldd	r22, Y+39	; 0x27
    1134:	78 a5       	ldd	r23, Y+40	; 0x28
    1136:	89 a5       	ldd	r24, Y+41	; 0x29
    1138:	9a a5       	ldd	r25, Y+42	; 0x2a
    113a:	20 e0       	ldi	r18, 0x00	; 0
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	40 e2       	ldi	r20, 0x20	; 32
    1140:	51 e4       	ldi	r21, 0x41	; 65
    1142:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1146:	dc 01       	movw	r26, r24
    1148:	cb 01       	movw	r24, r22
    114a:	bc 01       	movw	r22, r24
    114c:	cd 01       	movw	r24, r26
    114e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1152:	dc 01       	movw	r26, r24
    1154:	cb 01       	movw	r24, r22
    1156:	9a a3       	std	Y+34, r25	; 0x22
    1158:	89 a3       	std	Y+33, r24	; 0x21
    115a:	0f c0       	rjmp	.+30     	; 0x117a <LCD_sendCommand+0x5f2>
    115c:	88 ec       	ldi	r24, 0xC8	; 200
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	98 a3       	std	Y+32, r25	; 0x20
    1162:	8f 8f       	std	Y+31, r24	; 0x1f
    1164:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1166:	98 a1       	ldd	r25, Y+32	; 0x20
    1168:	01 97       	sbiw	r24, 0x01	; 1
    116a:	f1 f7       	brne	.-4      	; 0x1168 <LCD_sendCommand+0x5e0>
    116c:	98 a3       	std	Y+32, r25	; 0x20
    116e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1170:	89 a1       	ldd	r24, Y+33	; 0x21
    1172:	9a a1       	ldd	r25, Y+34	; 0x22
    1174:	01 97       	sbiw	r24, 0x01	; 1
    1176:	9a a3       	std	Y+34, r25	; 0x22
    1178:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    117a:	89 a1       	ldd	r24, Y+33	; 0x21
    117c:	9a a1       	ldd	r25, Y+34	; 0x22
    117e:	00 97       	sbiw	r24, 0x00	; 0
    1180:	69 f7       	brne	.-38     	; 0x115c <LCD_sendCommand+0x5d4>
    1182:	14 c0       	rjmp	.+40     	; 0x11ac <LCD_sendCommand+0x624>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1184:	6b a1       	ldd	r22, Y+35	; 0x23
    1186:	7c a1       	ldd	r23, Y+36	; 0x24
    1188:	8d a1       	ldd	r24, Y+37	; 0x25
    118a:	9e a1       	ldd	r25, Y+38	; 0x26
    118c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1190:	dc 01       	movw	r26, r24
    1192:	cb 01       	movw	r24, r22
    1194:	9a a3       	std	Y+34, r25	; 0x22
    1196:	89 a3       	std	Y+33, r24	; 0x21
    1198:	89 a1       	ldd	r24, Y+33	; 0x21
    119a:	9a a1       	ldd	r25, Y+34	; 0x22
    119c:	9e 8f       	std	Y+30, r25	; 0x1e
    119e:	8d 8f       	std	Y+29, r24	; 0x1d
    11a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11a4:	01 97       	sbiw	r24, 0x01	; 1
    11a6:	f1 f7       	brne	.-4      	; 0x11a4 <LCD_sendCommand+0x61c>
    11a8:	9e 8f       	std	Y+30, r25	; 0x1e
    11aa:	8d 8f       	std	Y+29, r24	; 0x1d


	#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (command & 0x0F);
    11ac:	a2 e3       	ldi	r26, 0x32	; 50
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	e2 e3       	ldi	r30, 0x32	; 50
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	98 2f       	mov	r25, r24
    11b8:	90 7f       	andi	r25, 0xF0	; 240
    11ba:	fe 01       	movw	r30, r28
    11bc:	ed 59       	subi	r30, 0x9D	; 157
    11be:	ff 4f       	sbci	r31, 0xFF	; 255
    11c0:	80 81       	ld	r24, Z
    11c2:	8f 70       	andi	r24, 0x0F	; 15
    11c4:	89 2b       	or	r24, r25
    11c6:	8c 93       	st	X, r24
    11c8:	80 e0       	ldi	r24, 0x00	; 0
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	a0 e8       	ldi	r26, 0x80	; 128
    11ce:	bf e3       	ldi	r27, 0x3F	; 63
    11d0:	89 8f       	std	Y+25, r24	; 0x19
    11d2:	9a 8f       	std	Y+26, r25	; 0x1a
    11d4:	ab 8f       	std	Y+27, r26	; 0x1b
    11d6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11d8:	69 8d       	ldd	r22, Y+25	; 0x19
    11da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11e0:	20 e0       	ldi	r18, 0x00	; 0
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	4a ef       	ldi	r20, 0xFA	; 250
    11e6:	54 e4       	ldi	r21, 0x44	; 68
    11e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ec:	dc 01       	movw	r26, r24
    11ee:	cb 01       	movw	r24, r22
    11f0:	8d 8b       	std	Y+21, r24	; 0x15
    11f2:	9e 8b       	std	Y+22, r25	; 0x16
    11f4:	af 8b       	std	Y+23, r26	; 0x17
    11f6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    11f8:	6d 89       	ldd	r22, Y+21	; 0x15
    11fa:	7e 89       	ldd	r23, Y+22	; 0x16
    11fc:	8f 89       	ldd	r24, Y+23	; 0x17
    11fe:	98 8d       	ldd	r25, Y+24	; 0x18
    1200:	20 e0       	ldi	r18, 0x00	; 0
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	40 e8       	ldi	r20, 0x80	; 128
    1206:	5f e3       	ldi	r21, 0x3F	; 63
    1208:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    120c:	88 23       	and	r24, r24
    120e:	2c f4       	brge	.+10     	; 0x121a <LCD_sendCommand+0x692>
		__ticks = 1;
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	9c 8b       	std	Y+20, r25	; 0x14
    1216:	8b 8b       	std	Y+19, r24	; 0x13
    1218:	3f c0       	rjmp	.+126    	; 0x1298 <LCD_sendCommand+0x710>
	else if (__tmp > 65535)
    121a:	6d 89       	ldd	r22, Y+21	; 0x15
    121c:	7e 89       	ldd	r23, Y+22	; 0x16
    121e:	8f 89       	ldd	r24, Y+23	; 0x17
    1220:	98 8d       	ldd	r25, Y+24	; 0x18
    1222:	20 e0       	ldi	r18, 0x00	; 0
    1224:	3f ef       	ldi	r19, 0xFF	; 255
    1226:	4f e7       	ldi	r20, 0x7F	; 127
    1228:	57 e4       	ldi	r21, 0x47	; 71
    122a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    122e:	18 16       	cp	r1, r24
    1230:	4c f5       	brge	.+82     	; 0x1284 <LCD_sendCommand+0x6fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1232:	69 8d       	ldd	r22, Y+25	; 0x19
    1234:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1236:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1238:	9c 8d       	ldd	r25, Y+28	; 0x1c
    123a:	20 e0       	ldi	r18, 0x00	; 0
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	40 e2       	ldi	r20, 0x20	; 32
    1240:	51 e4       	ldi	r21, 0x41	; 65
    1242:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1246:	dc 01       	movw	r26, r24
    1248:	cb 01       	movw	r24, r22
    124a:	bc 01       	movw	r22, r24
    124c:	cd 01       	movw	r24, r26
    124e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1252:	dc 01       	movw	r26, r24
    1254:	cb 01       	movw	r24, r22
    1256:	9c 8b       	std	Y+20, r25	; 0x14
    1258:	8b 8b       	std	Y+19, r24	; 0x13
    125a:	0f c0       	rjmp	.+30     	; 0x127a <LCD_sendCommand+0x6f2>
    125c:	88 ec       	ldi	r24, 0xC8	; 200
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	9a 8b       	std	Y+18, r25	; 0x12
    1262:	89 8b       	std	Y+17, r24	; 0x11
    1264:	89 89       	ldd	r24, Y+17	; 0x11
    1266:	9a 89       	ldd	r25, Y+18	; 0x12
    1268:	01 97       	sbiw	r24, 0x01	; 1
    126a:	f1 f7       	brne	.-4      	; 0x1268 <LCD_sendCommand+0x6e0>
    126c:	9a 8b       	std	Y+18, r25	; 0x12
    126e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1270:	8b 89       	ldd	r24, Y+19	; 0x13
    1272:	9c 89       	ldd	r25, Y+20	; 0x14
    1274:	01 97       	sbiw	r24, 0x01	; 1
    1276:	9c 8b       	std	Y+20, r25	; 0x14
    1278:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    127a:	8b 89       	ldd	r24, Y+19	; 0x13
    127c:	9c 89       	ldd	r25, Y+20	; 0x14
    127e:	00 97       	sbiw	r24, 0x00	; 0
    1280:	69 f7       	brne	.-38     	; 0x125c <LCD_sendCommand+0x6d4>
    1282:	14 c0       	rjmp	.+40     	; 0x12ac <LCD_sendCommand+0x724>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1284:	6d 89       	ldd	r22, Y+21	; 0x15
    1286:	7e 89       	ldd	r23, Y+22	; 0x16
    1288:	8f 89       	ldd	r24, Y+23	; 0x17
    128a:	98 8d       	ldd	r25, Y+24	; 0x18
    128c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1290:	dc 01       	movw	r26, r24
    1292:	cb 01       	movw	r24, r22
    1294:	9c 8b       	std	Y+20, r25	; 0x14
    1296:	8b 8b       	std	Y+19, r24	; 0x13
    1298:	8b 89       	ldd	r24, Y+19	; 0x13
    129a:	9c 89       	ldd	r25, Y+20	; 0x14
    129c:	98 8b       	std	Y+16, r25	; 0x10
    129e:	8f 87       	std	Y+15, r24	; 0x0f
    12a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    12a2:	98 89       	ldd	r25, Y+16	; 0x10
    12a4:	01 97       	sbiw	r24, 0x01	; 1
    12a6:	f1 f7       	brne	.-4      	; 0x12a4 <LCD_sendCommand+0x71c>
    12a8:	98 8b       	std	Y+16, r25	; 0x10
    12aa:	8f 87       	std	Y+15, r24	; 0x0f
#endif

	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT,E);
    12ac:	a8 e3       	ldi	r26, 0x38	; 56
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	e8 e3       	ldi	r30, 0x38	; 56
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	87 7f       	andi	r24, 0xF7	; 247
    12b8:	8c 93       	st	X, r24
    12ba:	80 e0       	ldi	r24, 0x00	; 0
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	a0 e8       	ldi	r26, 0x80	; 128
    12c0:	bf e3       	ldi	r27, 0x3F	; 63
    12c2:	8b 87       	std	Y+11, r24	; 0x0b
    12c4:	9c 87       	std	Y+12, r25	; 0x0c
    12c6:	ad 87       	std	Y+13, r26	; 0x0d
    12c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    12cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    12ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    12d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    12d2:	20 e0       	ldi	r18, 0x00	; 0
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	4a ef       	ldi	r20, 0xFA	; 250
    12d8:	54 e4       	ldi	r21, 0x44	; 68
    12da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12de:	dc 01       	movw	r26, r24
    12e0:	cb 01       	movw	r24, r22
    12e2:	8f 83       	std	Y+7, r24	; 0x07
    12e4:	98 87       	std	Y+8, r25	; 0x08
    12e6:	a9 87       	std	Y+9, r26	; 0x09
    12e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12ea:	6f 81       	ldd	r22, Y+7	; 0x07
    12ec:	78 85       	ldd	r23, Y+8	; 0x08
    12ee:	89 85       	ldd	r24, Y+9	; 0x09
    12f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12f2:	20 e0       	ldi	r18, 0x00	; 0
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	40 e8       	ldi	r20, 0x80	; 128
    12f8:	5f e3       	ldi	r21, 0x3F	; 63
    12fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12fe:	88 23       	and	r24, r24
    1300:	2c f4       	brge	.+10     	; 0x130c <LCD_sendCommand+0x784>
		__ticks = 1;
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	9e 83       	std	Y+6, r25	; 0x06
    1308:	8d 83       	std	Y+5, r24	; 0x05
    130a:	3f c0       	rjmp	.+126    	; 0x138a <LCD_sendCommand+0x802>
	else if (__tmp > 65535)
    130c:	6f 81       	ldd	r22, Y+7	; 0x07
    130e:	78 85       	ldd	r23, Y+8	; 0x08
    1310:	89 85       	ldd	r24, Y+9	; 0x09
    1312:	9a 85       	ldd	r25, Y+10	; 0x0a
    1314:	20 e0       	ldi	r18, 0x00	; 0
    1316:	3f ef       	ldi	r19, 0xFF	; 255
    1318:	4f e7       	ldi	r20, 0x7F	; 127
    131a:	57 e4       	ldi	r21, 0x47	; 71
    131c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1320:	18 16       	cp	r1, r24
    1322:	4c f5       	brge	.+82     	; 0x1376 <LCD_sendCommand+0x7ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1324:	6b 85       	ldd	r22, Y+11	; 0x0b
    1326:	7c 85       	ldd	r23, Y+12	; 0x0c
    1328:	8d 85       	ldd	r24, Y+13	; 0x0d
    132a:	9e 85       	ldd	r25, Y+14	; 0x0e
    132c:	20 e0       	ldi	r18, 0x00	; 0
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	40 e2       	ldi	r20, 0x20	; 32
    1332:	51 e4       	ldi	r21, 0x41	; 65
    1334:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1338:	dc 01       	movw	r26, r24
    133a:	cb 01       	movw	r24, r22
    133c:	bc 01       	movw	r22, r24
    133e:	cd 01       	movw	r24, r26
    1340:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1344:	dc 01       	movw	r26, r24
    1346:	cb 01       	movw	r24, r22
    1348:	9e 83       	std	Y+6, r25	; 0x06
    134a:	8d 83       	std	Y+5, r24	; 0x05
    134c:	0f c0       	rjmp	.+30     	; 0x136c <LCD_sendCommand+0x7e4>
    134e:	88 ec       	ldi	r24, 0xC8	; 200
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	9c 83       	std	Y+4, r25	; 0x04
    1354:	8b 83       	std	Y+3, r24	; 0x03
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	9c 81       	ldd	r25, Y+4	; 0x04
    135a:	01 97       	sbiw	r24, 0x01	; 1
    135c:	f1 f7       	brne	.-4      	; 0x135a <LCD_sendCommand+0x7d2>
    135e:	9c 83       	std	Y+4, r25	; 0x04
    1360:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1362:	8d 81       	ldd	r24, Y+5	; 0x05
    1364:	9e 81       	ldd	r25, Y+6	; 0x06
    1366:	01 97       	sbiw	r24, 0x01	; 1
    1368:	9e 83       	std	Y+6, r25	; 0x06
    136a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    136c:	8d 81       	ldd	r24, Y+5	; 0x05
    136e:	9e 81       	ldd	r25, Y+6	; 0x06
    1370:	00 97       	sbiw	r24, 0x00	; 0
    1372:	69 f7       	brne	.-38     	; 0x134e <LCD_sendCommand+0x7c6>
    1374:	14 c0       	rjmp	.+40     	; 0x139e <LCD_sendCommand+0x816>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1376:	6f 81       	ldd	r22, Y+7	; 0x07
    1378:	78 85       	ldd	r23, Y+8	; 0x08
    137a:	89 85       	ldd	r24, Y+9	; 0x09
    137c:	9a 85       	ldd	r25, Y+10	; 0x0a
    137e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1382:	dc 01       	movw	r26, r24
    1384:	cb 01       	movw	r24, r22
    1386:	9e 83       	std	Y+6, r25	; 0x06
    1388:	8d 83       	std	Y+5, r24	; 0x05
    138a:	8d 81       	ldd	r24, Y+5	; 0x05
    138c:	9e 81       	ldd	r25, Y+6	; 0x06
    138e:	9a 83       	std	Y+2, r25	; 0x02
    1390:	89 83       	std	Y+1, r24	; 0x01
    1392:	89 81       	ldd	r24, Y+1	; 0x01
    1394:	9a 81       	ldd	r25, Y+2	; 0x02
    1396:	01 97       	sbiw	r24, 0x01	; 1
    1398:	f1 f7       	brne	.-4      	; 0x1396 <LCD_sendCommand+0x80e>
    139a:	9a 83       	std	Y+2, r25	; 0x02
    139c:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command;
	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT,E);
	_delay_ms(1);
#endif
}
    139e:	cd 59       	subi	r28, 0x9D	; 157
    13a0:	df 4f       	sbci	r29, 0xFF	; 255
    13a2:	0f b6       	in	r0, 0x3f	; 63
    13a4:	f8 94       	cli
    13a6:	de bf       	out	0x3e, r29	; 62
    13a8:	0f be       	out	0x3f, r0	; 63
    13aa:	cd bf       	out	0x3d, r28	; 61
    13ac:	cf 91       	pop	r28
    13ae:	df 91       	pop	r29
    13b0:	1f 91       	pop	r17
    13b2:	0f 91       	pop	r16
    13b4:	08 95       	ret

000013b6 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    13b6:	0f 93       	push	r16
    13b8:	1f 93       	push	r17
    13ba:	df 93       	push	r29
    13bc:	cf 93       	push	r28
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
    13c2:	c3 56       	subi	r28, 0x63	; 99
    13c4:	d0 40       	sbci	r29, 0x00	; 0
    13c6:	0f b6       	in	r0, 0x3f	; 63
    13c8:	f8 94       	cli
    13ca:	de bf       	out	0x3e, r29	; 62
    13cc:	0f be       	out	0x3f, r0	; 63
    13ce:	cd bf       	out	0x3d, r28	; 61
    13d0:	fe 01       	movw	r30, r28
    13d2:	ed 59       	subi	r30, 0x9D	; 157
    13d4:	ff 4f       	sbci	r31, 0xFF	; 255
    13d6:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,RS);
    13d8:	a8 e3       	ldi	r26, 0x38	; 56
    13da:	b0 e0       	ldi	r27, 0x00	; 0
    13dc:	e8 e3       	ldi	r30, 0x38	; 56
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	82 60       	ori	r24, 0x02	; 2
    13e4:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW);
    13e6:	a8 e3       	ldi	r26, 0x38	; 56
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	e8 e3       	ldi	r30, 0x38	; 56
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	8b 7f       	andi	r24, 0xFB	; 251
    13f2:	8c 93       	st	X, r24
    13f4:	fe 01       	movw	r30, r28
    13f6:	e1 5a       	subi	r30, 0xA1	; 161
    13f8:	ff 4f       	sbci	r31, 0xFF	; 255
    13fa:	80 e0       	ldi	r24, 0x00	; 0
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	a0 e8       	ldi	r26, 0x80	; 128
    1400:	bf e3       	ldi	r27, 0x3F	; 63
    1402:	80 83       	st	Z, r24
    1404:	91 83       	std	Z+1, r25	; 0x01
    1406:	a2 83       	std	Z+2, r26	; 0x02
    1408:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    140a:	8e 01       	movw	r16, r28
    140c:	05 5a       	subi	r16, 0xA5	; 165
    140e:	1f 4f       	sbci	r17, 0xFF	; 255
    1410:	fe 01       	movw	r30, r28
    1412:	e1 5a       	subi	r30, 0xA1	; 161
    1414:	ff 4f       	sbci	r31, 0xFF	; 255
    1416:	60 81       	ld	r22, Z
    1418:	71 81       	ldd	r23, Z+1	; 0x01
    141a:	82 81       	ldd	r24, Z+2	; 0x02
    141c:	93 81       	ldd	r25, Z+3	; 0x03
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	4a ef       	ldi	r20, 0xFA	; 250
    1424:	54 e4       	ldi	r21, 0x44	; 68
    1426:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    142a:	dc 01       	movw	r26, r24
    142c:	cb 01       	movw	r24, r22
    142e:	f8 01       	movw	r30, r16
    1430:	80 83       	st	Z, r24
    1432:	91 83       	std	Z+1, r25	; 0x01
    1434:	a2 83       	std	Z+2, r26	; 0x02
    1436:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1438:	fe 01       	movw	r30, r28
    143a:	e5 5a       	subi	r30, 0xA5	; 165
    143c:	ff 4f       	sbci	r31, 0xFF	; 255
    143e:	60 81       	ld	r22, Z
    1440:	71 81       	ldd	r23, Z+1	; 0x01
    1442:	82 81       	ldd	r24, Z+2	; 0x02
    1444:	93 81       	ldd	r25, Z+3	; 0x03
    1446:	20 e0       	ldi	r18, 0x00	; 0
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	40 e8       	ldi	r20, 0x80	; 128
    144c:	5f e3       	ldi	r21, 0x3F	; 63
    144e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1452:	88 23       	and	r24, r24
    1454:	44 f4       	brge	.+16     	; 0x1466 <LCD_displayCharacter+0xb0>
		__ticks = 1;
    1456:	fe 01       	movw	r30, r28
    1458:	e7 5a       	subi	r30, 0xA7	; 167
    145a:	ff 4f       	sbci	r31, 0xFF	; 255
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	91 83       	std	Z+1, r25	; 0x01
    1462:	80 83       	st	Z, r24
    1464:	64 c0       	rjmp	.+200    	; 0x152e <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    1466:	fe 01       	movw	r30, r28
    1468:	e5 5a       	subi	r30, 0xA5	; 165
    146a:	ff 4f       	sbci	r31, 0xFF	; 255
    146c:	60 81       	ld	r22, Z
    146e:	71 81       	ldd	r23, Z+1	; 0x01
    1470:	82 81       	ldd	r24, Z+2	; 0x02
    1472:	93 81       	ldd	r25, Z+3	; 0x03
    1474:	20 e0       	ldi	r18, 0x00	; 0
    1476:	3f ef       	ldi	r19, 0xFF	; 255
    1478:	4f e7       	ldi	r20, 0x7F	; 127
    147a:	57 e4       	ldi	r21, 0x47	; 71
    147c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1480:	18 16       	cp	r1, r24
    1482:	0c f0       	brlt	.+2      	; 0x1486 <LCD_displayCharacter+0xd0>
    1484:	43 c0       	rjmp	.+134    	; 0x150c <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1486:	fe 01       	movw	r30, r28
    1488:	e1 5a       	subi	r30, 0xA1	; 161
    148a:	ff 4f       	sbci	r31, 0xFF	; 255
    148c:	60 81       	ld	r22, Z
    148e:	71 81       	ldd	r23, Z+1	; 0x01
    1490:	82 81       	ldd	r24, Z+2	; 0x02
    1492:	93 81       	ldd	r25, Z+3	; 0x03
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	40 e2       	ldi	r20, 0x20	; 32
    149a:	51 e4       	ldi	r21, 0x41	; 65
    149c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a0:	dc 01       	movw	r26, r24
    14a2:	cb 01       	movw	r24, r22
    14a4:	8e 01       	movw	r16, r28
    14a6:	07 5a       	subi	r16, 0xA7	; 167
    14a8:	1f 4f       	sbci	r17, 0xFF	; 255
    14aa:	bc 01       	movw	r22, r24
    14ac:	cd 01       	movw	r24, r26
    14ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14b2:	dc 01       	movw	r26, r24
    14b4:	cb 01       	movw	r24, r22
    14b6:	f8 01       	movw	r30, r16
    14b8:	91 83       	std	Z+1, r25	; 0x01
    14ba:	80 83       	st	Z, r24
    14bc:	1f c0       	rjmp	.+62     	; 0x14fc <LCD_displayCharacter+0x146>
    14be:	fe 01       	movw	r30, r28
    14c0:	e9 5a       	subi	r30, 0xA9	; 169
    14c2:	ff 4f       	sbci	r31, 0xFF	; 255
    14c4:	88 ec       	ldi	r24, 0xC8	; 200
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	91 83       	std	Z+1, r25	; 0x01
    14ca:	80 83       	st	Z, r24
    14cc:	fe 01       	movw	r30, r28
    14ce:	e9 5a       	subi	r30, 0xA9	; 169
    14d0:	ff 4f       	sbci	r31, 0xFF	; 255
    14d2:	80 81       	ld	r24, Z
    14d4:	91 81       	ldd	r25, Z+1	; 0x01
    14d6:	01 97       	sbiw	r24, 0x01	; 1
    14d8:	f1 f7       	brne	.-4      	; 0x14d6 <LCD_displayCharacter+0x120>
    14da:	fe 01       	movw	r30, r28
    14dc:	e9 5a       	subi	r30, 0xA9	; 169
    14de:	ff 4f       	sbci	r31, 0xFF	; 255
    14e0:	91 83       	std	Z+1, r25	; 0x01
    14e2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14e4:	de 01       	movw	r26, r28
    14e6:	a7 5a       	subi	r26, 0xA7	; 167
    14e8:	bf 4f       	sbci	r27, 0xFF	; 255
    14ea:	fe 01       	movw	r30, r28
    14ec:	e7 5a       	subi	r30, 0xA7	; 167
    14ee:	ff 4f       	sbci	r31, 0xFF	; 255
    14f0:	80 81       	ld	r24, Z
    14f2:	91 81       	ldd	r25, Z+1	; 0x01
    14f4:	01 97       	sbiw	r24, 0x01	; 1
    14f6:	11 96       	adiw	r26, 0x01	; 1
    14f8:	9c 93       	st	X, r25
    14fa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14fc:	fe 01       	movw	r30, r28
    14fe:	e7 5a       	subi	r30, 0xA7	; 167
    1500:	ff 4f       	sbci	r31, 0xFF	; 255
    1502:	80 81       	ld	r24, Z
    1504:	91 81       	ldd	r25, Z+1	; 0x01
    1506:	00 97       	sbiw	r24, 0x00	; 0
    1508:	d1 f6       	brne	.-76     	; 0x14be <LCD_displayCharacter+0x108>
    150a:	27 c0       	rjmp	.+78     	; 0x155a <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    150c:	8e 01       	movw	r16, r28
    150e:	07 5a       	subi	r16, 0xA7	; 167
    1510:	1f 4f       	sbci	r17, 0xFF	; 255
    1512:	fe 01       	movw	r30, r28
    1514:	e5 5a       	subi	r30, 0xA5	; 165
    1516:	ff 4f       	sbci	r31, 0xFF	; 255
    1518:	60 81       	ld	r22, Z
    151a:	71 81       	ldd	r23, Z+1	; 0x01
    151c:	82 81       	ldd	r24, Z+2	; 0x02
    151e:	93 81       	ldd	r25, Z+3	; 0x03
    1520:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1524:	dc 01       	movw	r26, r24
    1526:	cb 01       	movw	r24, r22
    1528:	f8 01       	movw	r30, r16
    152a:	91 83       	std	Z+1, r25	; 0x01
    152c:	80 83       	st	Z, r24
    152e:	de 01       	movw	r26, r28
    1530:	ab 5a       	subi	r26, 0xAB	; 171
    1532:	bf 4f       	sbci	r27, 0xFF	; 255
    1534:	fe 01       	movw	r30, r28
    1536:	e7 5a       	subi	r30, 0xA7	; 167
    1538:	ff 4f       	sbci	r31, 0xFF	; 255
    153a:	80 81       	ld	r24, Z
    153c:	91 81       	ldd	r25, Z+1	; 0x01
    153e:	8d 93       	st	X+, r24
    1540:	9c 93       	st	X, r25
    1542:	fe 01       	movw	r30, r28
    1544:	eb 5a       	subi	r30, 0xAB	; 171
    1546:	ff 4f       	sbci	r31, 0xFF	; 255
    1548:	80 81       	ld	r24, Z
    154a:	91 81       	ldd	r25, Z+1	; 0x01
    154c:	01 97       	sbiw	r24, 0x01	; 1
    154e:	f1 f7       	brne	.-4      	; 0x154c <LCD_displayCharacter+0x196>
    1550:	fe 01       	movw	r30, r28
    1552:	eb 5a       	subi	r30, 0xAB	; 171
    1554:	ff 4f       	sbci	r31, 0xFF	; 255
    1556:	91 83       	std	Z+1, r25	; 0x01
    1558:	80 83       	st	Z, r24
	_delay_ms(1);
	SET_BIT(LCD_CTRL_PORT,E);
    155a:	a8 e3       	ldi	r26, 0x38	; 56
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	e8 e3       	ldi	r30, 0x38	; 56
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	88 60       	ori	r24, 0x08	; 8
    1566:	8c 93       	st	X, r24
    1568:	fe 01       	movw	r30, r28
    156a:	ef 5a       	subi	r30, 0xAF	; 175
    156c:	ff 4f       	sbci	r31, 0xFF	; 255
    156e:	80 e0       	ldi	r24, 0x00	; 0
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	a0 e8       	ldi	r26, 0x80	; 128
    1574:	bf e3       	ldi	r27, 0x3F	; 63
    1576:	80 83       	st	Z, r24
    1578:	91 83       	std	Z+1, r25	; 0x01
    157a:	a2 83       	std	Z+2, r26	; 0x02
    157c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    157e:	8e 01       	movw	r16, r28
    1580:	03 5b       	subi	r16, 0xB3	; 179
    1582:	1f 4f       	sbci	r17, 0xFF	; 255
    1584:	fe 01       	movw	r30, r28
    1586:	ef 5a       	subi	r30, 0xAF	; 175
    1588:	ff 4f       	sbci	r31, 0xFF	; 255
    158a:	60 81       	ld	r22, Z
    158c:	71 81       	ldd	r23, Z+1	; 0x01
    158e:	82 81       	ldd	r24, Z+2	; 0x02
    1590:	93 81       	ldd	r25, Z+3	; 0x03
    1592:	20 e0       	ldi	r18, 0x00	; 0
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	4a ef       	ldi	r20, 0xFA	; 250
    1598:	54 e4       	ldi	r21, 0x44	; 68
    159a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    159e:	dc 01       	movw	r26, r24
    15a0:	cb 01       	movw	r24, r22
    15a2:	f8 01       	movw	r30, r16
    15a4:	80 83       	st	Z, r24
    15a6:	91 83       	std	Z+1, r25	; 0x01
    15a8:	a2 83       	std	Z+2, r26	; 0x02
    15aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15ac:	fe 01       	movw	r30, r28
    15ae:	e3 5b       	subi	r30, 0xB3	; 179
    15b0:	ff 4f       	sbci	r31, 0xFF	; 255
    15b2:	60 81       	ld	r22, Z
    15b4:	71 81       	ldd	r23, Z+1	; 0x01
    15b6:	82 81       	ldd	r24, Z+2	; 0x02
    15b8:	93 81       	ldd	r25, Z+3	; 0x03
    15ba:	20 e0       	ldi	r18, 0x00	; 0
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	40 e8       	ldi	r20, 0x80	; 128
    15c0:	5f e3       	ldi	r21, 0x3F	; 63
    15c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15c6:	88 23       	and	r24, r24
    15c8:	44 f4       	brge	.+16     	; 0x15da <LCD_displayCharacter+0x224>
		__ticks = 1;
    15ca:	fe 01       	movw	r30, r28
    15cc:	e5 5b       	subi	r30, 0xB5	; 181
    15ce:	ff 4f       	sbci	r31, 0xFF	; 255
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	91 83       	std	Z+1, r25	; 0x01
    15d6:	80 83       	st	Z, r24
    15d8:	64 c0       	rjmp	.+200    	; 0x16a2 <LCD_displayCharacter+0x2ec>
	else if (__tmp > 65535)
    15da:	fe 01       	movw	r30, r28
    15dc:	e3 5b       	subi	r30, 0xB3	; 179
    15de:	ff 4f       	sbci	r31, 0xFF	; 255
    15e0:	60 81       	ld	r22, Z
    15e2:	71 81       	ldd	r23, Z+1	; 0x01
    15e4:	82 81       	ldd	r24, Z+2	; 0x02
    15e6:	93 81       	ldd	r25, Z+3	; 0x03
    15e8:	20 e0       	ldi	r18, 0x00	; 0
    15ea:	3f ef       	ldi	r19, 0xFF	; 255
    15ec:	4f e7       	ldi	r20, 0x7F	; 127
    15ee:	57 e4       	ldi	r21, 0x47	; 71
    15f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15f4:	18 16       	cp	r1, r24
    15f6:	0c f0       	brlt	.+2      	; 0x15fa <LCD_displayCharacter+0x244>
    15f8:	43 c0       	rjmp	.+134    	; 0x1680 <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15fa:	fe 01       	movw	r30, r28
    15fc:	ef 5a       	subi	r30, 0xAF	; 175
    15fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1600:	60 81       	ld	r22, Z
    1602:	71 81       	ldd	r23, Z+1	; 0x01
    1604:	82 81       	ldd	r24, Z+2	; 0x02
    1606:	93 81       	ldd	r25, Z+3	; 0x03
    1608:	20 e0       	ldi	r18, 0x00	; 0
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	40 e2       	ldi	r20, 0x20	; 32
    160e:	51 e4       	ldi	r21, 0x41	; 65
    1610:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1614:	dc 01       	movw	r26, r24
    1616:	cb 01       	movw	r24, r22
    1618:	8e 01       	movw	r16, r28
    161a:	05 5b       	subi	r16, 0xB5	; 181
    161c:	1f 4f       	sbci	r17, 0xFF	; 255
    161e:	bc 01       	movw	r22, r24
    1620:	cd 01       	movw	r24, r26
    1622:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1626:	dc 01       	movw	r26, r24
    1628:	cb 01       	movw	r24, r22
    162a:	f8 01       	movw	r30, r16
    162c:	91 83       	std	Z+1, r25	; 0x01
    162e:	80 83       	st	Z, r24
    1630:	1f c0       	rjmp	.+62     	; 0x1670 <LCD_displayCharacter+0x2ba>
    1632:	fe 01       	movw	r30, r28
    1634:	e7 5b       	subi	r30, 0xB7	; 183
    1636:	ff 4f       	sbci	r31, 0xFF	; 255
    1638:	88 ec       	ldi	r24, 0xC8	; 200
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	91 83       	std	Z+1, r25	; 0x01
    163e:	80 83       	st	Z, r24
    1640:	fe 01       	movw	r30, r28
    1642:	e7 5b       	subi	r30, 0xB7	; 183
    1644:	ff 4f       	sbci	r31, 0xFF	; 255
    1646:	80 81       	ld	r24, Z
    1648:	91 81       	ldd	r25, Z+1	; 0x01
    164a:	01 97       	sbiw	r24, 0x01	; 1
    164c:	f1 f7       	brne	.-4      	; 0x164a <LCD_displayCharacter+0x294>
    164e:	fe 01       	movw	r30, r28
    1650:	e7 5b       	subi	r30, 0xB7	; 183
    1652:	ff 4f       	sbci	r31, 0xFF	; 255
    1654:	91 83       	std	Z+1, r25	; 0x01
    1656:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1658:	de 01       	movw	r26, r28
    165a:	a5 5b       	subi	r26, 0xB5	; 181
    165c:	bf 4f       	sbci	r27, 0xFF	; 255
    165e:	fe 01       	movw	r30, r28
    1660:	e5 5b       	subi	r30, 0xB5	; 181
    1662:	ff 4f       	sbci	r31, 0xFF	; 255
    1664:	80 81       	ld	r24, Z
    1666:	91 81       	ldd	r25, Z+1	; 0x01
    1668:	01 97       	sbiw	r24, 0x01	; 1
    166a:	11 96       	adiw	r26, 0x01	; 1
    166c:	9c 93       	st	X, r25
    166e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1670:	fe 01       	movw	r30, r28
    1672:	e5 5b       	subi	r30, 0xB5	; 181
    1674:	ff 4f       	sbci	r31, 0xFF	; 255
    1676:	80 81       	ld	r24, Z
    1678:	91 81       	ldd	r25, Z+1	; 0x01
    167a:	00 97       	sbiw	r24, 0x00	; 0
    167c:	d1 f6       	brne	.-76     	; 0x1632 <LCD_displayCharacter+0x27c>
    167e:	27 c0       	rjmp	.+78     	; 0x16ce <LCD_displayCharacter+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1680:	8e 01       	movw	r16, r28
    1682:	05 5b       	subi	r16, 0xB5	; 181
    1684:	1f 4f       	sbci	r17, 0xFF	; 255
    1686:	fe 01       	movw	r30, r28
    1688:	e3 5b       	subi	r30, 0xB3	; 179
    168a:	ff 4f       	sbci	r31, 0xFF	; 255
    168c:	60 81       	ld	r22, Z
    168e:	71 81       	ldd	r23, Z+1	; 0x01
    1690:	82 81       	ldd	r24, Z+2	; 0x02
    1692:	93 81       	ldd	r25, Z+3	; 0x03
    1694:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1698:	dc 01       	movw	r26, r24
    169a:	cb 01       	movw	r24, r22
    169c:	f8 01       	movw	r30, r16
    169e:	91 83       	std	Z+1, r25	; 0x01
    16a0:	80 83       	st	Z, r24
    16a2:	de 01       	movw	r26, r28
    16a4:	a9 5b       	subi	r26, 0xB9	; 185
    16a6:	bf 4f       	sbci	r27, 0xFF	; 255
    16a8:	fe 01       	movw	r30, r28
    16aa:	e5 5b       	subi	r30, 0xB5	; 181
    16ac:	ff 4f       	sbci	r31, 0xFF	; 255
    16ae:	80 81       	ld	r24, Z
    16b0:	91 81       	ldd	r25, Z+1	; 0x01
    16b2:	8d 93       	st	X+, r24
    16b4:	9c 93       	st	X, r25
    16b6:	fe 01       	movw	r30, r28
    16b8:	e9 5b       	subi	r30, 0xB9	; 185
    16ba:	ff 4f       	sbci	r31, 0xFF	; 255
    16bc:	80 81       	ld	r24, Z
    16be:	91 81       	ldd	r25, Z+1	; 0x01
    16c0:	01 97       	sbiw	r24, 0x01	; 1
    16c2:	f1 f7       	brne	.-4      	; 0x16c0 <LCD_displayCharacter+0x30a>
    16c4:	fe 01       	movw	r30, r28
    16c6:	e9 5b       	subi	r30, 0xB9	; 185
    16c8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ca:	91 83       	std	Z+1, r25	; 0x01
    16cc:	80 83       	st	Z, r24
#if (DATA_BITS_MODE == 4)

	#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((data & 0xF0) >> 4);
    16ce:	a2 e3       	ldi	r26, 0x32	; 50
    16d0:	b0 e0       	ldi	r27, 0x00	; 0
    16d2:	e2 e3       	ldi	r30, 0x32	; 50
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	98 2f       	mov	r25, r24
    16da:	90 7f       	andi	r25, 0xF0	; 240
    16dc:	fe 01       	movw	r30, r28
    16de:	ed 59       	subi	r30, 0x9D	; 157
    16e0:	ff 4f       	sbci	r31, 0xFF	; 255
    16e2:	80 81       	ld	r24, Z
    16e4:	82 95       	swap	r24
    16e6:	8f 70       	andi	r24, 0x0F	; 15
    16e8:	89 2b       	or	r24, r25
    16ea:	8c 93       	st	X, r24
    16ec:	fe 01       	movw	r30, r28
    16ee:	ed 5b       	subi	r30, 0xBD	; 189
    16f0:	ff 4f       	sbci	r31, 0xFF	; 255
    16f2:	80 e0       	ldi	r24, 0x00	; 0
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	a0 e8       	ldi	r26, 0x80	; 128
    16f8:	bf e3       	ldi	r27, 0x3F	; 63
    16fa:	80 83       	st	Z, r24
    16fc:	91 83       	std	Z+1, r25	; 0x01
    16fe:	a2 83       	std	Z+2, r26	; 0x02
    1700:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1702:	8e 01       	movw	r16, r28
    1704:	01 5c       	subi	r16, 0xC1	; 193
    1706:	1f 4f       	sbci	r17, 0xFF	; 255
    1708:	fe 01       	movw	r30, r28
    170a:	ed 5b       	subi	r30, 0xBD	; 189
    170c:	ff 4f       	sbci	r31, 0xFF	; 255
    170e:	60 81       	ld	r22, Z
    1710:	71 81       	ldd	r23, Z+1	; 0x01
    1712:	82 81       	ldd	r24, Z+2	; 0x02
    1714:	93 81       	ldd	r25, Z+3	; 0x03
    1716:	20 e0       	ldi	r18, 0x00	; 0
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	4a ef       	ldi	r20, 0xFA	; 250
    171c:	54 e4       	ldi	r21, 0x44	; 68
    171e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1722:	dc 01       	movw	r26, r24
    1724:	cb 01       	movw	r24, r22
    1726:	f8 01       	movw	r30, r16
    1728:	80 83       	st	Z, r24
    172a:	91 83       	std	Z+1, r25	; 0x01
    172c:	a2 83       	std	Z+2, r26	; 0x02
    172e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1730:	fe 01       	movw	r30, r28
    1732:	ff 96       	adiw	r30, 0x3f	; 63
    1734:	60 81       	ld	r22, Z
    1736:	71 81       	ldd	r23, Z+1	; 0x01
    1738:	82 81       	ldd	r24, Z+2	; 0x02
    173a:	93 81       	ldd	r25, Z+3	; 0x03
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	40 e8       	ldi	r20, 0x80	; 128
    1742:	5f e3       	ldi	r21, 0x3F	; 63
    1744:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1748:	88 23       	and	r24, r24
    174a:	2c f4       	brge	.+10     	; 0x1756 <LCD_displayCharacter+0x3a0>
		__ticks = 1;
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	9e af       	std	Y+62, r25	; 0x3e
    1752:	8d af       	std	Y+61, r24	; 0x3d
    1754:	46 c0       	rjmp	.+140    	; 0x17e2 <LCD_displayCharacter+0x42c>
	else if (__tmp > 65535)
    1756:	fe 01       	movw	r30, r28
    1758:	ff 96       	adiw	r30, 0x3f	; 63
    175a:	60 81       	ld	r22, Z
    175c:	71 81       	ldd	r23, Z+1	; 0x01
    175e:	82 81       	ldd	r24, Z+2	; 0x02
    1760:	93 81       	ldd	r25, Z+3	; 0x03
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	3f ef       	ldi	r19, 0xFF	; 255
    1766:	4f e7       	ldi	r20, 0x7F	; 127
    1768:	57 e4       	ldi	r21, 0x47	; 71
    176a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    176e:	18 16       	cp	r1, r24
    1770:	64 f5       	brge	.+88     	; 0x17ca <LCD_displayCharacter+0x414>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1772:	fe 01       	movw	r30, r28
    1774:	ed 5b       	subi	r30, 0xBD	; 189
    1776:	ff 4f       	sbci	r31, 0xFF	; 255
    1778:	60 81       	ld	r22, Z
    177a:	71 81       	ldd	r23, Z+1	; 0x01
    177c:	82 81       	ldd	r24, Z+2	; 0x02
    177e:	93 81       	ldd	r25, Z+3	; 0x03
    1780:	20 e0       	ldi	r18, 0x00	; 0
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	40 e2       	ldi	r20, 0x20	; 32
    1786:	51 e4       	ldi	r21, 0x41	; 65
    1788:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    178c:	dc 01       	movw	r26, r24
    178e:	cb 01       	movw	r24, r22
    1790:	bc 01       	movw	r22, r24
    1792:	cd 01       	movw	r24, r26
    1794:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1798:	dc 01       	movw	r26, r24
    179a:	cb 01       	movw	r24, r22
    179c:	9e af       	std	Y+62, r25	; 0x3e
    179e:	8d af       	std	Y+61, r24	; 0x3d
    17a0:	0f c0       	rjmp	.+30     	; 0x17c0 <LCD_displayCharacter+0x40a>
    17a2:	88 ec       	ldi	r24, 0xC8	; 200
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	9c af       	std	Y+60, r25	; 0x3c
    17a8:	8b af       	std	Y+59, r24	; 0x3b
    17aa:	8b ad       	ldd	r24, Y+59	; 0x3b
    17ac:	9c ad       	ldd	r25, Y+60	; 0x3c
    17ae:	01 97       	sbiw	r24, 0x01	; 1
    17b0:	f1 f7       	brne	.-4      	; 0x17ae <LCD_displayCharacter+0x3f8>
    17b2:	9c af       	std	Y+60, r25	; 0x3c
    17b4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17b6:	8d ad       	ldd	r24, Y+61	; 0x3d
    17b8:	9e ad       	ldd	r25, Y+62	; 0x3e
    17ba:	01 97       	sbiw	r24, 0x01	; 1
    17bc:	9e af       	std	Y+62, r25	; 0x3e
    17be:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17c0:	8d ad       	ldd	r24, Y+61	; 0x3d
    17c2:	9e ad       	ldd	r25, Y+62	; 0x3e
    17c4:	00 97       	sbiw	r24, 0x00	; 0
    17c6:	69 f7       	brne	.-38     	; 0x17a2 <LCD_displayCharacter+0x3ec>
    17c8:	16 c0       	rjmp	.+44     	; 0x17f6 <LCD_displayCharacter+0x440>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ca:	fe 01       	movw	r30, r28
    17cc:	ff 96       	adiw	r30, 0x3f	; 63
    17ce:	60 81       	ld	r22, Z
    17d0:	71 81       	ldd	r23, Z+1	; 0x01
    17d2:	82 81       	ldd	r24, Z+2	; 0x02
    17d4:	93 81       	ldd	r25, Z+3	; 0x03
    17d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17da:	dc 01       	movw	r26, r24
    17dc:	cb 01       	movw	r24, r22
    17de:	9e af       	std	Y+62, r25	; 0x3e
    17e0:	8d af       	std	Y+61, r24	; 0x3d
    17e2:	8d ad       	ldd	r24, Y+61	; 0x3d
    17e4:	9e ad       	ldd	r25, Y+62	; 0x3e
    17e6:	9a af       	std	Y+58, r25	; 0x3a
    17e8:	89 af       	std	Y+57, r24	; 0x39
    17ea:	89 ad       	ldd	r24, Y+57	; 0x39
    17ec:	9a ad       	ldd	r25, Y+58	; 0x3a
    17ee:	01 97       	sbiw	r24, 0x01	; 1
    17f0:	f1 f7       	brne	.-4      	; 0x17ee <LCD_displayCharacter+0x438>
    17f2:	9a af       	std	Y+58, r25	; 0x3a
    17f4:	89 af       	std	Y+57, r24	; 0x39
#endif

	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT,E);
    17f6:	a8 e3       	ldi	r26, 0x38	; 56
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	e8 e3       	ldi	r30, 0x38	; 56
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	87 7f       	andi	r24, 0xF7	; 247
    1802:	8c 93       	st	X, r24
    1804:	80 e0       	ldi	r24, 0x00	; 0
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	a0 e8       	ldi	r26, 0x80	; 128
    180a:	bf e3       	ldi	r27, 0x3F	; 63
    180c:	8d ab       	std	Y+53, r24	; 0x35
    180e:	9e ab       	std	Y+54, r25	; 0x36
    1810:	af ab       	std	Y+55, r26	; 0x37
    1812:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1814:	6d a9       	ldd	r22, Y+53	; 0x35
    1816:	7e a9       	ldd	r23, Y+54	; 0x36
    1818:	8f a9       	ldd	r24, Y+55	; 0x37
    181a:	98 ad       	ldd	r25, Y+56	; 0x38
    181c:	20 e0       	ldi	r18, 0x00	; 0
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	4a ef       	ldi	r20, 0xFA	; 250
    1822:	54 e4       	ldi	r21, 0x44	; 68
    1824:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1828:	dc 01       	movw	r26, r24
    182a:	cb 01       	movw	r24, r22
    182c:	89 ab       	std	Y+49, r24	; 0x31
    182e:	9a ab       	std	Y+50, r25	; 0x32
    1830:	ab ab       	std	Y+51, r26	; 0x33
    1832:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1834:	69 a9       	ldd	r22, Y+49	; 0x31
    1836:	7a a9       	ldd	r23, Y+50	; 0x32
    1838:	8b a9       	ldd	r24, Y+51	; 0x33
    183a:	9c a9       	ldd	r25, Y+52	; 0x34
    183c:	20 e0       	ldi	r18, 0x00	; 0
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	40 e8       	ldi	r20, 0x80	; 128
    1842:	5f e3       	ldi	r21, 0x3F	; 63
    1844:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1848:	88 23       	and	r24, r24
    184a:	2c f4       	brge	.+10     	; 0x1856 <LCD_displayCharacter+0x4a0>
		__ticks = 1;
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	98 ab       	std	Y+48, r25	; 0x30
    1852:	8f a7       	std	Y+47, r24	; 0x2f
    1854:	3f c0       	rjmp	.+126    	; 0x18d4 <LCD_displayCharacter+0x51e>
	else if (__tmp > 65535)
    1856:	69 a9       	ldd	r22, Y+49	; 0x31
    1858:	7a a9       	ldd	r23, Y+50	; 0x32
    185a:	8b a9       	ldd	r24, Y+51	; 0x33
    185c:	9c a9       	ldd	r25, Y+52	; 0x34
    185e:	20 e0       	ldi	r18, 0x00	; 0
    1860:	3f ef       	ldi	r19, 0xFF	; 255
    1862:	4f e7       	ldi	r20, 0x7F	; 127
    1864:	57 e4       	ldi	r21, 0x47	; 71
    1866:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    186a:	18 16       	cp	r1, r24
    186c:	4c f5       	brge	.+82     	; 0x18c0 <LCD_displayCharacter+0x50a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    186e:	6d a9       	ldd	r22, Y+53	; 0x35
    1870:	7e a9       	ldd	r23, Y+54	; 0x36
    1872:	8f a9       	ldd	r24, Y+55	; 0x37
    1874:	98 ad       	ldd	r25, Y+56	; 0x38
    1876:	20 e0       	ldi	r18, 0x00	; 0
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	40 e2       	ldi	r20, 0x20	; 32
    187c:	51 e4       	ldi	r21, 0x41	; 65
    187e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	bc 01       	movw	r22, r24
    1888:	cd 01       	movw	r24, r26
    188a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    188e:	dc 01       	movw	r26, r24
    1890:	cb 01       	movw	r24, r22
    1892:	98 ab       	std	Y+48, r25	; 0x30
    1894:	8f a7       	std	Y+47, r24	; 0x2f
    1896:	0f c0       	rjmp	.+30     	; 0x18b6 <LCD_displayCharacter+0x500>
    1898:	88 ec       	ldi	r24, 0xC8	; 200
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	9e a7       	std	Y+46, r25	; 0x2e
    189e:	8d a7       	std	Y+45, r24	; 0x2d
    18a0:	8d a5       	ldd	r24, Y+45	; 0x2d
    18a2:	9e a5       	ldd	r25, Y+46	; 0x2e
    18a4:	01 97       	sbiw	r24, 0x01	; 1
    18a6:	f1 f7       	brne	.-4      	; 0x18a4 <LCD_displayCharacter+0x4ee>
    18a8:	9e a7       	std	Y+46, r25	; 0x2e
    18aa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    18ae:	98 a9       	ldd	r25, Y+48	; 0x30
    18b0:	01 97       	sbiw	r24, 0x01	; 1
    18b2:	98 ab       	std	Y+48, r25	; 0x30
    18b4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    18b8:	98 a9       	ldd	r25, Y+48	; 0x30
    18ba:	00 97       	sbiw	r24, 0x00	; 0
    18bc:	69 f7       	brne	.-38     	; 0x1898 <LCD_displayCharacter+0x4e2>
    18be:	14 c0       	rjmp	.+40     	; 0x18e8 <LCD_displayCharacter+0x532>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18c0:	69 a9       	ldd	r22, Y+49	; 0x31
    18c2:	7a a9       	ldd	r23, Y+50	; 0x32
    18c4:	8b a9       	ldd	r24, Y+51	; 0x33
    18c6:	9c a9       	ldd	r25, Y+52	; 0x34
    18c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18cc:	dc 01       	movw	r26, r24
    18ce:	cb 01       	movw	r24, r22
    18d0:	98 ab       	std	Y+48, r25	; 0x30
    18d2:	8f a7       	std	Y+47, r24	; 0x2f
    18d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    18d6:	98 a9       	ldd	r25, Y+48	; 0x30
    18d8:	9c a7       	std	Y+44, r25	; 0x2c
    18da:	8b a7       	std	Y+43, r24	; 0x2b
    18dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    18de:	9c a5       	ldd	r25, Y+44	; 0x2c
    18e0:	01 97       	sbiw	r24, 0x01	; 1
    18e2:	f1 f7       	brne	.-4      	; 0x18e0 <LCD_displayCharacter+0x52a>
    18e4:	9c a7       	std	Y+44, r25	; 0x2c
    18e6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	SET_BIT(LCD_CTRL_PORT,E);
    18e8:	a8 e3       	ldi	r26, 0x38	; 56
    18ea:	b0 e0       	ldi	r27, 0x00	; 0
    18ec:	e8 e3       	ldi	r30, 0x38	; 56
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	80 81       	ld	r24, Z
    18f2:	88 60       	ori	r24, 0x08	; 8
    18f4:	8c 93       	st	X, r24
    18f6:	80 e0       	ldi	r24, 0x00	; 0
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	a0 e8       	ldi	r26, 0x80	; 128
    18fc:	bf e3       	ldi	r27, 0x3F	; 63
    18fe:	8f a3       	std	Y+39, r24	; 0x27
    1900:	98 a7       	std	Y+40, r25	; 0x28
    1902:	a9 a7       	std	Y+41, r26	; 0x29
    1904:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1906:	6f a1       	ldd	r22, Y+39	; 0x27
    1908:	78 a5       	ldd	r23, Y+40	; 0x28
    190a:	89 a5       	ldd	r24, Y+41	; 0x29
    190c:	9a a5       	ldd	r25, Y+42	; 0x2a
    190e:	20 e0       	ldi	r18, 0x00	; 0
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	4a ef       	ldi	r20, 0xFA	; 250
    1914:	54 e4       	ldi	r21, 0x44	; 68
    1916:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    191a:	dc 01       	movw	r26, r24
    191c:	cb 01       	movw	r24, r22
    191e:	8b a3       	std	Y+35, r24	; 0x23
    1920:	9c a3       	std	Y+36, r25	; 0x24
    1922:	ad a3       	std	Y+37, r26	; 0x25
    1924:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1926:	6b a1       	ldd	r22, Y+35	; 0x23
    1928:	7c a1       	ldd	r23, Y+36	; 0x24
    192a:	8d a1       	ldd	r24, Y+37	; 0x25
    192c:	9e a1       	ldd	r25, Y+38	; 0x26
    192e:	20 e0       	ldi	r18, 0x00	; 0
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	40 e8       	ldi	r20, 0x80	; 128
    1934:	5f e3       	ldi	r21, 0x3F	; 63
    1936:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    193a:	88 23       	and	r24, r24
    193c:	2c f4       	brge	.+10     	; 0x1948 <LCD_displayCharacter+0x592>
		__ticks = 1;
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	9a a3       	std	Y+34, r25	; 0x22
    1944:	89 a3       	std	Y+33, r24	; 0x21
    1946:	3f c0       	rjmp	.+126    	; 0x19c6 <LCD_displayCharacter+0x610>
	else if (__tmp > 65535)
    1948:	6b a1       	ldd	r22, Y+35	; 0x23
    194a:	7c a1       	ldd	r23, Y+36	; 0x24
    194c:	8d a1       	ldd	r24, Y+37	; 0x25
    194e:	9e a1       	ldd	r25, Y+38	; 0x26
    1950:	20 e0       	ldi	r18, 0x00	; 0
    1952:	3f ef       	ldi	r19, 0xFF	; 255
    1954:	4f e7       	ldi	r20, 0x7F	; 127
    1956:	57 e4       	ldi	r21, 0x47	; 71
    1958:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    195c:	18 16       	cp	r1, r24
    195e:	4c f5       	brge	.+82     	; 0x19b2 <LCD_displayCharacter+0x5fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1960:	6f a1       	ldd	r22, Y+39	; 0x27
    1962:	78 a5       	ldd	r23, Y+40	; 0x28
    1964:	89 a5       	ldd	r24, Y+41	; 0x29
    1966:	9a a5       	ldd	r25, Y+42	; 0x2a
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	40 e2       	ldi	r20, 0x20	; 32
    196e:	51 e4       	ldi	r21, 0x41	; 65
    1970:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1974:	dc 01       	movw	r26, r24
    1976:	cb 01       	movw	r24, r22
    1978:	bc 01       	movw	r22, r24
    197a:	cd 01       	movw	r24, r26
    197c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1980:	dc 01       	movw	r26, r24
    1982:	cb 01       	movw	r24, r22
    1984:	9a a3       	std	Y+34, r25	; 0x22
    1986:	89 a3       	std	Y+33, r24	; 0x21
    1988:	0f c0       	rjmp	.+30     	; 0x19a8 <LCD_displayCharacter+0x5f2>
    198a:	88 ec       	ldi	r24, 0xC8	; 200
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	98 a3       	std	Y+32, r25	; 0x20
    1990:	8f 8f       	std	Y+31, r24	; 0x1f
    1992:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1994:	98 a1       	ldd	r25, Y+32	; 0x20
    1996:	01 97       	sbiw	r24, 0x01	; 1
    1998:	f1 f7       	brne	.-4      	; 0x1996 <LCD_displayCharacter+0x5e0>
    199a:	98 a3       	std	Y+32, r25	; 0x20
    199c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    199e:	89 a1       	ldd	r24, Y+33	; 0x21
    19a0:	9a a1       	ldd	r25, Y+34	; 0x22
    19a2:	01 97       	sbiw	r24, 0x01	; 1
    19a4:	9a a3       	std	Y+34, r25	; 0x22
    19a6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a8:	89 a1       	ldd	r24, Y+33	; 0x21
    19aa:	9a a1       	ldd	r25, Y+34	; 0x22
    19ac:	00 97       	sbiw	r24, 0x00	; 0
    19ae:	69 f7       	brne	.-38     	; 0x198a <LCD_displayCharacter+0x5d4>
    19b0:	14 c0       	rjmp	.+40     	; 0x19da <LCD_displayCharacter+0x624>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b2:	6b a1       	ldd	r22, Y+35	; 0x23
    19b4:	7c a1       	ldd	r23, Y+36	; 0x24
    19b6:	8d a1       	ldd	r24, Y+37	; 0x25
    19b8:	9e a1       	ldd	r25, Y+38	; 0x26
    19ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19be:	dc 01       	movw	r26, r24
    19c0:	cb 01       	movw	r24, r22
    19c2:	9a a3       	std	Y+34, r25	; 0x22
    19c4:	89 a3       	std	Y+33, r24	; 0x21
    19c6:	89 a1       	ldd	r24, Y+33	; 0x21
    19c8:	9a a1       	ldd	r25, Y+34	; 0x22
    19ca:	9e 8f       	std	Y+30, r25	; 0x1e
    19cc:	8d 8f       	std	Y+29, r24	; 0x1d
    19ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19d0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19d2:	01 97       	sbiw	r24, 0x01	; 1
    19d4:	f1 f7       	brne	.-4      	; 0x19d2 <LCD_displayCharacter+0x61c>
    19d6:	9e 8f       	std	Y+30, r25	; 0x1e
    19d8:	8d 8f       	std	Y+29, r24	; 0x1d


	#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((data & 0x0F) << 4);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (data & 0x0F);
    19da:	a2 e3       	ldi	r26, 0x32	; 50
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	e2 e3       	ldi	r30, 0x32	; 50
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	98 2f       	mov	r25, r24
    19e6:	90 7f       	andi	r25, 0xF0	; 240
    19e8:	fe 01       	movw	r30, r28
    19ea:	ed 59       	subi	r30, 0x9D	; 157
    19ec:	ff 4f       	sbci	r31, 0xFF	; 255
    19ee:	80 81       	ld	r24, Z
    19f0:	8f 70       	andi	r24, 0x0F	; 15
    19f2:	89 2b       	or	r24, r25
    19f4:	8c 93       	st	X, r24
    19f6:	80 e0       	ldi	r24, 0x00	; 0
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	a0 e8       	ldi	r26, 0x80	; 128
    19fc:	bf e3       	ldi	r27, 0x3F	; 63
    19fe:	89 8f       	std	Y+25, r24	; 0x19
    1a00:	9a 8f       	std	Y+26, r25	; 0x1a
    1a02:	ab 8f       	std	Y+27, r26	; 0x1b
    1a04:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a06:	69 8d       	ldd	r22, Y+25	; 0x19
    1a08:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	4a ef       	ldi	r20, 0xFA	; 250
    1a14:	54 e4       	ldi	r21, 0x44	; 68
    1a16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	8d 8b       	std	Y+21, r24	; 0x15
    1a20:	9e 8b       	std	Y+22, r25	; 0x16
    1a22:	af 8b       	std	Y+23, r26	; 0x17
    1a24:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a26:	6d 89       	ldd	r22, Y+21	; 0x15
    1a28:	7e 89       	ldd	r23, Y+22	; 0x16
    1a2a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a2c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	40 e8       	ldi	r20, 0x80	; 128
    1a34:	5f e3       	ldi	r21, 0x3F	; 63
    1a36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a3a:	88 23       	and	r24, r24
    1a3c:	2c f4       	brge	.+10     	; 0x1a48 <LCD_displayCharacter+0x692>
		__ticks = 1;
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	9c 8b       	std	Y+20, r25	; 0x14
    1a44:	8b 8b       	std	Y+19, r24	; 0x13
    1a46:	3f c0       	rjmp	.+126    	; 0x1ac6 <LCD_displayCharacter+0x710>
	else if (__tmp > 65535)
    1a48:	6d 89       	ldd	r22, Y+21	; 0x15
    1a4a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a4c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a4e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a50:	20 e0       	ldi	r18, 0x00	; 0
    1a52:	3f ef       	ldi	r19, 0xFF	; 255
    1a54:	4f e7       	ldi	r20, 0x7F	; 127
    1a56:	57 e4       	ldi	r21, 0x47	; 71
    1a58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a5c:	18 16       	cp	r1, r24
    1a5e:	4c f5       	brge	.+82     	; 0x1ab2 <LCD_displayCharacter+0x6fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a60:	69 8d       	ldd	r22, Y+25	; 0x19
    1a62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	40 e2       	ldi	r20, 0x20	; 32
    1a6e:	51 e4       	ldi	r21, 0x41	; 65
    1a70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a74:	dc 01       	movw	r26, r24
    1a76:	cb 01       	movw	r24, r22
    1a78:	bc 01       	movw	r22, r24
    1a7a:	cd 01       	movw	r24, r26
    1a7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a80:	dc 01       	movw	r26, r24
    1a82:	cb 01       	movw	r24, r22
    1a84:	9c 8b       	std	Y+20, r25	; 0x14
    1a86:	8b 8b       	std	Y+19, r24	; 0x13
    1a88:	0f c0       	rjmp	.+30     	; 0x1aa8 <LCD_displayCharacter+0x6f2>
    1a8a:	88 ec       	ldi	r24, 0xC8	; 200
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	9a 8b       	std	Y+18, r25	; 0x12
    1a90:	89 8b       	std	Y+17, r24	; 0x11
    1a92:	89 89       	ldd	r24, Y+17	; 0x11
    1a94:	9a 89       	ldd	r25, Y+18	; 0x12
    1a96:	01 97       	sbiw	r24, 0x01	; 1
    1a98:	f1 f7       	brne	.-4      	; 0x1a96 <LCD_displayCharacter+0x6e0>
    1a9a:	9a 8b       	std	Y+18, r25	; 0x12
    1a9c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a9e:	8b 89       	ldd	r24, Y+19	; 0x13
    1aa0:	9c 89       	ldd	r25, Y+20	; 0x14
    1aa2:	01 97       	sbiw	r24, 0x01	; 1
    1aa4:	9c 8b       	std	Y+20, r25	; 0x14
    1aa6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aa8:	8b 89       	ldd	r24, Y+19	; 0x13
    1aaa:	9c 89       	ldd	r25, Y+20	; 0x14
    1aac:	00 97       	sbiw	r24, 0x00	; 0
    1aae:	69 f7       	brne	.-38     	; 0x1a8a <LCD_displayCharacter+0x6d4>
    1ab0:	14 c0       	rjmp	.+40     	; 0x1ada <LCD_displayCharacter+0x724>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ab2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ab4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ab6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ab8:	98 8d       	ldd	r25, Y+24	; 0x18
    1aba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1abe:	dc 01       	movw	r26, r24
    1ac0:	cb 01       	movw	r24, r22
    1ac2:	9c 8b       	std	Y+20, r25	; 0x14
    1ac4:	8b 8b       	std	Y+19, r24	; 0x13
    1ac6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ac8:	9c 89       	ldd	r25, Y+20	; 0x14
    1aca:	98 8b       	std	Y+16, r25	; 0x10
    1acc:	8f 87       	std	Y+15, r24	; 0x0f
    1ace:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ad0:	98 89       	ldd	r25, Y+16	; 0x10
    1ad2:	01 97       	sbiw	r24, 0x01	; 1
    1ad4:	f1 f7       	brne	.-4      	; 0x1ad2 <LCD_displayCharacter+0x71c>
    1ad6:	98 8b       	std	Y+16, r25	; 0x10
    1ad8:	8f 87       	std	Y+15, r24	; 0x0f
#endif

	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT,E);
    1ada:	a8 e3       	ldi	r26, 0x38	; 56
    1adc:	b0 e0       	ldi	r27, 0x00	; 0
    1ade:	e8 e3       	ldi	r30, 0x38	; 56
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	87 7f       	andi	r24, 0xF7	; 247
    1ae6:	8c 93       	st	X, r24
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	a0 e8       	ldi	r26, 0x80	; 128
    1aee:	bf e3       	ldi	r27, 0x3F	; 63
    1af0:	8b 87       	std	Y+11, r24	; 0x0b
    1af2:	9c 87       	std	Y+12, r25	; 0x0c
    1af4:	ad 87       	std	Y+13, r26	; 0x0d
    1af6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1af8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1afa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1afc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1afe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	4a ef       	ldi	r20, 0xFA	; 250
    1b06:	54 e4       	ldi	r21, 0x44	; 68
    1b08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22
    1b10:	8f 83       	std	Y+7, r24	; 0x07
    1b12:	98 87       	std	Y+8, r25	; 0x08
    1b14:	a9 87       	std	Y+9, r26	; 0x09
    1b16:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b18:	6f 81       	ldd	r22, Y+7	; 0x07
    1b1a:	78 85       	ldd	r23, Y+8	; 0x08
    1b1c:	89 85       	ldd	r24, Y+9	; 0x09
    1b1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	40 e8       	ldi	r20, 0x80	; 128
    1b26:	5f e3       	ldi	r21, 0x3F	; 63
    1b28:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b2c:	88 23       	and	r24, r24
    1b2e:	2c f4       	brge	.+10     	; 0x1b3a <LCD_displayCharacter+0x784>
		__ticks = 1;
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	9e 83       	std	Y+6, r25	; 0x06
    1b36:	8d 83       	std	Y+5, r24	; 0x05
    1b38:	3f c0       	rjmp	.+126    	; 0x1bb8 <LCD_displayCharacter+0x802>
	else if (__tmp > 65535)
    1b3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b3c:	78 85       	ldd	r23, Y+8	; 0x08
    1b3e:	89 85       	ldd	r24, Y+9	; 0x09
    1b40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b42:	20 e0       	ldi	r18, 0x00	; 0
    1b44:	3f ef       	ldi	r19, 0xFF	; 255
    1b46:	4f e7       	ldi	r20, 0x7F	; 127
    1b48:	57 e4       	ldi	r21, 0x47	; 71
    1b4a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b4e:	18 16       	cp	r1, r24
    1b50:	4c f5       	brge	.+82     	; 0x1ba4 <LCD_displayCharacter+0x7ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b52:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b54:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b56:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b58:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	40 e2       	ldi	r20, 0x20	; 32
    1b60:	51 e4       	ldi	r21, 0x41	; 65
    1b62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b66:	dc 01       	movw	r26, r24
    1b68:	cb 01       	movw	r24, r22
    1b6a:	bc 01       	movw	r22, r24
    1b6c:	cd 01       	movw	r24, r26
    1b6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b72:	dc 01       	movw	r26, r24
    1b74:	cb 01       	movw	r24, r22
    1b76:	9e 83       	std	Y+6, r25	; 0x06
    1b78:	8d 83       	std	Y+5, r24	; 0x05
    1b7a:	0f c0       	rjmp	.+30     	; 0x1b9a <LCD_displayCharacter+0x7e4>
    1b7c:	88 ec       	ldi	r24, 0xC8	; 200
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	9c 83       	std	Y+4, r25	; 0x04
    1b82:	8b 83       	std	Y+3, r24	; 0x03
    1b84:	8b 81       	ldd	r24, Y+3	; 0x03
    1b86:	9c 81       	ldd	r25, Y+4	; 0x04
    1b88:	01 97       	sbiw	r24, 0x01	; 1
    1b8a:	f1 f7       	brne	.-4      	; 0x1b88 <LCD_displayCharacter+0x7d2>
    1b8c:	9c 83       	std	Y+4, r25	; 0x04
    1b8e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b90:	8d 81       	ldd	r24, Y+5	; 0x05
    1b92:	9e 81       	ldd	r25, Y+6	; 0x06
    1b94:	01 97       	sbiw	r24, 0x01	; 1
    1b96:	9e 83       	std	Y+6, r25	; 0x06
    1b98:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b9e:	00 97       	sbiw	r24, 0x00	; 0
    1ba0:	69 f7       	brne	.-38     	; 0x1b7c <LCD_displayCharacter+0x7c6>
    1ba2:	14 c0       	rjmp	.+40     	; 0x1bcc <LCD_displayCharacter+0x816>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ba6:	78 85       	ldd	r23, Y+8	; 0x08
    1ba8:	89 85       	ldd	r24, Y+9	; 0x09
    1baa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	cb 01       	movw	r24, r22
    1bb4:	9e 83       	std	Y+6, r25	; 0x06
    1bb6:	8d 83       	std	Y+5, r24	; 0x05
    1bb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bba:	9e 81       	ldd	r25, Y+6	; 0x06
    1bbc:	9a 83       	std	Y+2, r25	; 0x02
    1bbe:	89 83       	std	Y+1, r24	; 0x01
    1bc0:	89 81       	ldd	r24, Y+1	; 0x01
    1bc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc4:	01 97       	sbiw	r24, 0x01	; 1
    1bc6:	f1 f7       	brne	.-4      	; 0x1bc4 <LCD_displayCharacter+0x80e>
    1bc8:	9a 83       	std	Y+2, r25	; 0x02
    1bca:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command;
	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT,E);
	_delay_ms(1);
#endif
}
    1bcc:	cd 59       	subi	r28, 0x9D	; 157
    1bce:	df 4f       	sbci	r29, 0xFF	; 255
    1bd0:	0f b6       	in	r0, 0x3f	; 63
    1bd2:	f8 94       	cli
    1bd4:	de bf       	out	0x3e, r29	; 62
    1bd6:	0f be       	out	0x3f, r0	; 63
    1bd8:	cd bf       	out	0x3d, r28	; 61
    1bda:	cf 91       	pop	r28
    1bdc:	df 91       	pop	r29
    1bde:	1f 91       	pop	r17
    1be0:	0f 91       	pop	r16
    1be2:	08 95       	ret

00001be4 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    1be4:	df 93       	push	r29
    1be6:	cf 93       	push	r28
    1be8:	00 d0       	rcall	.+0      	; 0x1bea <LCD_displayString+0x6>
    1bea:	0f 92       	push	r0
    1bec:	cd b7       	in	r28, 0x3d	; 61
    1bee:	de b7       	in	r29, 0x3e	; 62
    1bf0:	9b 83       	std	Y+3, r25	; 0x03
    1bf2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1bf4:	19 82       	std	Y+1, r1	; 0x01
    1bf6:	0e c0       	rjmp	.+28     	; 0x1c14 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1bf8:	89 81       	ldd	r24, Y+1	; 0x01
    1bfa:	28 2f       	mov	r18, r24
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1c00:	9b 81       	ldd	r25, Y+3	; 0x03
    1c02:	fc 01       	movw	r30, r24
    1c04:	e2 0f       	add	r30, r18
    1c06:	f3 1f       	adc	r31, r19
    1c08:	80 81       	ld	r24, Z
    1c0a:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_displayCharacter>
		i++;
    1c0e:	89 81       	ldd	r24, Y+1	; 0x01
    1c10:	8f 5f       	subi	r24, 0xFF	; 255
    1c12:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1c14:	89 81       	ldd	r24, Y+1	; 0x01
    1c16:	28 2f       	mov	r18, r24
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c1e:	fc 01       	movw	r30, r24
    1c20:	e2 0f       	add	r30, r18
    1c22:	f3 1f       	adc	r31, r19
    1c24:	80 81       	ld	r24, Z
    1c26:	88 23       	and	r24, r24
    1c28:	39 f7       	brne	.-50     	; 0x1bf8 <LCD_displayString+0x14>
		LCD_displayCharacter(Str[i]);
		i++;
	}


}
    1c2a:	0f 90       	pop	r0
    1c2c:	0f 90       	pop	r0
    1c2e:	0f 90       	pop	r0
    1c30:	cf 91       	pop	r28
    1c32:	df 91       	pop	r29
    1c34:	08 95       	ret

00001c36 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    1c36:	df 93       	push	r29
    1c38:	cf 93       	push	r28
    1c3a:	00 d0       	rcall	.+0      	; 0x1c3c <LCD_goToRowColumn+0x6>
    1c3c:	00 d0       	rcall	.+0      	; 0x1c3e <LCD_goToRowColumn+0x8>
    1c3e:	0f 92       	push	r0
    1c40:	cd b7       	in	r28, 0x3d	; 61
    1c42:	de b7       	in	r29, 0x3e	; 62
    1c44:	8a 83       	std	Y+2, r24	; 0x02
    1c46:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;


	switch(row)
    1c48:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4a:	28 2f       	mov	r18, r24
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	3d 83       	std	Y+5, r19	; 0x05
    1c50:	2c 83       	std	Y+4, r18	; 0x04
    1c52:	8c 81       	ldd	r24, Y+4	; 0x04
    1c54:	9d 81       	ldd	r25, Y+5	; 0x05
    1c56:	81 30       	cpi	r24, 0x01	; 1
    1c58:	91 05       	cpc	r25, r1
    1c5a:	c1 f0       	breq	.+48     	; 0x1c8c <LCD_goToRowColumn+0x56>
    1c5c:	2c 81       	ldd	r18, Y+4	; 0x04
    1c5e:	3d 81       	ldd	r19, Y+5	; 0x05
    1c60:	22 30       	cpi	r18, 0x02	; 2
    1c62:	31 05       	cpc	r19, r1
    1c64:	2c f4       	brge	.+10     	; 0x1c70 <LCD_goToRowColumn+0x3a>
    1c66:	8c 81       	ldd	r24, Y+4	; 0x04
    1c68:	9d 81       	ldd	r25, Y+5	; 0x05
    1c6a:	00 97       	sbiw	r24, 0x00	; 0
    1c6c:	61 f0       	breq	.+24     	; 0x1c86 <LCD_goToRowColumn+0x50>
    1c6e:	19 c0       	rjmp	.+50     	; 0x1ca2 <LCD_goToRowColumn+0x6c>
    1c70:	2c 81       	ldd	r18, Y+4	; 0x04
    1c72:	3d 81       	ldd	r19, Y+5	; 0x05
    1c74:	22 30       	cpi	r18, 0x02	; 2
    1c76:	31 05       	cpc	r19, r1
    1c78:	69 f0       	breq	.+26     	; 0x1c94 <LCD_goToRowColumn+0x5e>
    1c7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c7c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c7e:	83 30       	cpi	r24, 0x03	; 3
    1c80:	91 05       	cpc	r25, r1
    1c82:	61 f0       	breq	.+24     	; 0x1c9c <LCD_goToRowColumn+0x66>
    1c84:	0e c0       	rjmp	.+28     	; 0x1ca2 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    1c86:	8b 81       	ldd	r24, Y+3	; 0x03
    1c88:	89 83       	std	Y+1, r24	; 0x01
    1c8a:	0b c0       	rjmp	.+22     	; 0x1ca2 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    1c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8e:	80 5c       	subi	r24, 0xC0	; 192
    1c90:	89 83       	std	Y+1, r24	; 0x01
    1c92:	07 c0       	rjmp	.+14     	; 0x1ca2 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    1c94:	8b 81       	ldd	r24, Y+3	; 0x03
    1c96:	80 5f       	subi	r24, 0xF0	; 240
    1c98:	89 83       	std	Y+1, r24	; 0x01
    1c9a:	03 c0       	rjmp	.+6      	; 0x1ca2 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    1c9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9e:	80 5b       	subi	r24, 0xB0	; 176
    1ca0:	89 83       	std	Y+1, r24	; 0x01
				break;
	}



	LCD_sendCommand(Address | SET_CURSOR_LOCATION);
    1ca2:	89 81       	ldd	r24, Y+1	; 0x01
    1ca4:	80 68       	ori	r24, 0x80	; 128
    1ca6:	0e 94 c4 05 	call	0xb88	; 0xb88 <LCD_sendCommand>
}
    1caa:	0f 90       	pop	r0
    1cac:	0f 90       	pop	r0
    1cae:	0f 90       	pop	r0
    1cb0:	0f 90       	pop	r0
    1cb2:	0f 90       	pop	r0
    1cb4:	cf 91       	pop	r28
    1cb6:	df 91       	pop	r29
    1cb8:	08 95       	ret

00001cba <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1cba:	df 93       	push	r29
    1cbc:	cf 93       	push	r28
    1cbe:	00 d0       	rcall	.+0      	; 0x1cc0 <LCD_displayStringRowColumn+0x6>
    1cc0:	00 d0       	rcall	.+0      	; 0x1cc2 <LCD_displayStringRowColumn+0x8>
    1cc2:	cd b7       	in	r28, 0x3d	; 61
    1cc4:	de b7       	in	r29, 0x3e	; 62
    1cc6:	89 83       	std	Y+1, r24	; 0x01
    1cc8:	6a 83       	std	Y+2, r22	; 0x02
    1cca:	5c 83       	std	Y+4, r21	; 0x04
    1ccc:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col);
    1cce:	89 81       	ldd	r24, Y+1	; 0x01
    1cd0:	6a 81       	ldd	r22, Y+2	; 0x02
    1cd2:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <LCD_goToRowColumn>
	LCD_displayString(Str);
    1cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cda:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <LCD_displayString>
}
    1cde:	0f 90       	pop	r0
    1ce0:	0f 90       	pop	r0
    1ce2:	0f 90       	pop	r0
    1ce4:	0f 90       	pop	r0
    1ce6:	cf 91       	pop	r28
    1ce8:	df 91       	pop	r29
    1cea:	08 95       	ret

00001cec <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    1cec:	df 93       	push	r29
    1cee:	cf 93       	push	r28
    1cf0:	cd b7       	in	r28, 0x3d	; 61
    1cf2:	de b7       	in	r29, 0x3e	; 62
    1cf4:	62 97       	sbiw	r28, 0x12	; 18
    1cf6:	0f b6       	in	r0, 0x3f	; 63
    1cf8:	f8 94       	cli
    1cfa:	de bf       	out	0x3e, r29	; 62
    1cfc:	0f be       	out	0x3f, r0	; 63
    1cfe:	cd bf       	out	0x3d, r28	; 61
    1d00:	9a 8b       	std	Y+18, r25	; 0x12
    1d02:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16];
   itoa(data,buff,10);
    1d04:	89 89       	ldd	r24, Y+17	; 0x11
    1d06:	9a 89       	ldd	r25, Y+18	; 0x12
    1d08:	9e 01       	movw	r18, r28
    1d0a:	2f 5f       	subi	r18, 0xFF	; 255
    1d0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d0e:	b9 01       	movw	r22, r18
    1d10:	4a e0       	ldi	r20, 0x0A	; 10
    1d12:	50 e0       	ldi	r21, 0x00	; 0
    1d14:	0e 94 38 13 	call	0x2670	; 0x2670 <itoa>
   LCD_displayString(buff);
    1d18:	ce 01       	movw	r24, r28
    1d1a:	01 96       	adiw	r24, 0x01	; 1
    1d1c:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <LCD_displayString>
}
    1d20:	62 96       	adiw	r28, 0x12	; 18
    1d22:	0f b6       	in	r0, 0x3f	; 63
    1d24:	f8 94       	cli
    1d26:	de bf       	out	0x3e, r29	; 62
    1d28:	0f be       	out	0x3f, r0	; 63
    1d2a:	cd bf       	out	0x3d, r28	; 61
    1d2c:	cf 91       	pop	r28
    1d2e:	df 91       	pop	r29
    1d30:	08 95       	ret

00001d32 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    1d32:	df 93       	push	r29
    1d34:	cf 93       	push	r28
    1d36:	cd b7       	in	r28, 0x3d	; 61
    1d38:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND);
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	0e 94 c4 05 	call	0xb88	; 0xb88 <LCD_sendCommand>
}
    1d40:	cf 91       	pop	r28
    1d42:	df 91       	pop	r29
    1d44:	08 95       	ret

00001d46 <KeyPad_getPressedKey>:

static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number);
#endif


uint8 KeyPad_getPressedKey(void){
    1d46:	df 93       	push	r29
    1d48:	cf 93       	push	r28
    1d4a:	00 d0       	rcall	.+0      	; 0x1d4c <KeyPad_getPressedKey+0x6>
    1d4c:	cd b7       	in	r28, 0x3d	; 61
    1d4e:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++)
    1d50:	1a 82       	std	Y+2, r1	; 0x02
    1d52:	4c c0       	rjmp	.+152    	; 0x1dec <KeyPad_getPressedKey+0xa6>
		{

			KEYPAD_PORT_DIR = (0b00010000<<col);
    1d54:	ea e3       	ldi	r30, 0x3A	; 58
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5a:	28 2f       	mov	r18, r24
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	80 e1       	ldi	r24, 0x10	; 16
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	02 c0       	rjmp	.+4      	; 0x1d68 <KeyPad_getPressedKey+0x22>
    1d64:	88 0f       	add	r24, r24
    1d66:	99 1f       	adc	r25, r25
    1d68:	2a 95       	dec	r18
    1d6a:	e2 f7       	brpl	.-8      	; 0x1d64 <KeyPad_getPressedKey+0x1e>
    1d6c:	80 83       	st	Z, r24


			KEYPAD_PORT_OUT = (~(0b00010000<<col));
    1d6e:	eb e3       	ldi	r30, 0x3B	; 59
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	8a 81       	ldd	r24, Y+2	; 0x02
    1d74:	28 2f       	mov	r18, r24
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	80 e1       	ldi	r24, 0x10	; 16
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	02 2e       	mov	r0, r18
    1d7e:	02 c0       	rjmp	.+4      	; 0x1d84 <KeyPad_getPressedKey+0x3e>
    1d80:	88 0f       	add	r24, r24
    1d82:	99 1f       	adc	r25, r25
    1d84:	0a 94       	dec	r0
    1d86:	e2 f7       	brpl	.-8      	; 0x1d80 <KeyPad_getPressedKey+0x3a>
    1d88:	80 95       	com	r24
    1d8a:	80 83       	st	Z, r24
			for(row=0;row<N_row;row++)
    1d8c:	19 82       	std	Y+1, r1	; 0x01
    1d8e:	28 c0       	rjmp	.+80     	; 0x1de0 <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row))
    1d90:	e9 e3       	ldi	r30, 0x39	; 57
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	80 81       	ld	r24, Z
    1d96:	28 2f       	mov	r18, r24
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	89 81       	ldd	r24, Y+1	; 0x01
    1d9c:	88 2f       	mov	r24, r24
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	a9 01       	movw	r20, r18
    1da2:	02 c0       	rjmp	.+4      	; 0x1da8 <KeyPad_getPressedKey+0x62>
    1da4:	55 95       	asr	r21
    1da6:	47 95       	ror	r20
    1da8:	8a 95       	dec	r24
    1daa:	e2 f7       	brpl	.-8      	; 0x1da4 <KeyPad_getPressedKey+0x5e>
    1dac:	ca 01       	movw	r24, r20
    1dae:	81 70       	andi	r24, 0x01	; 1
    1db0:	90 70       	andi	r25, 0x00	; 0
    1db2:	00 97       	sbiw	r24, 0x00	; 0
    1db4:	91 f4       	brne	.+36     	; 0x1dda <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    1db6:	89 81       	ldd	r24, Y+1	; 0x01
    1db8:	88 2f       	mov	r24, r24
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	88 0f       	add	r24, r24
    1dbe:	99 1f       	adc	r25, r25
    1dc0:	88 0f       	add	r24, r24
    1dc2:	99 1f       	adc	r25, r25
    1dc4:	98 2f       	mov	r25, r24
    1dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc8:	89 0f       	add	r24, r25
    1dca:	8f 5f       	subi	r24, 0xFF	; 255
    1dcc:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <KeyPad_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}
}
    1dd0:	0f 90       	pop	r0
    1dd2:	0f 90       	pop	r0
    1dd4:	cf 91       	pop	r28
    1dd6:	df 91       	pop	r29
    1dd8:	08 95       	ret

			KEYPAD_PORT_DIR = (0b00010000<<col);


			KEYPAD_PORT_OUT = (~(0b00010000<<col));
			for(row=0;row<N_row;row++)
    1dda:	89 81       	ldd	r24, Y+1	; 0x01
    1ddc:	8f 5f       	subi	r24, 0xFF	; 255
    1dde:	89 83       	std	Y+1, r24	; 0x01
    1de0:	89 81       	ldd	r24, Y+1	; 0x01
    1de2:	84 30       	cpi	r24, 0x04	; 4
    1de4:	a8 f2       	brcs	.-86     	; 0x1d90 <KeyPad_getPressedKey+0x4a>

uint8 KeyPad_getPressedKey(void){
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++)
    1de6:	8a 81       	ldd	r24, Y+2	; 0x02
    1de8:	8f 5f       	subi	r24, 0xFF	; 255
    1dea:	8a 83       	std	Y+2, r24	; 0x02
    1dec:	8a 81       	ldd	r24, Y+2	; 0x02
    1dee:	84 30       	cpi	r24, 0x04	; 4
    1df0:	08 f4       	brcc	.+2      	; 0x1df4 <KeyPad_getPressedKey+0xae>
    1df2:	b0 cf       	rjmp	.-160    	; 0x1d54 <KeyPad_getPressedKey+0xe>
    1df4:	ad cf       	rjmp	.-166    	; 0x1d50 <KeyPad_getPressedKey+0xa>

00001df6 <KeyPad_4x4_adjustKeyNumber>:
}

#elif (N_col == 4)

static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    1df6:	df 93       	push	r29
    1df8:	cf 93       	push	r28
    1dfa:	00 d0       	rcall	.+0      	; 0x1dfc <KeyPad_4x4_adjustKeyNumber+0x6>
    1dfc:	00 d0       	rcall	.+0      	; 0x1dfe <KeyPad_4x4_adjustKeyNumber+0x8>
    1dfe:	cd b7       	in	r28, 0x3d	; 61
    1e00:	de b7       	in	r29, 0x3e	; 62
    1e02:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    1e04:	89 81       	ldd	r24, Y+1	; 0x01
    1e06:	28 2f       	mov	r18, r24
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	3c 83       	std	Y+4, r19	; 0x04
    1e0c:	2b 83       	std	Y+3, r18	; 0x03
    1e0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e10:	9c 81       	ldd	r25, Y+4	; 0x04
    1e12:	88 30       	cpi	r24, 0x08	; 8
    1e14:	91 05       	cpc	r25, r1
    1e16:	09 f4       	brne	.+2      	; 0x1e1a <KeyPad_4x4_adjustKeyNumber+0x24>
    1e18:	70 c0       	rjmp	.+224    	; 0x1efa <KeyPad_4x4_adjustKeyNumber+0x104>
    1e1a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e1c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e1e:	29 30       	cpi	r18, 0x09	; 9
    1e20:	31 05       	cpc	r19, r1
    1e22:	5c f5       	brge	.+86     	; 0x1e7a <KeyPad_4x4_adjustKeyNumber+0x84>
    1e24:	8b 81       	ldd	r24, Y+3	; 0x03
    1e26:	9c 81       	ldd	r25, Y+4	; 0x04
    1e28:	84 30       	cpi	r24, 0x04	; 4
    1e2a:	91 05       	cpc	r25, r1
    1e2c:	09 f4       	brne	.+2      	; 0x1e30 <KeyPad_4x4_adjustKeyNumber+0x3a>
    1e2e:	59 c0       	rjmp	.+178    	; 0x1ee2 <KeyPad_4x4_adjustKeyNumber+0xec>
    1e30:	2b 81       	ldd	r18, Y+3	; 0x03
    1e32:	3c 81       	ldd	r19, Y+4	; 0x04
    1e34:	25 30       	cpi	r18, 0x05	; 5
    1e36:	31 05       	cpc	r19, r1
    1e38:	9c f4       	brge	.+38     	; 0x1e60 <KeyPad_4x4_adjustKeyNumber+0x6a>
    1e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e3e:	82 30       	cpi	r24, 0x02	; 2
    1e40:	91 05       	cpc	r25, r1
    1e42:	09 f4       	brne	.+2      	; 0x1e46 <KeyPad_4x4_adjustKeyNumber+0x50>
    1e44:	48 c0       	rjmp	.+144    	; 0x1ed6 <KeyPad_4x4_adjustKeyNumber+0xe0>
    1e46:	2b 81       	ldd	r18, Y+3	; 0x03
    1e48:	3c 81       	ldd	r19, Y+4	; 0x04
    1e4a:	23 30       	cpi	r18, 0x03	; 3
    1e4c:	31 05       	cpc	r19, r1
    1e4e:	0c f0       	brlt	.+2      	; 0x1e52 <KeyPad_4x4_adjustKeyNumber+0x5c>
    1e50:	45 c0       	rjmp	.+138    	; 0x1edc <KeyPad_4x4_adjustKeyNumber+0xe6>
    1e52:	8b 81       	ldd	r24, Y+3	; 0x03
    1e54:	9c 81       	ldd	r25, Y+4	; 0x04
    1e56:	81 30       	cpi	r24, 0x01	; 1
    1e58:	91 05       	cpc	r25, r1
    1e5a:	09 f4       	brne	.+2      	; 0x1e5e <KeyPad_4x4_adjustKeyNumber+0x68>
    1e5c:	39 c0       	rjmp	.+114    	; 0x1ed0 <KeyPad_4x4_adjustKeyNumber+0xda>
    1e5e:	67 c0       	rjmp	.+206    	; 0x1f2e <KeyPad_4x4_adjustKeyNumber+0x138>
    1e60:	2b 81       	ldd	r18, Y+3	; 0x03
    1e62:	3c 81       	ldd	r19, Y+4	; 0x04
    1e64:	26 30       	cpi	r18, 0x06	; 6
    1e66:	31 05       	cpc	r19, r1
    1e68:	09 f4       	brne	.+2      	; 0x1e6c <KeyPad_4x4_adjustKeyNumber+0x76>
    1e6a:	41 c0       	rjmp	.+130    	; 0x1eee <KeyPad_4x4_adjustKeyNumber+0xf8>
    1e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e70:	87 30       	cpi	r24, 0x07	; 7
    1e72:	91 05       	cpc	r25, r1
    1e74:	0c f0       	brlt	.+2      	; 0x1e78 <KeyPad_4x4_adjustKeyNumber+0x82>
    1e76:	3e c0       	rjmp	.+124    	; 0x1ef4 <KeyPad_4x4_adjustKeyNumber+0xfe>
    1e78:	37 c0       	rjmp	.+110    	; 0x1ee8 <KeyPad_4x4_adjustKeyNumber+0xf2>
    1e7a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e7c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e7e:	2c 30       	cpi	r18, 0x0C	; 12
    1e80:	31 05       	cpc	r19, r1
    1e82:	09 f4       	brne	.+2      	; 0x1e86 <KeyPad_4x4_adjustKeyNumber+0x90>
    1e84:	46 c0       	rjmp	.+140    	; 0x1f12 <KeyPad_4x4_adjustKeyNumber+0x11c>
    1e86:	8b 81       	ldd	r24, Y+3	; 0x03
    1e88:	9c 81       	ldd	r25, Y+4	; 0x04
    1e8a:	8d 30       	cpi	r24, 0x0D	; 13
    1e8c:	91 05       	cpc	r25, r1
    1e8e:	5c f4       	brge	.+22     	; 0x1ea6 <KeyPad_4x4_adjustKeyNumber+0xb0>
    1e90:	2b 81       	ldd	r18, Y+3	; 0x03
    1e92:	3c 81       	ldd	r19, Y+4	; 0x04
    1e94:	2a 30       	cpi	r18, 0x0A	; 10
    1e96:	31 05       	cpc	r19, r1
    1e98:	b1 f1       	breq	.+108    	; 0x1f06 <KeyPad_4x4_adjustKeyNumber+0x110>
    1e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e9e:	8b 30       	cpi	r24, 0x0B	; 11
    1ea0:	91 05       	cpc	r25, r1
    1ea2:	a4 f5       	brge	.+104    	; 0x1f0c <KeyPad_4x4_adjustKeyNumber+0x116>
    1ea4:	2d c0       	rjmp	.+90     	; 0x1f00 <KeyPad_4x4_adjustKeyNumber+0x10a>
    1ea6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ea8:	3c 81       	ldd	r19, Y+4	; 0x04
    1eaa:	2e 30       	cpi	r18, 0x0E	; 14
    1eac:	31 05       	cpc	r19, r1
    1eae:	b9 f1       	breq	.+110    	; 0x1f1e <KeyPad_4x4_adjustKeyNumber+0x128>
    1eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb4:	8e 30       	cpi	r24, 0x0E	; 14
    1eb6:	91 05       	cpc	r25, r1
    1eb8:	7c f1       	brlt	.+94     	; 0x1f18 <KeyPad_4x4_adjustKeyNumber+0x122>
    1eba:	2b 81       	ldd	r18, Y+3	; 0x03
    1ebc:	3c 81       	ldd	r19, Y+4	; 0x04
    1ebe:	2f 30       	cpi	r18, 0x0F	; 15
    1ec0:	31 05       	cpc	r19, r1
    1ec2:	79 f1       	breq	.+94     	; 0x1f22 <KeyPad_4x4_adjustKeyNumber+0x12c>
    1ec4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec8:	80 31       	cpi	r24, 0x10	; 16
    1eca:	91 05       	cpc	r25, r1
    1ecc:	69 f1       	breq	.+90     	; 0x1f28 <KeyPad_4x4_adjustKeyNumber+0x132>
    1ece:	2f c0       	rjmp	.+94     	; 0x1f2e <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7;
    1ed0:	97 e0       	ldi	r25, 0x07	; 7
    1ed2:	9a 83       	std	Y+2, r25	; 0x02
    1ed4:	2e c0       	rjmp	.+92     	; 0x1f32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8;
    1ed6:	28 e0       	ldi	r18, 0x08	; 8
    1ed8:	2a 83       	std	Y+2, r18	; 0x02
    1eda:	2b c0       	rjmp	.+86     	; 0x1f32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9;
    1edc:	39 e0       	ldi	r19, 0x09	; 9
    1ede:	3a 83       	std	Y+2, r19	; 0x02
    1ee0:	28 c0       	rjmp	.+80     	; 0x1f32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '/';
    1ee2:	8f e2       	ldi	r24, 0x2F	; 47
    1ee4:	8a 83       	std	Y+2, r24	; 0x02
    1ee6:	25 c0       	rjmp	.+74     	; 0x1f32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4;
    1ee8:	94 e0       	ldi	r25, 0x04	; 4
    1eea:	9a 83       	std	Y+2, r25	; 0x02
    1eec:	22 c0       	rjmp	.+68     	; 0x1f32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
    1eee:	25 e0       	ldi	r18, 0x05	; 5
    1ef0:	2a 83       	std	Y+2, r18	; 0x02
    1ef2:	1f c0       	rjmp	.+62     	; 0x1f32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6;
    1ef4:	36 e0       	ldi	r19, 0x06	; 6
    1ef6:	3a 83       	std	Y+2, r19	; 0x02
    1ef8:	1c c0       	rjmp	.+56     	; 0x1f32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*';
    1efa:	8a e2       	ldi	r24, 0x2A	; 42
    1efc:	8a 83       	std	Y+2, r24	; 0x02
    1efe:	19 c0       	rjmp	.+50     	; 0x1f32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 9: return 1;
    1f00:	91 e0       	ldi	r25, 0x01	; 1
    1f02:	9a 83       	std	Y+2, r25	; 0x02
    1f04:	16 c0       	rjmp	.+44     	; 0x1f32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2;
    1f06:	22 e0       	ldi	r18, 0x02	; 2
    1f08:	2a 83       	std	Y+2, r18	; 0x02
    1f0a:	13 c0       	rjmp	.+38     	; 0x1f32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3;
    1f0c:	33 e0       	ldi	r19, 0x03	; 3
    1f0e:	3a 83       	std	Y+2, r19	; 0x02
    1f10:	10 c0       	rjmp	.+32     	; 0x1f32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-';
    1f12:	8d e2       	ldi	r24, 0x2D	; 45
    1f14:	8a 83       	std	Y+2, r24	; 0x02
    1f16:	0d c0       	rjmp	.+26     	; 0x1f32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;
    1f18:	9d e0       	ldi	r25, 0x0D	; 13
    1f1a:	9a 83       	std	Y+2, r25	; 0x02
    1f1c:	0a c0       	rjmp	.+20     	; 0x1f32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 14: return 0;
    1f1e:	1a 82       	std	Y+2, r1	; 0x02
    1f20:	08 c0       	rjmp	.+16     	; 0x1f32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '=';
    1f22:	2d e3       	ldi	r18, 0x3D	; 61
    1f24:	2a 83       	std	Y+2, r18	; 0x02
    1f26:	05 c0       	rjmp	.+10     	; 0x1f32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+';
    1f28:	3b e2       	ldi	r19, 0x2B	; 43
    1f2a:	3a 83       	std	Y+2, r19	; 0x02
    1f2c:	02 c0       	rjmp	.+4      	; 0x1f32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;

		default: return button_number;
    1f2e:	89 81       	ldd	r24, Y+1	; 0x01
    1f30:	8a 83       	std	Y+2, r24	; 0x02
    1f32:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    1f34:	0f 90       	pop	r0
    1f36:	0f 90       	pop	r0
    1f38:	0f 90       	pop	r0
    1f3a:	0f 90       	pop	r0
    1f3c:	cf 91       	pop	r28
    1f3e:	df 91       	pop	r29
    1f40:	08 95       	ret

00001f42 <main>:
uint8 op;
uint8 key;
uint16 result = 0;

int main(void)
{
    1f42:	0f 93       	push	r16
    1f44:	1f 93       	push	r17
    1f46:	df 93       	push	r29
    1f48:	cf 93       	push	r28
    1f4a:	cd b7       	in	r28, 0x3d	; 61
    1f4c:	de b7       	in	r29, 0x3e	; 62
    1f4e:	c8 54       	subi	r28, 0x48	; 72
    1f50:	d0 40       	sbci	r29, 0x00	; 0
    1f52:	0f b6       	in	r0, 0x3f	; 63
    1f54:	f8 94       	cli
    1f56:	de bf       	out	0x3e, r29	; 62
    1f58:	0f be       	out	0x3f, r0	; 63
    1f5a:	cd bf       	out	0x3d, r28	; 61
	LCD_init();
    1f5c:	0e 94 a3 05 	call	0xb46	; 0xb46 <LCD_init>

	while(1)
	{
		key = KeyPad_getPressedKey();
    1f60:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <KeyPad_getPressedKey>
    1f64:	80 93 6f 00 	sts	0x006F, r24
    1f68:	a7 c0       	rjmp	.+334    	; 0x20b8 <main+0x176>
		while((key >= 0) && (key <= 9))
		{
			LCD_intgerToString(key);
    1f6a:	80 91 6f 00 	lds	r24, 0x006F
    1f6e:	88 2f       	mov	r24, r24
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	0e 94 76 0e 	call	0x1cec	; 0x1cec <LCD_intgerToString>
			firstNum = key + firstNum * 10;
    1f76:	80 91 6f 00 	lds	r24, 0x006F
    1f7a:	48 2f       	mov	r20, r24
    1f7c:	50 e0       	ldi	r21, 0x00	; 0
    1f7e:	80 91 68 00 	lds	r24, 0x0068
    1f82:	90 91 69 00 	lds	r25, 0x0069
    1f86:	9c 01       	movw	r18, r24
    1f88:	22 0f       	add	r18, r18
    1f8a:	33 1f       	adc	r19, r19
    1f8c:	c9 01       	movw	r24, r18
    1f8e:	88 0f       	add	r24, r24
    1f90:	99 1f       	adc	r25, r25
    1f92:	88 0f       	add	r24, r24
    1f94:	99 1f       	adc	r25, r25
    1f96:	82 0f       	add	r24, r18
    1f98:	93 1f       	adc	r25, r19
    1f9a:	84 0f       	add	r24, r20
    1f9c:	95 1f       	adc	r25, r21
    1f9e:	90 93 69 00 	sts	0x0069, r25
    1fa2:	80 93 68 00 	sts	0x0068, r24
    1fa6:	fe 01       	movw	r30, r28
    1fa8:	ed 5b       	subi	r30, 0xBD	; 189
    1faa:	ff 4f       	sbci	r31, 0xFF	; 255
    1fac:	80 e0       	ldi	r24, 0x00	; 0
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	a8 e4       	ldi	r26, 0x48	; 72
    1fb2:	b2 e4       	ldi	r27, 0x42	; 66
    1fb4:	80 83       	st	Z, r24
    1fb6:	91 83       	std	Z+1, r25	; 0x01
    1fb8:	a2 83       	std	Z+2, r26	; 0x02
    1fba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fbc:	8e 01       	movw	r16, r28
    1fbe:	01 5c       	subi	r16, 0xC1	; 193
    1fc0:	1f 4f       	sbci	r17, 0xFF	; 255
    1fc2:	fe 01       	movw	r30, r28
    1fc4:	ed 5b       	subi	r30, 0xBD	; 189
    1fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc8:	60 81       	ld	r22, Z
    1fca:	71 81       	ldd	r23, Z+1	; 0x01
    1fcc:	82 81       	ldd	r24, Z+2	; 0x02
    1fce:	93 81       	ldd	r25, Z+3	; 0x03
    1fd0:	20 e0       	ldi	r18, 0x00	; 0
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	4a ef       	ldi	r20, 0xFA	; 250
    1fd6:	54 e4       	ldi	r21, 0x44	; 68
    1fd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fdc:	dc 01       	movw	r26, r24
    1fde:	cb 01       	movw	r24, r22
    1fe0:	f8 01       	movw	r30, r16
    1fe2:	80 83       	st	Z, r24
    1fe4:	91 83       	std	Z+1, r25	; 0x01
    1fe6:	a2 83       	std	Z+2, r26	; 0x02
    1fe8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fea:	fe 01       	movw	r30, r28
    1fec:	ff 96       	adiw	r30, 0x3f	; 63
    1fee:	60 81       	ld	r22, Z
    1ff0:	71 81       	ldd	r23, Z+1	; 0x01
    1ff2:	82 81       	ldd	r24, Z+2	; 0x02
    1ff4:	93 81       	ldd	r25, Z+3	; 0x03
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	40 e8       	ldi	r20, 0x80	; 128
    1ffc:	5f e3       	ldi	r21, 0x3F	; 63
    1ffe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2002:	88 23       	and	r24, r24
    2004:	2c f4       	brge	.+10     	; 0x2010 <main+0xce>
		__ticks = 1;
    2006:	81 e0       	ldi	r24, 0x01	; 1
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	9e af       	std	Y+62, r25	; 0x3e
    200c:	8d af       	std	Y+61, r24	; 0x3d
    200e:	46 c0       	rjmp	.+140    	; 0x209c <main+0x15a>
	else if (__tmp > 65535)
    2010:	fe 01       	movw	r30, r28
    2012:	ff 96       	adiw	r30, 0x3f	; 63
    2014:	60 81       	ld	r22, Z
    2016:	71 81       	ldd	r23, Z+1	; 0x01
    2018:	82 81       	ldd	r24, Z+2	; 0x02
    201a:	93 81       	ldd	r25, Z+3	; 0x03
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	3f ef       	ldi	r19, 0xFF	; 255
    2020:	4f e7       	ldi	r20, 0x7F	; 127
    2022:	57 e4       	ldi	r21, 0x47	; 71
    2024:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2028:	18 16       	cp	r1, r24
    202a:	64 f5       	brge	.+88     	; 0x2084 <main+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    202c:	fe 01       	movw	r30, r28
    202e:	ed 5b       	subi	r30, 0xBD	; 189
    2030:	ff 4f       	sbci	r31, 0xFF	; 255
    2032:	60 81       	ld	r22, Z
    2034:	71 81       	ldd	r23, Z+1	; 0x01
    2036:	82 81       	ldd	r24, Z+2	; 0x02
    2038:	93 81       	ldd	r25, Z+3	; 0x03
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	40 e2       	ldi	r20, 0x20	; 32
    2040:	51 e4       	ldi	r21, 0x41	; 65
    2042:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2046:	dc 01       	movw	r26, r24
    2048:	cb 01       	movw	r24, r22
    204a:	bc 01       	movw	r22, r24
    204c:	cd 01       	movw	r24, r26
    204e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2052:	dc 01       	movw	r26, r24
    2054:	cb 01       	movw	r24, r22
    2056:	9e af       	std	Y+62, r25	; 0x3e
    2058:	8d af       	std	Y+61, r24	; 0x3d
    205a:	0f c0       	rjmp	.+30     	; 0x207a <main+0x138>
    205c:	88 ec       	ldi	r24, 0xC8	; 200
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	9c af       	std	Y+60, r25	; 0x3c
    2062:	8b af       	std	Y+59, r24	; 0x3b
    2064:	8b ad       	ldd	r24, Y+59	; 0x3b
    2066:	9c ad       	ldd	r25, Y+60	; 0x3c
    2068:	01 97       	sbiw	r24, 0x01	; 1
    206a:	f1 f7       	brne	.-4      	; 0x2068 <main+0x126>
    206c:	9c af       	std	Y+60, r25	; 0x3c
    206e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2070:	8d ad       	ldd	r24, Y+61	; 0x3d
    2072:	9e ad       	ldd	r25, Y+62	; 0x3e
    2074:	01 97       	sbiw	r24, 0x01	; 1
    2076:	9e af       	std	Y+62, r25	; 0x3e
    2078:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    207a:	8d ad       	ldd	r24, Y+61	; 0x3d
    207c:	9e ad       	ldd	r25, Y+62	; 0x3e
    207e:	00 97       	sbiw	r24, 0x00	; 0
    2080:	69 f7       	brne	.-38     	; 0x205c <main+0x11a>
    2082:	16 c0       	rjmp	.+44     	; 0x20b0 <main+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2084:	fe 01       	movw	r30, r28
    2086:	ff 96       	adiw	r30, 0x3f	; 63
    2088:	60 81       	ld	r22, Z
    208a:	71 81       	ldd	r23, Z+1	; 0x01
    208c:	82 81       	ldd	r24, Z+2	; 0x02
    208e:	93 81       	ldd	r25, Z+3	; 0x03
    2090:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2094:	dc 01       	movw	r26, r24
    2096:	cb 01       	movw	r24, r22
    2098:	9e af       	std	Y+62, r25	; 0x3e
    209a:	8d af       	std	Y+61, r24	; 0x3d
    209c:	8d ad       	ldd	r24, Y+61	; 0x3d
    209e:	9e ad       	ldd	r25, Y+62	; 0x3e
    20a0:	9a af       	std	Y+58, r25	; 0x3a
    20a2:	89 af       	std	Y+57, r24	; 0x39
    20a4:	89 ad       	ldd	r24, Y+57	; 0x39
    20a6:	9a ad       	ldd	r25, Y+58	; 0x3a
    20a8:	01 97       	sbiw	r24, 0x01	; 1
    20aa:	f1 f7       	brne	.-4      	; 0x20a8 <main+0x166>
    20ac:	9a af       	std	Y+58, r25	; 0x3a
    20ae:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(50);
			key = KeyPad_getPressedKey();
    20b0:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <KeyPad_getPressedKey>
    20b4:	80 93 6f 00 	sts	0x006F, r24
	LCD_init();

	while(1)
	{
		key = KeyPad_getPressedKey();
		while((key >= 0) && (key <= 9))
    20b8:	80 91 6f 00 	lds	r24, 0x006F
    20bc:	8a 30       	cpi	r24, 0x0A	; 10
    20be:	08 f4       	brcc	.+2      	; 0x20c2 <main+0x180>
    20c0:	54 cf       	rjmp	.-344    	; 0x1f6a <main+0x28>
			LCD_intgerToString(key);
			firstNum = key + firstNum * 10;
			_delay_ms(50);
			key = KeyPad_getPressedKey();
		}
		LCD_displayCharacter(key);
    20c2:	80 91 6f 00 	lds	r24, 0x006F
    20c6:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_displayCharacter>
		op = key;
    20ca:	80 91 6f 00 	lds	r24, 0x006F
    20ce:	80 93 6e 00 	sts	0x006E, r24
    20d2:	80 e0       	ldi	r24, 0x00	; 0
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	a8 e4       	ldi	r26, 0x48	; 72
    20d8:	b2 e4       	ldi	r27, 0x42	; 66
    20da:	8d ab       	std	Y+53, r24	; 0x35
    20dc:	9e ab       	std	Y+54, r25	; 0x36
    20de:	af ab       	std	Y+55, r26	; 0x37
    20e0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20e2:	6d a9       	ldd	r22, Y+53	; 0x35
    20e4:	7e a9       	ldd	r23, Y+54	; 0x36
    20e6:	8f a9       	ldd	r24, Y+55	; 0x37
    20e8:	98 ad       	ldd	r25, Y+56	; 0x38
    20ea:	20 e0       	ldi	r18, 0x00	; 0
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	4a ef       	ldi	r20, 0xFA	; 250
    20f0:	54 e4       	ldi	r21, 0x44	; 68
    20f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f6:	dc 01       	movw	r26, r24
    20f8:	cb 01       	movw	r24, r22
    20fa:	89 ab       	std	Y+49, r24	; 0x31
    20fc:	9a ab       	std	Y+50, r25	; 0x32
    20fe:	ab ab       	std	Y+51, r26	; 0x33
    2100:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2102:	69 a9       	ldd	r22, Y+49	; 0x31
    2104:	7a a9       	ldd	r23, Y+50	; 0x32
    2106:	8b a9       	ldd	r24, Y+51	; 0x33
    2108:	9c a9       	ldd	r25, Y+52	; 0x34
    210a:	20 e0       	ldi	r18, 0x00	; 0
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	40 e8       	ldi	r20, 0x80	; 128
    2110:	5f e3       	ldi	r21, 0x3F	; 63
    2112:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2116:	88 23       	and	r24, r24
    2118:	2c f4       	brge	.+10     	; 0x2124 <main+0x1e2>
		__ticks = 1;
    211a:	81 e0       	ldi	r24, 0x01	; 1
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	98 ab       	std	Y+48, r25	; 0x30
    2120:	8f a7       	std	Y+47, r24	; 0x2f
    2122:	3f c0       	rjmp	.+126    	; 0x21a2 <main+0x260>
	else if (__tmp > 65535)
    2124:	69 a9       	ldd	r22, Y+49	; 0x31
    2126:	7a a9       	ldd	r23, Y+50	; 0x32
    2128:	8b a9       	ldd	r24, Y+51	; 0x33
    212a:	9c a9       	ldd	r25, Y+52	; 0x34
    212c:	20 e0       	ldi	r18, 0x00	; 0
    212e:	3f ef       	ldi	r19, 0xFF	; 255
    2130:	4f e7       	ldi	r20, 0x7F	; 127
    2132:	57 e4       	ldi	r21, 0x47	; 71
    2134:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2138:	18 16       	cp	r1, r24
    213a:	4c f5       	brge	.+82     	; 0x218e <main+0x24c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    213c:	6d a9       	ldd	r22, Y+53	; 0x35
    213e:	7e a9       	ldd	r23, Y+54	; 0x36
    2140:	8f a9       	ldd	r24, Y+55	; 0x37
    2142:	98 ad       	ldd	r25, Y+56	; 0x38
    2144:	20 e0       	ldi	r18, 0x00	; 0
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	40 e2       	ldi	r20, 0x20	; 32
    214a:	51 e4       	ldi	r21, 0x41	; 65
    214c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2150:	dc 01       	movw	r26, r24
    2152:	cb 01       	movw	r24, r22
    2154:	bc 01       	movw	r22, r24
    2156:	cd 01       	movw	r24, r26
    2158:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215c:	dc 01       	movw	r26, r24
    215e:	cb 01       	movw	r24, r22
    2160:	98 ab       	std	Y+48, r25	; 0x30
    2162:	8f a7       	std	Y+47, r24	; 0x2f
    2164:	0f c0       	rjmp	.+30     	; 0x2184 <main+0x242>
    2166:	88 ec       	ldi	r24, 0xC8	; 200
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	9e a7       	std	Y+46, r25	; 0x2e
    216c:	8d a7       	std	Y+45, r24	; 0x2d
    216e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2170:	9e a5       	ldd	r25, Y+46	; 0x2e
    2172:	01 97       	sbiw	r24, 0x01	; 1
    2174:	f1 f7       	brne	.-4      	; 0x2172 <main+0x230>
    2176:	9e a7       	std	Y+46, r25	; 0x2e
    2178:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    217a:	8f a5       	ldd	r24, Y+47	; 0x2f
    217c:	98 a9       	ldd	r25, Y+48	; 0x30
    217e:	01 97       	sbiw	r24, 0x01	; 1
    2180:	98 ab       	std	Y+48, r25	; 0x30
    2182:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2184:	8f a5       	ldd	r24, Y+47	; 0x2f
    2186:	98 a9       	ldd	r25, Y+48	; 0x30
    2188:	00 97       	sbiw	r24, 0x00	; 0
    218a:	69 f7       	brne	.-38     	; 0x2166 <main+0x224>
    218c:	14 c0       	rjmp	.+40     	; 0x21b6 <main+0x274>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    218e:	69 a9       	ldd	r22, Y+49	; 0x31
    2190:	7a a9       	ldd	r23, Y+50	; 0x32
    2192:	8b a9       	ldd	r24, Y+51	; 0x33
    2194:	9c a9       	ldd	r25, Y+52	; 0x34
    2196:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    219a:	dc 01       	movw	r26, r24
    219c:	cb 01       	movw	r24, r22
    219e:	98 ab       	std	Y+48, r25	; 0x30
    21a0:	8f a7       	std	Y+47, r24	; 0x2f
    21a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    21a4:	98 a9       	ldd	r25, Y+48	; 0x30
    21a6:	9c a7       	std	Y+44, r25	; 0x2c
    21a8:	8b a7       	std	Y+43, r24	; 0x2b
    21aa:	8b a5       	ldd	r24, Y+43	; 0x2b
    21ac:	9c a5       	ldd	r25, Y+44	; 0x2c
    21ae:	01 97       	sbiw	r24, 0x01	; 1
    21b0:	f1 f7       	brne	.-4      	; 0x21ae <main+0x26c>
    21b2:	9c a7       	std	Y+44, r25	; 0x2c
    21b4:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(50);
		key = KeyPad_getPressedKey();
    21b6:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <KeyPad_getPressedKey>
    21ba:	80 93 6f 00 	sts	0x006F, r24
    21be:	94 c0       	rjmp	.+296    	; 0x22e8 <main+0x3a6>
		while((key >= 0) && (key <= 9))
		{
			LCD_intgerToString(key);
    21c0:	80 91 6f 00 	lds	r24, 0x006F
    21c4:	88 2f       	mov	r24, r24
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	0e 94 76 0e 	call	0x1cec	; 0x1cec <LCD_intgerToString>
			secondNum = key + secondNum * 10;
    21cc:	80 91 6f 00 	lds	r24, 0x006F
    21d0:	48 2f       	mov	r20, r24
    21d2:	50 e0       	ldi	r21, 0x00	; 0
    21d4:	80 91 6a 00 	lds	r24, 0x006A
    21d8:	90 91 6b 00 	lds	r25, 0x006B
    21dc:	9c 01       	movw	r18, r24
    21de:	22 0f       	add	r18, r18
    21e0:	33 1f       	adc	r19, r19
    21e2:	c9 01       	movw	r24, r18
    21e4:	88 0f       	add	r24, r24
    21e6:	99 1f       	adc	r25, r25
    21e8:	88 0f       	add	r24, r24
    21ea:	99 1f       	adc	r25, r25
    21ec:	82 0f       	add	r24, r18
    21ee:	93 1f       	adc	r25, r19
    21f0:	84 0f       	add	r24, r20
    21f2:	95 1f       	adc	r25, r21
    21f4:	90 93 6b 00 	sts	0x006B, r25
    21f8:	80 93 6a 00 	sts	0x006A, r24
    21fc:	80 e0       	ldi	r24, 0x00	; 0
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	a8 e4       	ldi	r26, 0x48	; 72
    2202:	b2 e4       	ldi	r27, 0x42	; 66
    2204:	8f a3       	std	Y+39, r24	; 0x27
    2206:	98 a7       	std	Y+40, r25	; 0x28
    2208:	a9 a7       	std	Y+41, r26	; 0x29
    220a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    220c:	6f a1       	ldd	r22, Y+39	; 0x27
    220e:	78 a5       	ldd	r23, Y+40	; 0x28
    2210:	89 a5       	ldd	r24, Y+41	; 0x29
    2212:	9a a5       	ldd	r25, Y+42	; 0x2a
    2214:	20 e0       	ldi	r18, 0x00	; 0
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	4a ef       	ldi	r20, 0xFA	; 250
    221a:	54 e4       	ldi	r21, 0x44	; 68
    221c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2220:	dc 01       	movw	r26, r24
    2222:	cb 01       	movw	r24, r22
    2224:	8b a3       	std	Y+35, r24	; 0x23
    2226:	9c a3       	std	Y+36, r25	; 0x24
    2228:	ad a3       	std	Y+37, r26	; 0x25
    222a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    222c:	6b a1       	ldd	r22, Y+35	; 0x23
    222e:	7c a1       	ldd	r23, Y+36	; 0x24
    2230:	8d a1       	ldd	r24, Y+37	; 0x25
    2232:	9e a1       	ldd	r25, Y+38	; 0x26
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	40 e8       	ldi	r20, 0x80	; 128
    223a:	5f e3       	ldi	r21, 0x3F	; 63
    223c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2240:	88 23       	and	r24, r24
    2242:	2c f4       	brge	.+10     	; 0x224e <main+0x30c>
		__ticks = 1;
    2244:	81 e0       	ldi	r24, 0x01	; 1
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	9a a3       	std	Y+34, r25	; 0x22
    224a:	89 a3       	std	Y+33, r24	; 0x21
    224c:	3f c0       	rjmp	.+126    	; 0x22cc <main+0x38a>
	else if (__tmp > 65535)
    224e:	6b a1       	ldd	r22, Y+35	; 0x23
    2250:	7c a1       	ldd	r23, Y+36	; 0x24
    2252:	8d a1       	ldd	r24, Y+37	; 0x25
    2254:	9e a1       	ldd	r25, Y+38	; 0x26
    2256:	20 e0       	ldi	r18, 0x00	; 0
    2258:	3f ef       	ldi	r19, 0xFF	; 255
    225a:	4f e7       	ldi	r20, 0x7F	; 127
    225c:	57 e4       	ldi	r21, 0x47	; 71
    225e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2262:	18 16       	cp	r1, r24
    2264:	4c f5       	brge	.+82     	; 0x22b8 <main+0x376>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2266:	6f a1       	ldd	r22, Y+39	; 0x27
    2268:	78 a5       	ldd	r23, Y+40	; 0x28
    226a:	89 a5       	ldd	r24, Y+41	; 0x29
    226c:	9a a5       	ldd	r25, Y+42	; 0x2a
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	40 e2       	ldi	r20, 0x20	; 32
    2274:	51 e4       	ldi	r21, 0x41	; 65
    2276:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    227a:	dc 01       	movw	r26, r24
    227c:	cb 01       	movw	r24, r22
    227e:	bc 01       	movw	r22, r24
    2280:	cd 01       	movw	r24, r26
    2282:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2286:	dc 01       	movw	r26, r24
    2288:	cb 01       	movw	r24, r22
    228a:	9a a3       	std	Y+34, r25	; 0x22
    228c:	89 a3       	std	Y+33, r24	; 0x21
    228e:	0f c0       	rjmp	.+30     	; 0x22ae <main+0x36c>
    2290:	88 ec       	ldi	r24, 0xC8	; 200
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	98 a3       	std	Y+32, r25	; 0x20
    2296:	8f 8f       	std	Y+31, r24	; 0x1f
    2298:	8f 8d       	ldd	r24, Y+31	; 0x1f
    229a:	98 a1       	ldd	r25, Y+32	; 0x20
    229c:	01 97       	sbiw	r24, 0x01	; 1
    229e:	f1 f7       	brne	.-4      	; 0x229c <main+0x35a>
    22a0:	98 a3       	std	Y+32, r25	; 0x20
    22a2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22a4:	89 a1       	ldd	r24, Y+33	; 0x21
    22a6:	9a a1       	ldd	r25, Y+34	; 0x22
    22a8:	01 97       	sbiw	r24, 0x01	; 1
    22aa:	9a a3       	std	Y+34, r25	; 0x22
    22ac:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ae:	89 a1       	ldd	r24, Y+33	; 0x21
    22b0:	9a a1       	ldd	r25, Y+34	; 0x22
    22b2:	00 97       	sbiw	r24, 0x00	; 0
    22b4:	69 f7       	brne	.-38     	; 0x2290 <main+0x34e>
    22b6:	14 c0       	rjmp	.+40     	; 0x22e0 <main+0x39e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22b8:	6b a1       	ldd	r22, Y+35	; 0x23
    22ba:	7c a1       	ldd	r23, Y+36	; 0x24
    22bc:	8d a1       	ldd	r24, Y+37	; 0x25
    22be:	9e a1       	ldd	r25, Y+38	; 0x26
    22c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c4:	dc 01       	movw	r26, r24
    22c6:	cb 01       	movw	r24, r22
    22c8:	9a a3       	std	Y+34, r25	; 0x22
    22ca:	89 a3       	std	Y+33, r24	; 0x21
    22cc:	89 a1       	ldd	r24, Y+33	; 0x21
    22ce:	9a a1       	ldd	r25, Y+34	; 0x22
    22d0:	9e 8f       	std	Y+30, r25	; 0x1e
    22d2:	8d 8f       	std	Y+29, r24	; 0x1d
    22d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22d6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22d8:	01 97       	sbiw	r24, 0x01	; 1
    22da:	f1 f7       	brne	.-4      	; 0x22d8 <main+0x396>
    22dc:	9e 8f       	std	Y+30, r25	; 0x1e
    22de:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(50);
			key = KeyPad_getPressedKey();
    22e0:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <KeyPad_getPressedKey>
    22e4:	80 93 6f 00 	sts	0x006F, r24
		}
		LCD_displayCharacter(key);
		op = key;
		_delay_ms(50);
		key = KeyPad_getPressedKey();
		while((key >= 0) && (key <= 9))
    22e8:	80 91 6f 00 	lds	r24, 0x006F
    22ec:	8a 30       	cpi	r24, 0x0A	; 10
    22ee:	08 f4       	brcc	.+2      	; 0x22f2 <main+0x3b0>
    22f0:	67 cf       	rjmp	.-306    	; 0x21c0 <main+0x27e>
			LCD_intgerToString(key);
			secondNum = key + secondNum * 10;
			_delay_ms(50);
			key = KeyPad_getPressedKey();
		}
		LCD_displayCharacter(key);
    22f2:	80 91 6f 00 	lds	r24, 0x006F
    22f6:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_displayCharacter>
    22fa:	80 e0       	ldi	r24, 0x00	; 0
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	a8 e4       	ldi	r26, 0x48	; 72
    2300:	b2 e4       	ldi	r27, 0x42	; 66
    2302:	89 8f       	std	Y+25, r24	; 0x19
    2304:	9a 8f       	std	Y+26, r25	; 0x1a
    2306:	ab 8f       	std	Y+27, r26	; 0x1b
    2308:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    230a:	69 8d       	ldd	r22, Y+25	; 0x19
    230c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    230e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2310:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2312:	20 e0       	ldi	r18, 0x00	; 0
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	4a ef       	ldi	r20, 0xFA	; 250
    2318:	54 e4       	ldi	r21, 0x44	; 68
    231a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    231e:	dc 01       	movw	r26, r24
    2320:	cb 01       	movw	r24, r22
    2322:	8d 8b       	std	Y+21, r24	; 0x15
    2324:	9e 8b       	std	Y+22, r25	; 0x16
    2326:	af 8b       	std	Y+23, r26	; 0x17
    2328:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    232a:	6d 89       	ldd	r22, Y+21	; 0x15
    232c:	7e 89       	ldd	r23, Y+22	; 0x16
    232e:	8f 89       	ldd	r24, Y+23	; 0x17
    2330:	98 8d       	ldd	r25, Y+24	; 0x18
    2332:	20 e0       	ldi	r18, 0x00	; 0
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	40 e8       	ldi	r20, 0x80	; 128
    2338:	5f e3       	ldi	r21, 0x3F	; 63
    233a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    233e:	88 23       	and	r24, r24
    2340:	2c f4       	brge	.+10     	; 0x234c <main+0x40a>
		__ticks = 1;
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	9c 8b       	std	Y+20, r25	; 0x14
    2348:	8b 8b       	std	Y+19, r24	; 0x13
    234a:	3f c0       	rjmp	.+126    	; 0x23ca <main+0x488>
	else if (__tmp > 65535)
    234c:	6d 89       	ldd	r22, Y+21	; 0x15
    234e:	7e 89       	ldd	r23, Y+22	; 0x16
    2350:	8f 89       	ldd	r24, Y+23	; 0x17
    2352:	98 8d       	ldd	r25, Y+24	; 0x18
    2354:	20 e0       	ldi	r18, 0x00	; 0
    2356:	3f ef       	ldi	r19, 0xFF	; 255
    2358:	4f e7       	ldi	r20, 0x7F	; 127
    235a:	57 e4       	ldi	r21, 0x47	; 71
    235c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2360:	18 16       	cp	r1, r24
    2362:	4c f5       	brge	.+82     	; 0x23b6 <main+0x474>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2364:	69 8d       	ldd	r22, Y+25	; 0x19
    2366:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2368:	8b 8d       	ldd	r24, Y+27	; 0x1b
    236a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	40 e2       	ldi	r20, 0x20	; 32
    2372:	51 e4       	ldi	r21, 0x41	; 65
    2374:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	bc 01       	movw	r22, r24
    237e:	cd 01       	movw	r24, r26
    2380:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	9c 8b       	std	Y+20, r25	; 0x14
    238a:	8b 8b       	std	Y+19, r24	; 0x13
    238c:	0f c0       	rjmp	.+30     	; 0x23ac <main+0x46a>
    238e:	88 ec       	ldi	r24, 0xC8	; 200
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	9a 8b       	std	Y+18, r25	; 0x12
    2394:	89 8b       	std	Y+17, r24	; 0x11
    2396:	89 89       	ldd	r24, Y+17	; 0x11
    2398:	9a 89       	ldd	r25, Y+18	; 0x12
    239a:	01 97       	sbiw	r24, 0x01	; 1
    239c:	f1 f7       	brne	.-4      	; 0x239a <main+0x458>
    239e:	9a 8b       	std	Y+18, r25	; 0x12
    23a0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a2:	8b 89       	ldd	r24, Y+19	; 0x13
    23a4:	9c 89       	ldd	r25, Y+20	; 0x14
    23a6:	01 97       	sbiw	r24, 0x01	; 1
    23a8:	9c 8b       	std	Y+20, r25	; 0x14
    23aa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ac:	8b 89       	ldd	r24, Y+19	; 0x13
    23ae:	9c 89       	ldd	r25, Y+20	; 0x14
    23b0:	00 97       	sbiw	r24, 0x00	; 0
    23b2:	69 f7       	brne	.-38     	; 0x238e <main+0x44c>
    23b4:	14 c0       	rjmp	.+40     	; 0x23de <main+0x49c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b6:	6d 89       	ldd	r22, Y+21	; 0x15
    23b8:	7e 89       	ldd	r23, Y+22	; 0x16
    23ba:	8f 89       	ldd	r24, Y+23	; 0x17
    23bc:	98 8d       	ldd	r25, Y+24	; 0x18
    23be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c2:	dc 01       	movw	r26, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	9c 8b       	std	Y+20, r25	; 0x14
    23c8:	8b 8b       	std	Y+19, r24	; 0x13
    23ca:	8b 89       	ldd	r24, Y+19	; 0x13
    23cc:	9c 89       	ldd	r25, Y+20	; 0x14
    23ce:	98 8b       	std	Y+16, r25	; 0x10
    23d0:	8f 87       	std	Y+15, r24	; 0x0f
    23d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    23d4:	98 89       	ldd	r25, Y+16	; 0x10
    23d6:	01 97       	sbiw	r24, 0x01	; 1
    23d8:	f1 f7       	brne	.-4      	; 0x23d6 <main+0x494>
    23da:	98 8b       	std	Y+16, r25	; 0x10
    23dc:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(50);
		switch(op)
    23de:	80 91 6e 00 	lds	r24, 0x006E
    23e2:	28 2f       	mov	r18, r24
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	29 96       	adiw	r28, 0x09	; 9
    23e8:	3f af       	std	Y+63, r19	; 0x3f
    23ea:	2e af       	std	Y+62, r18	; 0x3e
    23ec:	29 97       	sbiw	r28, 0x09	; 9
    23ee:	29 96       	adiw	r28, 0x09	; 9
    23f0:	4e ad       	ldd	r20, Y+62	; 0x3e
    23f2:	5f ad       	ldd	r21, Y+63	; 0x3f
    23f4:	29 97       	sbiw	r28, 0x09	; 9
    23f6:	4b 32       	cpi	r20, 0x2B	; 43
    23f8:	51 05       	cpc	r21, r1
    23fa:	f9 f0       	breq	.+62     	; 0x243a <main+0x4f8>
    23fc:	29 96       	adiw	r28, 0x09	; 9
    23fe:	8e ad       	ldd	r24, Y+62	; 0x3e
    2400:	9f ad       	ldd	r25, Y+63	; 0x3f
    2402:	29 97       	sbiw	r28, 0x09	; 9
    2404:	8c 32       	cpi	r24, 0x2C	; 44
    2406:	91 05       	cpc	r25, r1
    2408:	4c f4       	brge	.+18     	; 0x241c <main+0x4da>
    240a:	29 96       	adiw	r28, 0x09	; 9
    240c:	ee ad       	ldd	r30, Y+62	; 0x3e
    240e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2410:	29 97       	sbiw	r28, 0x09	; 9
    2412:	ea 32       	cpi	r30, 0x2A	; 42
    2414:	f1 05       	cpc	r31, r1
    2416:	09 f4       	brne	.+2      	; 0x241a <main+0x4d8>
    2418:	3f c0       	rjmp	.+126    	; 0x2498 <main+0x556>
    241a:	52 c0       	rjmp	.+164    	; 0x24c0 <main+0x57e>
    241c:	29 96       	adiw	r28, 0x09	; 9
    241e:	2e ad       	ldd	r18, Y+62	; 0x3e
    2420:	3f ad       	ldd	r19, Y+63	; 0x3f
    2422:	29 97       	sbiw	r28, 0x09	; 9
    2424:	2d 32       	cpi	r18, 0x2D	; 45
    2426:	31 05       	cpc	r19, r1
    2428:	b9 f0       	breq	.+46     	; 0x2458 <main+0x516>
    242a:	29 96       	adiw	r28, 0x09	; 9
    242c:	4e ad       	ldd	r20, Y+62	; 0x3e
    242e:	5f ad       	ldd	r21, Y+63	; 0x3f
    2430:	29 97       	sbiw	r28, 0x09	; 9
    2432:	4f 32       	cpi	r20, 0x2F	; 47
    2434:	51 05       	cpc	r21, r1
    2436:	f9 f0       	breq	.+62     	; 0x2476 <main+0x534>
    2438:	43 c0       	rjmp	.+134    	; 0x24c0 <main+0x57e>
		{
		case '+' : result = firstNum + secondNum;
    243a:	80 91 68 00 	lds	r24, 0x0068
    243e:	90 91 69 00 	lds	r25, 0x0069
    2442:	20 91 6a 00 	lds	r18, 0x006A
    2446:	30 91 6b 00 	lds	r19, 0x006B
    244a:	82 0f       	add	r24, r18
    244c:	93 1f       	adc	r25, r19
    244e:	90 93 6d 00 	sts	0x006D, r25
    2452:	80 93 6c 00 	sts	0x006C, r24
    2456:	34 c0       	rjmp	.+104    	; 0x24c0 <main+0x57e>
		break;
		case '-' : result = firstNum - secondNum;
    2458:	80 91 68 00 	lds	r24, 0x0068
    245c:	90 91 69 00 	lds	r25, 0x0069
    2460:	20 91 6a 00 	lds	r18, 0x006A
    2464:	30 91 6b 00 	lds	r19, 0x006B
    2468:	82 1b       	sub	r24, r18
    246a:	93 0b       	sbc	r25, r19
    246c:	90 93 6d 00 	sts	0x006D, r25
    2470:	80 93 6c 00 	sts	0x006C, r24
    2474:	25 c0       	rjmp	.+74     	; 0x24c0 <main+0x57e>
		break;
		case '/' : result = firstNum / secondNum;
    2476:	80 91 68 00 	lds	r24, 0x0068
    247a:	90 91 69 00 	lds	r25, 0x0069
    247e:	20 91 6a 00 	lds	r18, 0x006A
    2482:	30 91 6b 00 	lds	r19, 0x006B
    2486:	b9 01       	movw	r22, r18
    2488:	0e 94 ed 12 	call	0x25da	; 0x25da <__udivmodhi4>
    248c:	cb 01       	movw	r24, r22
    248e:	90 93 6d 00 	sts	0x006D, r25
    2492:	80 93 6c 00 	sts	0x006C, r24
    2496:	14 c0       	rjmp	.+40     	; 0x24c0 <main+0x57e>
		break;
		case '*' : result = firstNum * secondNum;
    2498:	80 91 68 00 	lds	r24, 0x0068
    249c:	90 91 69 00 	lds	r25, 0x0069
    24a0:	20 91 6a 00 	lds	r18, 0x006A
    24a4:	30 91 6b 00 	lds	r19, 0x006B
    24a8:	fc 01       	movw	r30, r24
    24aa:	e2 9f       	mul	r30, r18
    24ac:	c0 01       	movw	r24, r0
    24ae:	e3 9f       	mul	r30, r19
    24b0:	90 0d       	add	r25, r0
    24b2:	f2 9f       	mul	r31, r18
    24b4:	90 0d       	add	r25, r0
    24b6:	11 24       	eor	r1, r1
    24b8:	90 93 6d 00 	sts	0x006D, r25
    24bc:	80 93 6c 00 	sts	0x006C, r24
		break;
		}
		LCD_intgerToString(result);
    24c0:	80 91 6c 00 	lds	r24, 0x006C
    24c4:	90 91 6d 00 	lds	r25, 0x006D
    24c8:	0e 94 76 0e 	call	0x1cec	; 0x1cec <LCD_intgerToString>
		firstNum = 0;
    24cc:	10 92 69 00 	sts	0x0069, r1
    24d0:	10 92 68 00 	sts	0x0068, r1
		secondNum = 0;
    24d4:	10 92 6b 00 	sts	0x006B, r1
    24d8:	10 92 6a 00 	sts	0x006A, r1
		key = 0;
    24dc:	10 92 6f 00 	sts	0x006F, r1
		result = 0;
    24e0:	10 92 6d 00 	sts	0x006D, r1
    24e4:	10 92 6c 00 	sts	0x006C, r1
		if((KeyPad_getPressedKey()) == 13)
    24e8:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <KeyPad_getPressedKey>
    24ec:	8d 30       	cpi	r24, 0x0D	; 13
    24ee:	11 f4       	brne	.+4      	; 0x24f4 <main+0x5b2>
		{
			LCD_clearScreen();
    24f0:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <LCD_clearScreen>
    24f4:	80 e0       	ldi	r24, 0x00	; 0
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	a8 e4       	ldi	r26, 0x48	; 72
    24fa:	b2 e4       	ldi	r27, 0x42	; 66
    24fc:	8b 87       	std	Y+11, r24	; 0x0b
    24fe:	9c 87       	std	Y+12, r25	; 0x0c
    2500:	ad 87       	std	Y+13, r26	; 0x0d
    2502:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2504:	6b 85       	ldd	r22, Y+11	; 0x0b
    2506:	7c 85       	ldd	r23, Y+12	; 0x0c
    2508:	8d 85       	ldd	r24, Y+13	; 0x0d
    250a:	9e 85       	ldd	r25, Y+14	; 0x0e
    250c:	20 e0       	ldi	r18, 0x00	; 0
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	4a ef       	ldi	r20, 0xFA	; 250
    2512:	54 e4       	ldi	r21, 0x44	; 68
    2514:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2518:	dc 01       	movw	r26, r24
    251a:	cb 01       	movw	r24, r22
    251c:	8f 83       	std	Y+7, r24	; 0x07
    251e:	98 87       	std	Y+8, r25	; 0x08
    2520:	a9 87       	std	Y+9, r26	; 0x09
    2522:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2524:	6f 81       	ldd	r22, Y+7	; 0x07
    2526:	78 85       	ldd	r23, Y+8	; 0x08
    2528:	89 85       	ldd	r24, Y+9	; 0x09
    252a:	9a 85       	ldd	r25, Y+10	; 0x0a
    252c:	20 e0       	ldi	r18, 0x00	; 0
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	40 e8       	ldi	r20, 0x80	; 128
    2532:	5f e3       	ldi	r21, 0x3F	; 63
    2534:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2538:	88 23       	and	r24, r24
    253a:	2c f4       	brge	.+10     	; 0x2546 <main+0x604>
		__ticks = 1;
    253c:	81 e0       	ldi	r24, 0x01	; 1
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	9e 83       	std	Y+6, r25	; 0x06
    2542:	8d 83       	std	Y+5, r24	; 0x05
    2544:	3f c0       	rjmp	.+126    	; 0x25c4 <main+0x682>
	else if (__tmp > 65535)
    2546:	6f 81       	ldd	r22, Y+7	; 0x07
    2548:	78 85       	ldd	r23, Y+8	; 0x08
    254a:	89 85       	ldd	r24, Y+9	; 0x09
    254c:	9a 85       	ldd	r25, Y+10	; 0x0a
    254e:	20 e0       	ldi	r18, 0x00	; 0
    2550:	3f ef       	ldi	r19, 0xFF	; 255
    2552:	4f e7       	ldi	r20, 0x7F	; 127
    2554:	57 e4       	ldi	r21, 0x47	; 71
    2556:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    255a:	18 16       	cp	r1, r24
    255c:	4c f5       	brge	.+82     	; 0x25b0 <main+0x66e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    255e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2560:	7c 85       	ldd	r23, Y+12	; 0x0c
    2562:	8d 85       	ldd	r24, Y+13	; 0x0d
    2564:	9e 85       	ldd	r25, Y+14	; 0x0e
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	40 e2       	ldi	r20, 0x20	; 32
    256c:	51 e4       	ldi	r21, 0x41	; 65
    256e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2572:	dc 01       	movw	r26, r24
    2574:	cb 01       	movw	r24, r22
    2576:	bc 01       	movw	r22, r24
    2578:	cd 01       	movw	r24, r26
    257a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    257e:	dc 01       	movw	r26, r24
    2580:	cb 01       	movw	r24, r22
    2582:	9e 83       	std	Y+6, r25	; 0x06
    2584:	8d 83       	std	Y+5, r24	; 0x05
    2586:	0f c0       	rjmp	.+30     	; 0x25a6 <main+0x664>
    2588:	88 ec       	ldi	r24, 0xC8	; 200
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	9c 83       	std	Y+4, r25	; 0x04
    258e:	8b 83       	std	Y+3, r24	; 0x03
    2590:	8b 81       	ldd	r24, Y+3	; 0x03
    2592:	9c 81       	ldd	r25, Y+4	; 0x04
    2594:	01 97       	sbiw	r24, 0x01	; 1
    2596:	f1 f7       	brne	.-4      	; 0x2594 <main+0x652>
    2598:	9c 83       	std	Y+4, r25	; 0x04
    259a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    259c:	8d 81       	ldd	r24, Y+5	; 0x05
    259e:	9e 81       	ldd	r25, Y+6	; 0x06
    25a0:	01 97       	sbiw	r24, 0x01	; 1
    25a2:	9e 83       	std	Y+6, r25	; 0x06
    25a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25a6:	8d 81       	ldd	r24, Y+5	; 0x05
    25a8:	9e 81       	ldd	r25, Y+6	; 0x06
    25aa:	00 97       	sbiw	r24, 0x00	; 0
    25ac:	69 f7       	brne	.-38     	; 0x2588 <main+0x646>
    25ae:	d8 cc       	rjmp	.-1616   	; 0x1f60 <main+0x1e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25b0:	6f 81       	ldd	r22, Y+7	; 0x07
    25b2:	78 85       	ldd	r23, Y+8	; 0x08
    25b4:	89 85       	ldd	r24, Y+9	; 0x09
    25b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25bc:	dc 01       	movw	r26, r24
    25be:	cb 01       	movw	r24, r22
    25c0:	9e 83       	std	Y+6, r25	; 0x06
    25c2:	8d 83       	std	Y+5, r24	; 0x05
    25c4:	8d 81       	ldd	r24, Y+5	; 0x05
    25c6:	9e 81       	ldd	r25, Y+6	; 0x06
    25c8:	9a 83       	std	Y+2, r25	; 0x02
    25ca:	89 83       	std	Y+1, r24	; 0x01
    25cc:	89 81       	ldd	r24, Y+1	; 0x01
    25ce:	9a 81       	ldd	r25, Y+2	; 0x02
    25d0:	01 97       	sbiw	r24, 0x01	; 1
    25d2:	f1 f7       	brne	.-4      	; 0x25d0 <main+0x68e>
    25d4:	9a 83       	std	Y+2, r25	; 0x02
    25d6:	89 83       	std	Y+1, r24	; 0x01
    25d8:	c3 cc       	rjmp	.-1658   	; 0x1f60 <main+0x1e>

000025da <__udivmodhi4>:
    25da:	aa 1b       	sub	r26, r26
    25dc:	bb 1b       	sub	r27, r27
    25de:	51 e1       	ldi	r21, 0x11	; 17
    25e0:	07 c0       	rjmp	.+14     	; 0x25f0 <__udivmodhi4_ep>

000025e2 <__udivmodhi4_loop>:
    25e2:	aa 1f       	adc	r26, r26
    25e4:	bb 1f       	adc	r27, r27
    25e6:	a6 17       	cp	r26, r22
    25e8:	b7 07       	cpc	r27, r23
    25ea:	10 f0       	brcs	.+4      	; 0x25f0 <__udivmodhi4_ep>
    25ec:	a6 1b       	sub	r26, r22
    25ee:	b7 0b       	sbc	r27, r23

000025f0 <__udivmodhi4_ep>:
    25f0:	88 1f       	adc	r24, r24
    25f2:	99 1f       	adc	r25, r25
    25f4:	5a 95       	dec	r21
    25f6:	a9 f7       	brne	.-22     	; 0x25e2 <__udivmodhi4_loop>
    25f8:	80 95       	com	r24
    25fa:	90 95       	com	r25
    25fc:	bc 01       	movw	r22, r24
    25fe:	cd 01       	movw	r24, r26
    2600:	08 95       	ret

00002602 <__prologue_saves__>:
    2602:	2f 92       	push	r2
    2604:	3f 92       	push	r3
    2606:	4f 92       	push	r4
    2608:	5f 92       	push	r5
    260a:	6f 92       	push	r6
    260c:	7f 92       	push	r7
    260e:	8f 92       	push	r8
    2610:	9f 92       	push	r9
    2612:	af 92       	push	r10
    2614:	bf 92       	push	r11
    2616:	cf 92       	push	r12
    2618:	df 92       	push	r13
    261a:	ef 92       	push	r14
    261c:	ff 92       	push	r15
    261e:	0f 93       	push	r16
    2620:	1f 93       	push	r17
    2622:	cf 93       	push	r28
    2624:	df 93       	push	r29
    2626:	cd b7       	in	r28, 0x3d	; 61
    2628:	de b7       	in	r29, 0x3e	; 62
    262a:	ca 1b       	sub	r28, r26
    262c:	db 0b       	sbc	r29, r27
    262e:	0f b6       	in	r0, 0x3f	; 63
    2630:	f8 94       	cli
    2632:	de bf       	out	0x3e, r29	; 62
    2634:	0f be       	out	0x3f, r0	; 63
    2636:	cd bf       	out	0x3d, r28	; 61
    2638:	09 94       	ijmp

0000263a <__epilogue_restores__>:
    263a:	2a 88       	ldd	r2, Y+18	; 0x12
    263c:	39 88       	ldd	r3, Y+17	; 0x11
    263e:	48 88       	ldd	r4, Y+16	; 0x10
    2640:	5f 84       	ldd	r5, Y+15	; 0x0f
    2642:	6e 84       	ldd	r6, Y+14	; 0x0e
    2644:	7d 84       	ldd	r7, Y+13	; 0x0d
    2646:	8c 84       	ldd	r8, Y+12	; 0x0c
    2648:	9b 84       	ldd	r9, Y+11	; 0x0b
    264a:	aa 84       	ldd	r10, Y+10	; 0x0a
    264c:	b9 84       	ldd	r11, Y+9	; 0x09
    264e:	c8 84       	ldd	r12, Y+8	; 0x08
    2650:	df 80       	ldd	r13, Y+7	; 0x07
    2652:	ee 80       	ldd	r14, Y+6	; 0x06
    2654:	fd 80       	ldd	r15, Y+5	; 0x05
    2656:	0c 81       	ldd	r16, Y+4	; 0x04
    2658:	1b 81       	ldd	r17, Y+3	; 0x03
    265a:	aa 81       	ldd	r26, Y+2	; 0x02
    265c:	b9 81       	ldd	r27, Y+1	; 0x01
    265e:	ce 0f       	add	r28, r30
    2660:	d1 1d       	adc	r29, r1
    2662:	0f b6       	in	r0, 0x3f	; 63
    2664:	f8 94       	cli
    2666:	de bf       	out	0x3e, r29	; 62
    2668:	0f be       	out	0x3f, r0	; 63
    266a:	cd bf       	out	0x3d, r28	; 61
    266c:	ed 01       	movw	r28, r26
    266e:	08 95       	ret

00002670 <itoa>:
    2670:	fb 01       	movw	r30, r22
    2672:	9f 01       	movw	r18, r30
    2674:	e8 94       	clt
    2676:	42 30       	cpi	r20, 0x02	; 2
    2678:	c4 f0       	brlt	.+48     	; 0x26aa <itoa+0x3a>
    267a:	45 32       	cpi	r20, 0x25	; 37
    267c:	b4 f4       	brge	.+44     	; 0x26aa <itoa+0x3a>
    267e:	4a 30       	cpi	r20, 0x0A	; 10
    2680:	29 f4       	brne	.+10     	; 0x268c <itoa+0x1c>
    2682:	97 fb       	bst	r25, 7
    2684:	1e f4       	brtc	.+6      	; 0x268c <itoa+0x1c>
    2686:	90 95       	com	r25
    2688:	81 95       	neg	r24
    268a:	9f 4f       	sbci	r25, 0xFF	; 255
    268c:	64 2f       	mov	r22, r20
    268e:	77 27       	eor	r23, r23
    2690:	0e 94 ed 12 	call	0x25da	; 0x25da <__udivmodhi4>
    2694:	80 5d       	subi	r24, 0xD0	; 208
    2696:	8a 33       	cpi	r24, 0x3A	; 58
    2698:	0c f0       	brlt	.+2      	; 0x269c <itoa+0x2c>
    269a:	89 5d       	subi	r24, 0xD9	; 217
    269c:	81 93       	st	Z+, r24
    269e:	cb 01       	movw	r24, r22
    26a0:	00 97       	sbiw	r24, 0x00	; 0
    26a2:	a1 f7       	brne	.-24     	; 0x268c <itoa+0x1c>
    26a4:	16 f4       	brtc	.+4      	; 0x26aa <itoa+0x3a>
    26a6:	5d e2       	ldi	r21, 0x2D	; 45
    26a8:	51 93       	st	Z+, r21
    26aa:	10 82       	st	Z, r1
    26ac:	c9 01       	movw	r24, r18
    26ae:	0c 94 59 13 	jmp	0x26b2	; 0x26b2 <strrev>

000026b2 <strrev>:
    26b2:	dc 01       	movw	r26, r24
    26b4:	fc 01       	movw	r30, r24
    26b6:	67 2f       	mov	r22, r23
    26b8:	71 91       	ld	r23, Z+
    26ba:	77 23       	and	r23, r23
    26bc:	e1 f7       	brne	.-8      	; 0x26b6 <strrev+0x4>
    26be:	32 97       	sbiw	r30, 0x02	; 2
    26c0:	04 c0       	rjmp	.+8      	; 0x26ca <strrev+0x18>
    26c2:	7c 91       	ld	r23, X
    26c4:	6d 93       	st	X+, r22
    26c6:	70 83       	st	Z, r23
    26c8:	62 91       	ld	r22, -Z
    26ca:	ae 17       	cp	r26, r30
    26cc:	bf 07       	cpc	r27, r31
    26ce:	c8 f3       	brcs	.-14     	; 0x26c2 <strrev+0x10>
    26d0:	08 95       	ret

000026d2 <_exit>:
    26d2:	f8 94       	cli

000026d4 <__stop_program>:
    26d4:	ff cf       	rjmp	.-2      	; 0x26d4 <__stop_program>
