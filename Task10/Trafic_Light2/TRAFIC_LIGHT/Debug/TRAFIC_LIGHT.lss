
TRAFIC_LIGHT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d50  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000d50  00000de4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800074  00800074  00000df8  2**0
                  ALLOC
  3 .stab         00000d44  00000000  00000000  00000df8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000a70  00000000  00000000  00001b3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e5       	ldi	r30, 0x50	; 80
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 37       	cpi	r26, 0x77	; 119
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 56 05 	call	0xaac	; 0xaac <main>
  8a:	0c 94 a6 06 	jmp	0xd4c	; 0xd4c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_vsetPINDir>:


#include <avr/io.h>
#include "std_macros.h"
void DIO_vsetPINDir(unsigned char portname,unsigned char pinnumber,unsigned char direction)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	00 d0       	rcall	.+0      	; 0x98 <DIO_vsetPINDir+0x6>
  98:	00 d0       	rcall	.+0      	; 0x9a <DIO_vsetPINDir+0x8>
  9a:	0f 92       	push	r0
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
  a0:	89 83       	std	Y+1, r24	; 0x01
  a2:	6a 83       	std	Y+2, r22	; 0x02
  a4:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
  a6:	89 81       	ldd	r24, Y+1	; 0x01
  a8:	28 2f       	mov	r18, r24
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	3d 83       	std	Y+5, r19	; 0x05
  ae:	2c 83       	std	Y+4, r18	; 0x04
  b0:	8c 81       	ldd	r24, Y+4	; 0x04
  b2:	9d 81       	ldd	r25, Y+5	; 0x05
  b4:	82 34       	cpi	r24, 0x42	; 66
  b6:	91 05       	cpc	r25, r1
  b8:	09 f4       	brne	.+2      	; 0xbc <DIO_vsetPINDir+0x2a>
  ba:	44 c0       	rjmp	.+136    	; 0x144 <DIO_vsetPINDir+0xb2>
  bc:	2c 81       	ldd	r18, Y+4	; 0x04
  be:	3d 81       	ldd	r19, Y+5	; 0x05
  c0:	23 34       	cpi	r18, 0x43	; 67
  c2:	31 05       	cpc	r19, r1
  c4:	34 f4       	brge	.+12     	; 0xd2 <DIO_vsetPINDir+0x40>
  c6:	8c 81       	ldd	r24, Y+4	; 0x04
  c8:	9d 81       	ldd	r25, Y+5	; 0x05
  ca:	81 34       	cpi	r24, 0x41	; 65
  cc:	91 05       	cpc	r25, r1
  ce:	71 f0       	breq	.+28     	; 0xec <DIO_vsetPINDir+0x5a>
  d0:	bc c0       	rjmp	.+376    	; 0x24a <DIO_vsetPINDir+0x1b8>
  d2:	2c 81       	ldd	r18, Y+4	; 0x04
  d4:	3d 81       	ldd	r19, Y+5	; 0x05
  d6:	23 34       	cpi	r18, 0x43	; 67
  d8:	31 05       	cpc	r19, r1
  da:	09 f4       	brne	.+2      	; 0xde <DIO_vsetPINDir+0x4c>
  dc:	5f c0       	rjmp	.+190    	; 0x19c <DIO_vsetPINDir+0x10a>
  de:	8c 81       	ldd	r24, Y+4	; 0x04
  e0:	9d 81       	ldd	r25, Y+5	; 0x05
  e2:	84 34       	cpi	r24, 0x44	; 68
  e4:	91 05       	cpc	r25, r1
  e6:	09 f4       	brne	.+2      	; 0xea <DIO_vsetPINDir+0x58>
  e8:	85 c0       	rjmp	.+266    	; 0x1f4 <DIO_vsetPINDir+0x162>
  ea:	af c0       	rjmp	.+350    	; 0x24a <DIO_vsetPINDir+0x1b8>
	{


		case 'A':
		if(direction==1)
  ec:	8b 81       	ldd	r24, Y+3	; 0x03
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	a1 f4       	brne	.+40     	; 0x11a <DIO_vsetPINDir+0x88>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
  f2:	aa e3       	ldi	r26, 0x3A	; 58
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	ea e3       	ldi	r30, 0x3A	; 58
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	48 2f       	mov	r20, r24
  fe:	8a 81       	ldd	r24, Y+2	; 0x02
 100:	28 2f       	mov	r18, r24
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	02 2e       	mov	r0, r18
 10a:	02 c0       	rjmp	.+4      	; 0x110 <DIO_vsetPINDir+0x7e>
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	0a 94       	dec	r0
 112:	e2 f7       	brpl	.-8      	; 0x10c <DIO_vsetPINDir+0x7a>
 114:	84 2b       	or	r24, r20
 116:	8c 93       	st	X, r24
 118:	98 c0       	rjmp	.+304    	; 0x24a <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
 11a:	aa e3       	ldi	r26, 0x3A	; 58
 11c:	b0 e0       	ldi	r27, 0x00	; 0
 11e:	ea e3       	ldi	r30, 0x3A	; 58
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	48 2f       	mov	r20, r24
 126:	8a 81       	ldd	r24, Y+2	; 0x02
 128:	28 2f       	mov	r18, r24
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	02 2e       	mov	r0, r18
 132:	02 c0       	rjmp	.+4      	; 0x138 <DIO_vsetPINDir+0xa6>
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	0a 94       	dec	r0
 13a:	e2 f7       	brpl	.-8      	; 0x134 <DIO_vsetPINDir+0xa2>
 13c:	80 95       	com	r24
 13e:	84 23       	and	r24, r20
 140:	8c 93       	st	X, r24
 142:	83 c0       	rjmp	.+262    	; 0x24a <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'B':
		if(direction==1)
 144:	8b 81       	ldd	r24, Y+3	; 0x03
 146:	81 30       	cpi	r24, 0x01	; 1
 148:	a1 f4       	brne	.+40     	; 0x172 <DIO_vsetPINDir+0xe0>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
 14a:	a7 e3       	ldi	r26, 0x37	; 55
 14c:	b0 e0       	ldi	r27, 0x00	; 0
 14e:	e7 e3       	ldi	r30, 0x37	; 55
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	48 2f       	mov	r20, r24
 156:	8a 81       	ldd	r24, Y+2	; 0x02
 158:	28 2f       	mov	r18, r24
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	02 2e       	mov	r0, r18
 162:	02 c0       	rjmp	.+4      	; 0x168 <DIO_vsetPINDir+0xd6>
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	0a 94       	dec	r0
 16a:	e2 f7       	brpl	.-8      	; 0x164 <DIO_vsetPINDir+0xd2>
 16c:	84 2b       	or	r24, r20
 16e:	8c 93       	st	X, r24
 170:	6c c0       	rjmp	.+216    	; 0x24a <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
 172:	a7 e3       	ldi	r26, 0x37	; 55
 174:	b0 e0       	ldi	r27, 0x00	; 0
 176:	e7 e3       	ldi	r30, 0x37	; 55
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	48 2f       	mov	r20, r24
 17e:	8a 81       	ldd	r24, Y+2	; 0x02
 180:	28 2f       	mov	r18, r24
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	02 2e       	mov	r0, r18
 18a:	02 c0       	rjmp	.+4      	; 0x190 <DIO_vsetPINDir+0xfe>
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	0a 94       	dec	r0
 192:	e2 f7       	brpl	.-8      	; 0x18c <DIO_vsetPINDir+0xfa>
 194:	80 95       	com	r24
 196:	84 23       	and	r24, r20
 198:	8c 93       	st	X, r24
 19a:	57 c0       	rjmp	.+174    	; 0x24a <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'C':
		if(direction==1)
 19c:	8b 81       	ldd	r24, Y+3	; 0x03
 19e:	81 30       	cpi	r24, 0x01	; 1
 1a0:	a1 f4       	brne	.+40     	; 0x1ca <DIO_vsetPINDir+0x138>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
 1a2:	a4 e3       	ldi	r26, 0x34	; 52
 1a4:	b0 e0       	ldi	r27, 0x00	; 0
 1a6:	e4 e3       	ldi	r30, 0x34	; 52
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	48 2f       	mov	r20, r24
 1ae:	8a 81       	ldd	r24, Y+2	; 0x02
 1b0:	28 2f       	mov	r18, r24
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	02 2e       	mov	r0, r18
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <DIO_vsetPINDir+0x12e>
 1bc:	88 0f       	add	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	0a 94       	dec	r0
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <DIO_vsetPINDir+0x12a>
 1c4:	84 2b       	or	r24, r20
 1c6:	8c 93       	st	X, r24
 1c8:	40 c0       	rjmp	.+128    	; 0x24a <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
 1ca:	a4 e3       	ldi	r26, 0x34	; 52
 1cc:	b0 e0       	ldi	r27, 0x00	; 0
 1ce:	e4 e3       	ldi	r30, 0x34	; 52
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	48 2f       	mov	r20, r24
 1d6:	8a 81       	ldd	r24, Y+2	; 0x02
 1d8:	28 2f       	mov	r18, r24
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	02 2e       	mov	r0, r18
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <DIO_vsetPINDir+0x156>
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	0a 94       	dec	r0
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <DIO_vsetPINDir+0x152>
 1ec:	80 95       	com	r24
 1ee:	84 23       	and	r24, r20
 1f0:	8c 93       	st	X, r24
 1f2:	2b c0       	rjmp	.+86     	; 0x24a <DIO_vsetPINDir+0x1b8>
		}
		break;
		case 'D':
		if(direction==1)
 1f4:	8b 81       	ldd	r24, Y+3	; 0x03
 1f6:	81 30       	cpi	r24, 0x01	; 1
 1f8:	a1 f4       	brne	.+40     	; 0x222 <DIO_vsetPINDir+0x190>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
 1fa:	a1 e3       	ldi	r26, 0x31	; 49
 1fc:	b0 e0       	ldi	r27, 0x00	; 0
 1fe:	e1 e3       	ldi	r30, 0x31	; 49
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	48 2f       	mov	r20, r24
 206:	8a 81       	ldd	r24, Y+2	; 0x02
 208:	28 2f       	mov	r18, r24
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	02 2e       	mov	r0, r18
 212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_vsetPINDir+0x186>
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	0a 94       	dec	r0
 21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_vsetPINDir+0x182>
 21c:	84 2b       	or	r24, r20
 21e:	8c 93       	st	X, r24
 220:	14 c0       	rjmp	.+40     	; 0x24a <DIO_vsetPINDir+0x1b8>
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
 222:	a1 e3       	ldi	r26, 0x31	; 49
 224:	b0 e0       	ldi	r27, 0x00	; 0
 226:	e1 e3       	ldi	r30, 0x31	; 49
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	80 81       	ld	r24, Z
 22c:	48 2f       	mov	r20, r24
 22e:	8a 81       	ldd	r24, Y+2	; 0x02
 230:	28 2f       	mov	r18, r24
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	02 2e       	mov	r0, r18
 23a:	02 c0       	rjmp	.+4      	; 0x240 <DIO_vsetPINDir+0x1ae>
 23c:	88 0f       	add	r24, r24
 23e:	99 1f       	adc	r25, r25
 240:	0a 94       	dec	r0
 242:	e2 f7       	brpl	.-8      	; 0x23c <DIO_vsetPINDir+0x1aa>
 244:	80 95       	com	r24
 246:	84 23       	and	r24, r20
 248:	8c 93       	st	X, r24
		}
		break;
		default:
		break;
	}
}
 24a:	0f 90       	pop	r0
 24c:	0f 90       	pop	r0
 24e:	0f 90       	pop	r0
 250:	0f 90       	pop	r0
 252:	0f 90       	pop	r0
 254:	cf 91       	pop	r28
 256:	df 91       	pop	r29
 258:	08 95       	ret

0000025a <DIO_write>:


void DIO_write(unsigned char portname,unsigned char pinnumber,unsigned char outputvalue)
{
 25a:	df 93       	push	r29
 25c:	cf 93       	push	r28
 25e:	00 d0       	rcall	.+0      	; 0x260 <DIO_write+0x6>
 260:	00 d0       	rcall	.+0      	; 0x262 <DIO_write+0x8>
 262:	0f 92       	push	r0
 264:	cd b7       	in	r28, 0x3d	; 61
 266:	de b7       	in	r29, 0x3e	; 62
 268:	89 83       	std	Y+1, r24	; 0x01
 26a:	6a 83       	std	Y+2, r22	; 0x02
 26c:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
 26e:	89 81       	ldd	r24, Y+1	; 0x01
 270:	28 2f       	mov	r18, r24
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	3d 83       	std	Y+5, r19	; 0x05
 276:	2c 83       	std	Y+4, r18	; 0x04
 278:	8c 81       	ldd	r24, Y+4	; 0x04
 27a:	9d 81       	ldd	r25, Y+5	; 0x05
 27c:	82 34       	cpi	r24, 0x42	; 66
 27e:	91 05       	cpc	r25, r1
 280:	09 f4       	brne	.+2      	; 0x284 <DIO_write+0x2a>
 282:	44 c0       	rjmp	.+136    	; 0x30c <DIO_write+0xb2>
 284:	2c 81       	ldd	r18, Y+4	; 0x04
 286:	3d 81       	ldd	r19, Y+5	; 0x05
 288:	23 34       	cpi	r18, 0x43	; 67
 28a:	31 05       	cpc	r19, r1
 28c:	34 f4       	brge	.+12     	; 0x29a <DIO_write+0x40>
 28e:	8c 81       	ldd	r24, Y+4	; 0x04
 290:	9d 81       	ldd	r25, Y+5	; 0x05
 292:	81 34       	cpi	r24, 0x41	; 65
 294:	91 05       	cpc	r25, r1
 296:	71 f0       	breq	.+28     	; 0x2b4 <DIO_write+0x5a>
 298:	bc c0       	rjmp	.+376    	; 0x412 <DIO_write+0x1b8>
 29a:	2c 81       	ldd	r18, Y+4	; 0x04
 29c:	3d 81       	ldd	r19, Y+5	; 0x05
 29e:	23 34       	cpi	r18, 0x43	; 67
 2a0:	31 05       	cpc	r19, r1
 2a2:	09 f4       	brne	.+2      	; 0x2a6 <DIO_write+0x4c>
 2a4:	5f c0       	rjmp	.+190    	; 0x364 <DIO_write+0x10a>
 2a6:	8c 81       	ldd	r24, Y+4	; 0x04
 2a8:	9d 81       	ldd	r25, Y+5	; 0x05
 2aa:	84 34       	cpi	r24, 0x44	; 68
 2ac:	91 05       	cpc	r25, r1
 2ae:	09 f4       	brne	.+2      	; 0x2b2 <DIO_write+0x58>
 2b0:	85 c0       	rjmp	.+266    	; 0x3bc <DIO_write+0x162>
 2b2:	af c0       	rjmp	.+350    	; 0x412 <DIO_write+0x1b8>
	{
		case 'A' :

		if(outputvalue==1)
 2b4:	8b 81       	ldd	r24, Y+3	; 0x03
 2b6:	81 30       	cpi	r24, 0x01	; 1
 2b8:	a1 f4       	brne	.+40     	; 0x2e2 <DIO_write+0x88>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
 2ba:	ab e3       	ldi	r26, 0x3B	; 59
 2bc:	b0 e0       	ldi	r27, 0x00	; 0
 2be:	eb e3       	ldi	r30, 0x3B	; 59
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	80 81       	ld	r24, Z
 2c4:	48 2f       	mov	r20, r24
 2c6:	8a 81       	ldd	r24, Y+2	; 0x02
 2c8:	28 2f       	mov	r18, r24
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	02 2e       	mov	r0, r18
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_write+0x7e>
 2d4:	88 0f       	add	r24, r24
 2d6:	99 1f       	adc	r25, r25
 2d8:	0a 94       	dec	r0
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_write+0x7a>
 2dc:	84 2b       	or	r24, r20
 2de:	8c 93       	st	X, r24
 2e0:	98 c0       	rjmp	.+304    	; 0x412 <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
 2e2:	ab e3       	ldi	r26, 0x3B	; 59
 2e4:	b0 e0       	ldi	r27, 0x00	; 0
 2e6:	eb e3       	ldi	r30, 0x3B	; 59
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	80 81       	ld	r24, Z
 2ec:	48 2f       	mov	r20, r24
 2ee:	8a 81       	ldd	r24, Y+2	; 0x02
 2f0:	28 2f       	mov	r18, r24
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	02 2e       	mov	r0, r18
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <DIO_write+0xa6>
 2fc:	88 0f       	add	r24, r24
 2fe:	99 1f       	adc	r25, r25
 300:	0a 94       	dec	r0
 302:	e2 f7       	brpl	.-8      	; 0x2fc <DIO_write+0xa2>
 304:	80 95       	com	r24
 306:	84 23       	and	r24, r20
 308:	8c 93       	st	X, r24
 30a:	83 c0       	rjmp	.+262    	; 0x412 <DIO_write+0x1b8>
		}
		break ;
		case 'B':

		if(outputvalue==1)
 30c:	8b 81       	ldd	r24, Y+3	; 0x03
 30e:	81 30       	cpi	r24, 0x01	; 1
 310:	a1 f4       	brne	.+40     	; 0x33a <DIO_write+0xe0>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
 312:	a8 e3       	ldi	r26, 0x38	; 56
 314:	b0 e0       	ldi	r27, 0x00	; 0
 316:	e8 e3       	ldi	r30, 0x38	; 56
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	80 81       	ld	r24, Z
 31c:	48 2f       	mov	r20, r24
 31e:	8a 81       	ldd	r24, Y+2	; 0x02
 320:	28 2f       	mov	r18, r24
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	02 2e       	mov	r0, r18
 32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_write+0xd6>
 32c:	88 0f       	add	r24, r24
 32e:	99 1f       	adc	r25, r25
 330:	0a 94       	dec	r0
 332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_write+0xd2>
 334:	84 2b       	or	r24, r20
 336:	8c 93       	st	X, r24
 338:	6c c0       	rjmp	.+216    	; 0x412 <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
 33a:	a8 e3       	ldi	r26, 0x38	; 56
 33c:	b0 e0       	ldi	r27, 0x00	; 0
 33e:	e8 e3       	ldi	r30, 0x38	; 56
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	80 81       	ld	r24, Z
 344:	48 2f       	mov	r20, r24
 346:	8a 81       	ldd	r24, Y+2	; 0x02
 348:	28 2f       	mov	r18, r24
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	02 2e       	mov	r0, r18
 352:	02 c0       	rjmp	.+4      	; 0x358 <DIO_write+0xfe>
 354:	88 0f       	add	r24, r24
 356:	99 1f       	adc	r25, r25
 358:	0a 94       	dec	r0
 35a:	e2 f7       	brpl	.-8      	; 0x354 <DIO_write+0xfa>
 35c:	80 95       	com	r24
 35e:	84 23       	and	r24, r20
 360:	8c 93       	st	X, r24
 362:	57 c0       	rjmp	.+174    	; 0x412 <DIO_write+0x1b8>
		}
		break ;
		case 'C' :

		if(outputvalue==1)
 364:	8b 81       	ldd	r24, Y+3	; 0x03
 366:	81 30       	cpi	r24, 0x01	; 1
 368:	a1 f4       	brne	.+40     	; 0x392 <DIO_write+0x138>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
 36a:	a5 e3       	ldi	r26, 0x35	; 53
 36c:	b0 e0       	ldi	r27, 0x00	; 0
 36e:	e5 e3       	ldi	r30, 0x35	; 53
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	80 81       	ld	r24, Z
 374:	48 2f       	mov	r20, r24
 376:	8a 81       	ldd	r24, Y+2	; 0x02
 378:	28 2f       	mov	r18, r24
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	02 2e       	mov	r0, r18
 382:	02 c0       	rjmp	.+4      	; 0x388 <DIO_write+0x12e>
 384:	88 0f       	add	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	0a 94       	dec	r0
 38a:	e2 f7       	brpl	.-8      	; 0x384 <DIO_write+0x12a>
 38c:	84 2b       	or	r24, r20
 38e:	8c 93       	st	X, r24
 390:	40 c0       	rjmp	.+128    	; 0x412 <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
 392:	a5 e3       	ldi	r26, 0x35	; 53
 394:	b0 e0       	ldi	r27, 0x00	; 0
 396:	e5 e3       	ldi	r30, 0x35	; 53
 398:	f0 e0       	ldi	r31, 0x00	; 0
 39a:	80 81       	ld	r24, Z
 39c:	48 2f       	mov	r20, r24
 39e:	8a 81       	ldd	r24, Y+2	; 0x02
 3a0:	28 2f       	mov	r18, r24
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	02 2e       	mov	r0, r18
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <DIO_write+0x156>
 3ac:	88 0f       	add	r24, r24
 3ae:	99 1f       	adc	r25, r25
 3b0:	0a 94       	dec	r0
 3b2:	e2 f7       	brpl	.-8      	; 0x3ac <DIO_write+0x152>
 3b4:	80 95       	com	r24
 3b6:	84 23       	and	r24, r20
 3b8:	8c 93       	st	X, r24
 3ba:	2b c0       	rjmp	.+86     	; 0x412 <DIO_write+0x1b8>
		}
		break ;
		case 'D':

		if(outputvalue==1)
 3bc:	8b 81       	ldd	r24, Y+3	; 0x03
 3be:	81 30       	cpi	r24, 0x01	; 1
 3c0:	a1 f4       	brne	.+40     	; 0x3ea <DIO_write+0x190>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
 3c2:	a2 e3       	ldi	r26, 0x32	; 50
 3c4:	b0 e0       	ldi	r27, 0x00	; 0
 3c6:	e2 e3       	ldi	r30, 0x32	; 50
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	80 81       	ld	r24, Z
 3cc:	48 2f       	mov	r20, r24
 3ce:	8a 81       	ldd	r24, Y+2	; 0x02
 3d0:	28 2f       	mov	r18, r24
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	02 2e       	mov	r0, r18
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <DIO_write+0x186>
 3dc:	88 0f       	add	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	0a 94       	dec	r0
 3e2:	e2 f7       	brpl	.-8      	; 0x3dc <DIO_write+0x182>
 3e4:	84 2b       	or	r24, r20
 3e6:	8c 93       	st	X, r24
 3e8:	14 c0       	rjmp	.+40     	; 0x412 <DIO_write+0x1b8>
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
 3ea:	a2 e3       	ldi	r26, 0x32	; 50
 3ec:	b0 e0       	ldi	r27, 0x00	; 0
 3ee:	e2 e3       	ldi	r30, 0x32	; 50
 3f0:	f0 e0       	ldi	r31, 0x00	; 0
 3f2:	80 81       	ld	r24, Z
 3f4:	48 2f       	mov	r20, r24
 3f6:	8a 81       	ldd	r24, Y+2	; 0x02
 3f8:	28 2f       	mov	r18, r24
 3fa:	30 e0       	ldi	r19, 0x00	; 0
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	02 2e       	mov	r0, r18
 402:	02 c0       	rjmp	.+4      	; 0x408 <DIO_write+0x1ae>
 404:	88 0f       	add	r24, r24
 406:	99 1f       	adc	r25, r25
 408:	0a 94       	dec	r0
 40a:	e2 f7       	brpl	.-8      	; 0x404 <DIO_write+0x1aa>
 40c:	80 95       	com	r24
 40e:	84 23       	and	r24, r20
 410:	8c 93       	st	X, r24
		}
		break ;
		default: break ;
	}
}
 412:	0f 90       	pop	r0
 414:	0f 90       	pop	r0
 416:	0f 90       	pop	r0
 418:	0f 90       	pop	r0
 41a:	0f 90       	pop	r0
 41c:	cf 91       	pop	r28
 41e:	df 91       	pop	r29
 420:	08 95       	ret

00000422 <DIO_u8read>:


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
 422:	df 93       	push	r29
 424:	cf 93       	push	r28
 426:	00 d0       	rcall	.+0      	; 0x428 <DIO_u8read+0x6>
 428:	00 d0       	rcall	.+0      	; 0x42a <DIO_u8read+0x8>
 42a:	0f 92       	push	r0
 42c:	cd b7       	in	r28, 0x3d	; 61
 42e:	de b7       	in	r29, 0x3e	; 62
 430:	8a 83       	std	Y+2, r24	; 0x02
 432:	6b 83       	std	Y+3, r22	; 0x03
	unsigned char return_value=0;
 434:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
 436:	8a 81       	ldd	r24, Y+2	; 0x02
 438:	28 2f       	mov	r18, r24
 43a:	30 e0       	ldi	r19, 0x00	; 0
 43c:	3d 83       	std	Y+5, r19	; 0x05
 43e:	2c 83       	std	Y+4, r18	; 0x04
 440:	4c 81       	ldd	r20, Y+4	; 0x04
 442:	5d 81       	ldd	r21, Y+5	; 0x05
 444:	42 34       	cpi	r20, 0x42	; 66
 446:	51 05       	cpc	r21, r1
 448:	b1 f1       	breq	.+108    	; 0x4b6 <DIO_u8read+0x94>
 44a:	8c 81       	ldd	r24, Y+4	; 0x04
 44c:	9d 81       	ldd	r25, Y+5	; 0x05
 44e:	83 34       	cpi	r24, 0x43	; 67
 450:	91 05       	cpc	r25, r1
 452:	34 f4       	brge	.+12     	; 0x460 <DIO_u8read+0x3e>
 454:	2c 81       	ldd	r18, Y+4	; 0x04
 456:	3d 81       	ldd	r19, Y+5	; 0x05
 458:	21 34       	cpi	r18, 0x41	; 65
 45a:	31 05       	cpc	r19, r1
 45c:	71 f0       	breq	.+28     	; 0x47a <DIO_u8read+0x58>
 45e:	84 c0       	rjmp	.+264    	; 0x568 <DIO_u8read+0x146>
 460:	4c 81       	ldd	r20, Y+4	; 0x04
 462:	5d 81       	ldd	r21, Y+5	; 0x05
 464:	43 34       	cpi	r20, 0x43	; 67
 466:	51 05       	cpc	r21, r1
 468:	09 f4       	brne	.+2      	; 0x46c <DIO_u8read+0x4a>
 46a:	43 c0       	rjmp	.+134    	; 0x4f2 <DIO_u8read+0xd0>
 46c:	8c 81       	ldd	r24, Y+4	; 0x04
 46e:	9d 81       	ldd	r25, Y+5	; 0x05
 470:	84 34       	cpi	r24, 0x44	; 68
 472:	91 05       	cpc	r25, r1
 474:	09 f4       	brne	.+2      	; 0x478 <DIO_u8read+0x56>
 476:	5b c0       	rjmp	.+182    	; 0x52e <DIO_u8read+0x10c>
 478:	77 c0       	rjmp	.+238    	; 0x568 <DIO_u8read+0x146>
	{
		case 'A' :
		return_value=READ_BIT(PINA,pinnumber);//Read the value from the given pin in port A
 47a:	e9 e3       	ldi	r30, 0x39	; 57
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	80 81       	ld	r24, Z
 480:	48 2f       	mov	r20, r24
 482:	50 e0       	ldi	r21, 0x00	; 0
 484:	8b 81       	ldd	r24, Y+3	; 0x03
 486:	28 2f       	mov	r18, r24
 488:	30 e0       	ldi	r19, 0x00	; 0
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	02 c0       	rjmp	.+4      	; 0x494 <DIO_u8read+0x72>
 490:	88 0f       	add	r24, r24
 492:	99 1f       	adc	r25, r25
 494:	2a 95       	dec	r18
 496:	e2 f7       	brpl	.-8      	; 0x490 <DIO_u8read+0x6e>
 498:	9a 01       	movw	r18, r20
 49a:	28 23       	and	r18, r24
 49c:	39 23       	and	r19, r25
 49e:	8b 81       	ldd	r24, Y+3	; 0x03
 4a0:	88 2f       	mov	r24, r24
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	a9 01       	movw	r20, r18
 4a6:	02 c0       	rjmp	.+4      	; 0x4ac <DIO_u8read+0x8a>
 4a8:	55 95       	asr	r21
 4aa:	47 95       	ror	r20
 4ac:	8a 95       	dec	r24
 4ae:	e2 f7       	brpl	.-8      	; 0x4a8 <DIO_u8read+0x86>
 4b0:	ca 01       	movw	r24, r20
 4b2:	89 83       	std	Y+1, r24	; 0x01
 4b4:	59 c0       	rjmp	.+178    	; 0x568 <DIO_u8read+0x146>
		break;

		case 'B' :
		return_value=READ_BIT(PINB,pinnumber);//Read the value from the given pin in port B
 4b6:	e6 e3       	ldi	r30, 0x36	; 54
 4b8:	f0 e0       	ldi	r31, 0x00	; 0
 4ba:	80 81       	ld	r24, Z
 4bc:	48 2f       	mov	r20, r24
 4be:	50 e0       	ldi	r21, 0x00	; 0
 4c0:	8b 81       	ldd	r24, Y+3	; 0x03
 4c2:	28 2f       	mov	r18, r24
 4c4:	30 e0       	ldi	r19, 0x00	; 0
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <DIO_u8read+0xae>
 4cc:	88 0f       	add	r24, r24
 4ce:	99 1f       	adc	r25, r25
 4d0:	2a 95       	dec	r18
 4d2:	e2 f7       	brpl	.-8      	; 0x4cc <DIO_u8read+0xaa>
 4d4:	9a 01       	movw	r18, r20
 4d6:	28 23       	and	r18, r24
 4d8:	39 23       	and	r19, r25
 4da:	8b 81       	ldd	r24, Y+3	; 0x03
 4dc:	88 2f       	mov	r24, r24
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	a9 01       	movw	r20, r18
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <DIO_u8read+0xc6>
 4e4:	55 95       	asr	r21
 4e6:	47 95       	ror	r20
 4e8:	8a 95       	dec	r24
 4ea:	e2 f7       	brpl	.-8      	; 0x4e4 <DIO_u8read+0xc2>
 4ec:	ca 01       	movw	r24, r20
 4ee:	89 83       	std	Y+1, r24	; 0x01
 4f0:	3b c0       	rjmp	.+118    	; 0x568 <DIO_u8read+0x146>
		break;

		case 'C' :
		return_value=READ_BIT(PINC,pinnumber);//Read the value from the given pin in port C
 4f2:	e3 e3       	ldi	r30, 0x33	; 51
 4f4:	f0 e0       	ldi	r31, 0x00	; 0
 4f6:	80 81       	ld	r24, Z
 4f8:	48 2f       	mov	r20, r24
 4fa:	50 e0       	ldi	r21, 0x00	; 0
 4fc:	8b 81       	ldd	r24, Y+3	; 0x03
 4fe:	28 2f       	mov	r18, r24
 500:	30 e0       	ldi	r19, 0x00	; 0
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	02 c0       	rjmp	.+4      	; 0x50c <DIO_u8read+0xea>
 508:	88 0f       	add	r24, r24
 50a:	99 1f       	adc	r25, r25
 50c:	2a 95       	dec	r18
 50e:	e2 f7       	brpl	.-8      	; 0x508 <DIO_u8read+0xe6>
 510:	9a 01       	movw	r18, r20
 512:	28 23       	and	r18, r24
 514:	39 23       	and	r19, r25
 516:	8b 81       	ldd	r24, Y+3	; 0x03
 518:	88 2f       	mov	r24, r24
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	a9 01       	movw	r20, r18
 51e:	02 c0       	rjmp	.+4      	; 0x524 <DIO_u8read+0x102>
 520:	55 95       	asr	r21
 522:	47 95       	ror	r20
 524:	8a 95       	dec	r24
 526:	e2 f7       	brpl	.-8      	; 0x520 <DIO_u8read+0xfe>
 528:	ca 01       	movw	r24, r20
 52a:	89 83       	std	Y+1, r24	; 0x01
 52c:	1d c0       	rjmp	.+58     	; 0x568 <DIO_u8read+0x146>
		break;

		case 'D' :
		return_value=READ_BIT(PIND,pinnumber);//Read the value from the given pin in port D
 52e:	e0 e3       	ldi	r30, 0x30	; 48
 530:	f0 e0       	ldi	r31, 0x00	; 0
 532:	80 81       	ld	r24, Z
 534:	48 2f       	mov	r20, r24
 536:	50 e0       	ldi	r21, 0x00	; 0
 538:	8b 81       	ldd	r24, Y+3	; 0x03
 53a:	28 2f       	mov	r18, r24
 53c:	30 e0       	ldi	r19, 0x00	; 0
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	02 c0       	rjmp	.+4      	; 0x548 <DIO_u8read+0x126>
 544:	88 0f       	add	r24, r24
 546:	99 1f       	adc	r25, r25
 548:	2a 95       	dec	r18
 54a:	e2 f7       	brpl	.-8      	; 0x544 <DIO_u8read+0x122>
 54c:	9a 01       	movw	r18, r20
 54e:	28 23       	and	r18, r24
 550:	39 23       	and	r19, r25
 552:	8b 81       	ldd	r24, Y+3	; 0x03
 554:	88 2f       	mov	r24, r24
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	a9 01       	movw	r20, r18
 55a:	02 c0       	rjmp	.+4      	; 0x560 <DIO_u8read+0x13e>
 55c:	55 95       	asr	r21
 55e:	47 95       	ror	r20
 560:	8a 95       	dec	r24
 562:	e2 f7       	brpl	.-8      	; 0x55c <DIO_u8read+0x13a>
 564:	ca 01       	movw	r24, r20
 566:	89 83       	std	Y+1, r24	; 0x01
		break;
		default:
		break;
	}
	return return_value ;
 568:	89 81       	ldd	r24, Y+1	; 0x01
}
 56a:	0f 90       	pop	r0
 56c:	0f 90       	pop	r0
 56e:	0f 90       	pop	r0
 570:	0f 90       	pop	r0
 572:	0f 90       	pop	r0
 574:	cf 91       	pop	r28
 576:	df 91       	pop	r29
 578:	08 95       	ret

0000057a <DIO_toggle>:
void DIO_toggle(unsigned char portname,unsigned char pinnumber)
{
 57a:	df 93       	push	r29
 57c:	cf 93       	push	r28
 57e:	00 d0       	rcall	.+0      	; 0x580 <DIO_toggle+0x6>
 580:	00 d0       	rcall	.+0      	; 0x582 <DIO_toggle+0x8>
 582:	cd b7       	in	r28, 0x3d	; 61
 584:	de b7       	in	r29, 0x3e	; 62
 586:	89 83       	std	Y+1, r24	; 0x01
 588:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
 58a:	89 81       	ldd	r24, Y+1	; 0x01
 58c:	28 2f       	mov	r18, r24
 58e:	30 e0       	ldi	r19, 0x00	; 0
 590:	3c 83       	std	Y+4, r19	; 0x04
 592:	2b 83       	std	Y+3, r18	; 0x03
 594:	8b 81       	ldd	r24, Y+3	; 0x03
 596:	9c 81       	ldd	r25, Y+4	; 0x04
 598:	82 34       	cpi	r24, 0x42	; 66
 59a:	91 05       	cpc	r25, r1
 59c:	51 f1       	breq	.+84     	; 0x5f2 <DIO_toggle+0x78>
 59e:	2b 81       	ldd	r18, Y+3	; 0x03
 5a0:	3c 81       	ldd	r19, Y+4	; 0x04
 5a2:	23 34       	cpi	r18, 0x43	; 67
 5a4:	31 05       	cpc	r19, r1
 5a6:	34 f4       	brge	.+12     	; 0x5b4 <DIO_toggle+0x3a>
 5a8:	8b 81       	ldd	r24, Y+3	; 0x03
 5aa:	9c 81       	ldd	r25, Y+4	; 0x04
 5ac:	81 34       	cpi	r24, 0x41	; 65
 5ae:	91 05       	cpc	r25, r1
 5b0:	61 f0       	breq	.+24     	; 0x5ca <DIO_toggle+0x50>
 5b2:	5a c0       	rjmp	.+180    	; 0x668 <DIO_toggle+0xee>
 5b4:	2b 81       	ldd	r18, Y+3	; 0x03
 5b6:	3c 81       	ldd	r19, Y+4	; 0x04
 5b8:	23 34       	cpi	r18, 0x43	; 67
 5ba:	31 05       	cpc	r19, r1
 5bc:	71 f1       	breq	.+92     	; 0x61a <DIO_toggle+0xa0>
 5be:	8b 81       	ldd	r24, Y+3	; 0x03
 5c0:	9c 81       	ldd	r25, Y+4	; 0x04
 5c2:	84 34       	cpi	r24, 0x44	; 68
 5c4:	91 05       	cpc	r25, r1
 5c6:	e9 f1       	breq	.+122    	; 0x642 <DIO_toggle+0xc8>
 5c8:	4f c0       	rjmp	.+158    	; 0x668 <DIO_toggle+0xee>
	{
		case 'A':
		TOG_BIT(PORTA,pinnumber);//Toggle the value of the given pin in port A
 5ca:	ab e3       	ldi	r26, 0x3B	; 59
 5cc:	b0 e0       	ldi	r27, 0x00	; 0
 5ce:	eb e3       	ldi	r30, 0x3B	; 59
 5d0:	f0 e0       	ldi	r31, 0x00	; 0
 5d2:	80 81       	ld	r24, Z
 5d4:	48 2f       	mov	r20, r24
 5d6:	8a 81       	ldd	r24, Y+2	; 0x02
 5d8:	28 2f       	mov	r18, r24
 5da:	30 e0       	ldi	r19, 0x00	; 0
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	02 2e       	mov	r0, r18
 5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <DIO_toggle+0x6e>
 5e4:	88 0f       	add	r24, r24
 5e6:	99 1f       	adc	r25, r25
 5e8:	0a 94       	dec	r0
 5ea:	e2 f7       	brpl	.-8      	; 0x5e4 <DIO_toggle+0x6a>
 5ec:	84 27       	eor	r24, r20
 5ee:	8c 93       	st	X, r24
 5f0:	3b c0       	rjmp	.+118    	; 0x668 <DIO_toggle+0xee>
		break;
		case 'B':
		TOG_BIT(PORTB,pinnumber);//Toggle the value of the given pin in port B
 5f2:	a8 e3       	ldi	r26, 0x38	; 56
 5f4:	b0 e0       	ldi	r27, 0x00	; 0
 5f6:	e8 e3       	ldi	r30, 0x38	; 56
 5f8:	f0 e0       	ldi	r31, 0x00	; 0
 5fa:	80 81       	ld	r24, Z
 5fc:	48 2f       	mov	r20, r24
 5fe:	8a 81       	ldd	r24, Y+2	; 0x02
 600:	28 2f       	mov	r18, r24
 602:	30 e0       	ldi	r19, 0x00	; 0
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	02 2e       	mov	r0, r18
 60a:	02 c0       	rjmp	.+4      	; 0x610 <DIO_toggle+0x96>
 60c:	88 0f       	add	r24, r24
 60e:	99 1f       	adc	r25, r25
 610:	0a 94       	dec	r0
 612:	e2 f7       	brpl	.-8      	; 0x60c <DIO_toggle+0x92>
 614:	84 27       	eor	r24, r20
 616:	8c 93       	st	X, r24
 618:	27 c0       	rjmp	.+78     	; 0x668 <DIO_toggle+0xee>
		break;
		case 'C':
		TOG_BIT(PORTC,pinnumber);//Toggle the value of the given pin in port C
 61a:	a5 e3       	ldi	r26, 0x35	; 53
 61c:	b0 e0       	ldi	r27, 0x00	; 0
 61e:	e5 e3       	ldi	r30, 0x35	; 53
 620:	f0 e0       	ldi	r31, 0x00	; 0
 622:	80 81       	ld	r24, Z
 624:	48 2f       	mov	r20, r24
 626:	8a 81       	ldd	r24, Y+2	; 0x02
 628:	28 2f       	mov	r18, r24
 62a:	30 e0       	ldi	r19, 0x00	; 0
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	02 2e       	mov	r0, r18
 632:	02 c0       	rjmp	.+4      	; 0x638 <DIO_toggle+0xbe>
 634:	88 0f       	add	r24, r24
 636:	99 1f       	adc	r25, r25
 638:	0a 94       	dec	r0
 63a:	e2 f7       	brpl	.-8      	; 0x634 <DIO_toggle+0xba>
 63c:	84 27       	eor	r24, r20
 63e:	8c 93       	st	X, r24
 640:	13 c0       	rjmp	.+38     	; 0x668 <DIO_toggle+0xee>
		break;
		case 'D':
		TOG_BIT(PORTD,pinnumber);//Toggle the value of the given pin in port D
 642:	a2 e3       	ldi	r26, 0x32	; 50
 644:	b0 e0       	ldi	r27, 0x00	; 0
 646:	e2 e3       	ldi	r30, 0x32	; 50
 648:	f0 e0       	ldi	r31, 0x00	; 0
 64a:	80 81       	ld	r24, Z
 64c:	48 2f       	mov	r20, r24
 64e:	8a 81       	ldd	r24, Y+2	; 0x02
 650:	28 2f       	mov	r18, r24
 652:	30 e0       	ldi	r19, 0x00	; 0
 654:	81 e0       	ldi	r24, 0x01	; 1
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	02 2e       	mov	r0, r18
 65a:	02 c0       	rjmp	.+4      	; 0x660 <DIO_toggle+0xe6>
 65c:	88 0f       	add	r24, r24
 65e:	99 1f       	adc	r25, r25
 660:	0a 94       	dec	r0
 662:	e2 f7       	brpl	.-8      	; 0x65c <DIO_toggle+0xe2>
 664:	84 27       	eor	r24, r20
 666:	8c 93       	st	X, r24
		break;
		default: break;
	}
}
 668:	0f 90       	pop	r0
 66a:	0f 90       	pop	r0
 66c:	0f 90       	pop	r0
 66e:	0f 90       	pop	r0
 670:	cf 91       	pop	r28
 672:	df 91       	pop	r29
 674:	08 95       	ret

00000676 <DIO_set_port_direction>:
void DIO_set_port_direction(unsigned char portname,unsigned char direction)
{
 676:	df 93       	push	r29
 678:	cf 93       	push	r28
 67a:	00 d0       	rcall	.+0      	; 0x67c <DIO_set_port_direction+0x6>
 67c:	00 d0       	rcall	.+0      	; 0x67e <DIO_set_port_direction+0x8>
 67e:	cd b7       	in	r28, 0x3d	; 61
 680:	de b7       	in	r29, 0x3e	; 62
 682:	89 83       	std	Y+1, r24	; 0x01
 684:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
 686:	89 81       	ldd	r24, Y+1	; 0x01
 688:	28 2f       	mov	r18, r24
 68a:	30 e0       	ldi	r19, 0x00	; 0
 68c:	3c 83       	std	Y+4, r19	; 0x04
 68e:	2b 83       	std	Y+3, r18	; 0x03
 690:	8b 81       	ldd	r24, Y+3	; 0x03
 692:	9c 81       	ldd	r25, Y+4	; 0x04
 694:	82 34       	cpi	r24, 0x42	; 66
 696:	91 05       	cpc	r25, r1
 698:	d9 f0       	breq	.+54     	; 0x6d0 <DIO_set_port_direction+0x5a>
 69a:	2b 81       	ldd	r18, Y+3	; 0x03
 69c:	3c 81       	ldd	r19, Y+4	; 0x04
 69e:	23 34       	cpi	r18, 0x43	; 67
 6a0:	31 05       	cpc	r19, r1
 6a2:	34 f4       	brge	.+12     	; 0x6b0 <DIO_set_port_direction+0x3a>
 6a4:	8b 81       	ldd	r24, Y+3	; 0x03
 6a6:	9c 81       	ldd	r25, Y+4	; 0x04
 6a8:	81 34       	cpi	r24, 0x41	; 65
 6aa:	91 05       	cpc	r25, r1
 6ac:	61 f0       	breq	.+24     	; 0x6c6 <DIO_set_port_direction+0x50>
 6ae:	1e c0       	rjmp	.+60     	; 0x6ec <DIO_set_port_direction+0x76>
 6b0:	2b 81       	ldd	r18, Y+3	; 0x03
 6b2:	3c 81       	ldd	r19, Y+4	; 0x04
 6b4:	23 34       	cpi	r18, 0x43	; 67
 6b6:	31 05       	cpc	r19, r1
 6b8:	81 f0       	breq	.+32     	; 0x6da <DIO_set_port_direction+0x64>
 6ba:	8b 81       	ldd	r24, Y+3	; 0x03
 6bc:	9c 81       	ldd	r25, Y+4	; 0x04
 6be:	84 34       	cpi	r24, 0x44	; 68
 6c0:	91 05       	cpc	r25, r1
 6c2:	81 f0       	breq	.+32     	; 0x6e4 <DIO_set_port_direction+0x6e>
 6c4:	13 c0       	rjmp	.+38     	; 0x6ec <DIO_set_port_direction+0x76>
	{
		case 'A' :
		DDRA=direction; //set the direction of port A
 6c6:	ea e3       	ldi	r30, 0x3A	; 58
 6c8:	f0 e0       	ldi	r31, 0x00	; 0
 6ca:	8a 81       	ldd	r24, Y+2	; 0x02
 6cc:	80 83       	st	Z, r24
 6ce:	0e c0       	rjmp	.+28     	; 0x6ec <DIO_set_port_direction+0x76>
		break ;
		case 'B':
		DDRB=direction; //set the direction of port B
 6d0:	e7 e3       	ldi	r30, 0x37	; 55
 6d2:	f0 e0       	ldi	r31, 0x00	; 0
 6d4:	8a 81       	ldd	r24, Y+2	; 0x02
 6d6:	80 83       	st	Z, r24
 6d8:	09 c0       	rjmp	.+18     	; 0x6ec <DIO_set_port_direction+0x76>
		break ;
		case 'C' :
		DDRC=direction; //set the direction of port C
 6da:	e4 e3       	ldi	r30, 0x34	; 52
 6dc:	f0 e0       	ldi	r31, 0x00	; 0
 6de:	8a 81       	ldd	r24, Y+2	; 0x02
 6e0:	80 83       	st	Z, r24
 6e2:	04 c0       	rjmp	.+8      	; 0x6ec <DIO_set_port_direction+0x76>
		break ;
		case 'D':
		DDRD=direction; //set the direction of port D
 6e4:	e1 e3       	ldi	r30, 0x31	; 49
 6e6:	f0 e0       	ldi	r31, 0x00	; 0
 6e8:	8a 81       	ldd	r24, Y+2	; 0x02
 6ea:	80 83       	st	Z, r24
		break ;
		default:
		break ;
	}

}
 6ec:	0f 90       	pop	r0
 6ee:	0f 90       	pop	r0
 6f0:	0f 90       	pop	r0
 6f2:	0f 90       	pop	r0
 6f4:	cf 91       	pop	r28
 6f6:	df 91       	pop	r29
 6f8:	08 95       	ret

000006fa <DIO_write_port>:
void DIO_write_port(unsigned char portname,unsigned char portvalue)
{
 6fa:	df 93       	push	r29
 6fc:	cf 93       	push	r28
 6fe:	00 d0       	rcall	.+0      	; 0x700 <DIO_write_port+0x6>
 700:	00 d0       	rcall	.+0      	; 0x702 <DIO_write_port+0x8>
 702:	cd b7       	in	r28, 0x3d	; 61
 704:	de b7       	in	r29, 0x3e	; 62
 706:	89 83       	std	Y+1, r24	; 0x01
 708:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
 70a:	89 81       	ldd	r24, Y+1	; 0x01
 70c:	28 2f       	mov	r18, r24
 70e:	30 e0       	ldi	r19, 0x00	; 0
 710:	3c 83       	std	Y+4, r19	; 0x04
 712:	2b 83       	std	Y+3, r18	; 0x03
 714:	8b 81       	ldd	r24, Y+3	; 0x03
 716:	9c 81       	ldd	r25, Y+4	; 0x04
 718:	82 34       	cpi	r24, 0x42	; 66
 71a:	91 05       	cpc	r25, r1
 71c:	d9 f0       	breq	.+54     	; 0x754 <DIO_write_port+0x5a>
 71e:	2b 81       	ldd	r18, Y+3	; 0x03
 720:	3c 81       	ldd	r19, Y+4	; 0x04
 722:	23 34       	cpi	r18, 0x43	; 67
 724:	31 05       	cpc	r19, r1
 726:	34 f4       	brge	.+12     	; 0x734 <DIO_write_port+0x3a>
 728:	8b 81       	ldd	r24, Y+3	; 0x03
 72a:	9c 81       	ldd	r25, Y+4	; 0x04
 72c:	81 34       	cpi	r24, 0x41	; 65
 72e:	91 05       	cpc	r25, r1
 730:	61 f0       	breq	.+24     	; 0x74a <DIO_write_port+0x50>
 732:	1e c0       	rjmp	.+60     	; 0x770 <DIO_write_port+0x76>
 734:	2b 81       	ldd	r18, Y+3	; 0x03
 736:	3c 81       	ldd	r19, Y+4	; 0x04
 738:	23 34       	cpi	r18, 0x43	; 67
 73a:	31 05       	cpc	r19, r1
 73c:	81 f0       	breq	.+32     	; 0x75e <DIO_write_port+0x64>
 73e:	8b 81       	ldd	r24, Y+3	; 0x03
 740:	9c 81       	ldd	r25, Y+4	; 0x04
 742:	84 34       	cpi	r24, 0x44	; 68
 744:	91 05       	cpc	r25, r1
 746:	81 f0       	breq	.+32     	; 0x768 <DIO_write_port+0x6e>
 748:	13 c0       	rjmp	.+38     	; 0x770 <DIO_write_port+0x76>
	{
		case 'A' :
		PORTA=portvalue; //Write the given value to the port A
 74a:	eb e3       	ldi	r30, 0x3B	; 59
 74c:	f0 e0       	ldi	r31, 0x00	; 0
 74e:	8a 81       	ldd	r24, Y+2	; 0x02
 750:	80 83       	st	Z, r24
 752:	0e c0       	rjmp	.+28     	; 0x770 <DIO_write_port+0x76>
		break ;
		case 'B':
		PORTB=portvalue; //Write the given value to the port B
 754:	e8 e3       	ldi	r30, 0x38	; 56
 756:	f0 e0       	ldi	r31, 0x00	; 0
 758:	8a 81       	ldd	r24, Y+2	; 0x02
 75a:	80 83       	st	Z, r24
 75c:	09 c0       	rjmp	.+18     	; 0x770 <DIO_write_port+0x76>
		break ;
		case 'C' :
		PORTC=portvalue; //Write the given value to the port C
 75e:	e5 e3       	ldi	r30, 0x35	; 53
 760:	f0 e0       	ldi	r31, 0x00	; 0
 762:	8a 81       	ldd	r24, Y+2	; 0x02
 764:	80 83       	st	Z, r24
 766:	04 c0       	rjmp	.+8      	; 0x770 <DIO_write_port+0x76>
		break ;
		case 'D':
		PORTD=portvalue; //Write the given value to the port D
 768:	e2 e3       	ldi	r30, 0x32	; 50
 76a:	f0 e0       	ldi	r31, 0x00	; 0
 76c:	8a 81       	ldd	r24, Y+2	; 0x02
 76e:	80 83       	st	Z, r24
		break ;
		default:
		 break ;
	}
}
 770:	0f 90       	pop	r0
 772:	0f 90       	pop	r0
 774:	0f 90       	pop	r0
 776:	0f 90       	pop	r0
 778:	cf 91       	pop	r28
 77a:	df 91       	pop	r29
 77c:	08 95       	ret

0000077e <DIO_read_port>:

unsigned char DIO_read_port(unsigned char portname)
{
 77e:	df 93       	push	r29
 780:	cf 93       	push	r28
 782:	00 d0       	rcall	.+0      	; 0x784 <DIO_read_port+0x6>
 784:	00 d0       	rcall	.+0      	; 0x786 <DIO_read_port+0x8>
 786:	cd b7       	in	r28, 0x3d	; 61
 788:	de b7       	in	r29, 0x3e	; 62
 78a:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char return_val=0;
 78c:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
 78e:	8a 81       	ldd	r24, Y+2	; 0x02
 790:	28 2f       	mov	r18, r24
 792:	30 e0       	ldi	r19, 0x00	; 0
 794:	3c 83       	std	Y+4, r19	; 0x04
 796:	2b 83       	std	Y+3, r18	; 0x03
 798:	8b 81       	ldd	r24, Y+3	; 0x03
 79a:	9c 81       	ldd	r25, Y+4	; 0x04
 79c:	82 34       	cpi	r24, 0x42	; 66
 79e:	91 05       	cpc	r25, r1
 7a0:	d9 f0       	breq	.+54     	; 0x7d8 <DIO_read_port+0x5a>
 7a2:	2b 81       	ldd	r18, Y+3	; 0x03
 7a4:	3c 81       	ldd	r19, Y+4	; 0x04
 7a6:	23 34       	cpi	r18, 0x43	; 67
 7a8:	31 05       	cpc	r19, r1
 7aa:	34 f4       	brge	.+12     	; 0x7b8 <DIO_read_port+0x3a>
 7ac:	8b 81       	ldd	r24, Y+3	; 0x03
 7ae:	9c 81       	ldd	r25, Y+4	; 0x04
 7b0:	81 34       	cpi	r24, 0x41	; 65
 7b2:	91 05       	cpc	r25, r1
 7b4:	61 f0       	breq	.+24     	; 0x7ce <DIO_read_port+0x50>
 7b6:	1e c0       	rjmp	.+60     	; 0x7f4 <DIO_read_port+0x76>
 7b8:	2b 81       	ldd	r18, Y+3	; 0x03
 7ba:	3c 81       	ldd	r19, Y+4	; 0x04
 7bc:	23 34       	cpi	r18, 0x43	; 67
 7be:	31 05       	cpc	r19, r1
 7c0:	81 f0       	breq	.+32     	; 0x7e2 <DIO_read_port+0x64>
 7c2:	8b 81       	ldd	r24, Y+3	; 0x03
 7c4:	9c 81       	ldd	r25, Y+4	; 0x04
 7c6:	84 34       	cpi	r24, 0x44	; 68
 7c8:	91 05       	cpc	r25, r1
 7ca:	81 f0       	breq	.+32     	; 0x7ec <DIO_read_port+0x6e>
 7cc:	13 c0       	rjmp	.+38     	; 0x7f4 <DIO_read_port+0x76>
	{
		case 'A' :
		return_val=PINA; // read the value of port A
 7ce:	e9 e3       	ldi	r30, 0x39	; 57
 7d0:	f0 e0       	ldi	r31, 0x00	; 0
 7d2:	80 81       	ld	r24, Z
 7d4:	89 83       	std	Y+1, r24	; 0x01
 7d6:	0e c0       	rjmp	.+28     	; 0x7f4 <DIO_read_port+0x76>
		break ;
		case 'B':
		return_val=PINB; // read the value of port B
 7d8:	e6 e3       	ldi	r30, 0x36	; 54
 7da:	f0 e0       	ldi	r31, 0x00	; 0
 7dc:	80 81       	ld	r24, Z
 7de:	89 83       	std	Y+1, r24	; 0x01
 7e0:	09 c0       	rjmp	.+18     	; 0x7f4 <DIO_read_port+0x76>
		break ;
		case 'C' :
		return_val=PINC; // read the value of port C
 7e2:	e3 e3       	ldi	r30, 0x33	; 51
 7e4:	f0 e0       	ldi	r31, 0x00	; 0
 7e6:	80 81       	ld	r24, Z
 7e8:	89 83       	std	Y+1, r24	; 0x01
 7ea:	04 c0       	rjmp	.+8      	; 0x7f4 <DIO_read_port+0x76>
		break ;
		case 'D':
		return_val=PIND; // read the value of port D
 7ec:	e0 e3       	ldi	r30, 0x30	; 48
 7ee:	f0 e0       	ldi	r31, 0x00	; 0
 7f0:	80 81       	ld	r24, Z
 7f2:	89 83       	std	Y+1, r24	; 0x01
		break ;
		default:
		break ;
	}
	return return_val;
 7f4:	89 81       	ldd	r24, Y+1	; 0x01
}
 7f6:	0f 90       	pop	r0
 7f8:	0f 90       	pop	r0
 7fa:	0f 90       	pop	r0
 7fc:	0f 90       	pop	r0
 7fe:	cf 91       	pop	r28
 800:	df 91       	pop	r29
 802:	08 95       	ret

00000804 <DIO_vconnectpullup>:

void DIO_vconnectpullup(char portname ,char pinnumber, char connect_pullup)
{
 804:	df 93       	push	r29
 806:	cf 93       	push	r28
 808:	00 d0       	rcall	.+0      	; 0x80a <DIO_vconnectpullup+0x6>
 80a:	00 d0       	rcall	.+0      	; 0x80c <DIO_vconnectpullup+0x8>
 80c:	0f 92       	push	r0
 80e:	cd b7       	in	r28, 0x3d	; 61
 810:	de b7       	in	r29, 0x3e	; 62
 812:	89 83       	std	Y+1, r24	; 0x01
 814:	6a 83       	std	Y+2, r22	; 0x02
 816:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
 818:	89 81       	ldd	r24, Y+1	; 0x01
 81a:	28 2f       	mov	r18, r24
 81c:	30 e0       	ldi	r19, 0x00	; 0
 81e:	3d 83       	std	Y+5, r19	; 0x05
 820:	2c 83       	std	Y+4, r18	; 0x04
 822:	8c 81       	ldd	r24, Y+4	; 0x04
 824:	9d 81       	ldd	r25, Y+5	; 0x05
 826:	82 34       	cpi	r24, 0x42	; 66
 828:	91 05       	cpc	r25, r1
 82a:	09 f4       	brne	.+2      	; 0x82e <DIO_vconnectpullup+0x2a>
 82c:	44 c0       	rjmp	.+136    	; 0x8b6 <__stack+0x57>
 82e:	2c 81       	ldd	r18, Y+4	; 0x04
 830:	3d 81       	ldd	r19, Y+5	; 0x05
 832:	23 34       	cpi	r18, 0x43	; 67
 834:	31 05       	cpc	r19, r1
 836:	34 f4       	brge	.+12     	; 0x844 <DIO_vconnectpullup+0x40>
 838:	8c 81       	ldd	r24, Y+4	; 0x04
 83a:	9d 81       	ldd	r25, Y+5	; 0x05
 83c:	81 34       	cpi	r24, 0x41	; 65
 83e:	91 05       	cpc	r25, r1
 840:	71 f0       	breq	.+28     	; 0x85e <DIO_vconnectpullup+0x5a>
 842:	bc c0       	rjmp	.+376    	; 0x9bc <__stack+0x15d>
 844:	2c 81       	ldd	r18, Y+4	; 0x04
 846:	3d 81       	ldd	r19, Y+5	; 0x05
 848:	23 34       	cpi	r18, 0x43	; 67
 84a:	31 05       	cpc	r19, r1
 84c:	09 f4       	brne	.+2      	; 0x850 <DIO_vconnectpullup+0x4c>
 84e:	5f c0       	rjmp	.+190    	; 0x90e <__stack+0xaf>
 850:	8c 81       	ldd	r24, Y+4	; 0x04
 852:	9d 81       	ldd	r25, Y+5	; 0x05
 854:	84 34       	cpi	r24, 0x44	; 68
 856:	91 05       	cpc	r25, r1
 858:	09 f4       	brne	.+2      	; 0x85c <DIO_vconnectpullup+0x58>
 85a:	85 c0       	rjmp	.+266    	; 0x966 <__stack+0x107>
 85c:	af c0       	rjmp	.+350    	; 0x9bc <__stack+0x15d>
	{
		case 'A':
		if(connect_pullup==1)
 85e:	8b 81       	ldd	r24, Y+3	; 0x03
 860:	81 30       	cpi	r24, 0x01	; 1
 862:	a1 f4       	brne	.+40     	; 0x88c <__stack+0x2d>
		{
			SET_BIT(PORTA,pinnumber);
 864:	ab e3       	ldi	r26, 0x3B	; 59
 866:	b0 e0       	ldi	r27, 0x00	; 0
 868:	eb e3       	ldi	r30, 0x3B	; 59
 86a:	f0 e0       	ldi	r31, 0x00	; 0
 86c:	80 81       	ld	r24, Z
 86e:	48 2f       	mov	r20, r24
 870:	8a 81       	ldd	r24, Y+2	; 0x02
 872:	28 2f       	mov	r18, r24
 874:	30 e0       	ldi	r19, 0x00	; 0
 876:	81 e0       	ldi	r24, 0x01	; 1
 878:	90 e0       	ldi	r25, 0x00	; 0
 87a:	02 2e       	mov	r0, r18
 87c:	02 c0       	rjmp	.+4      	; 0x882 <__stack+0x23>
 87e:	88 0f       	add	r24, r24
 880:	99 1f       	adc	r25, r25
 882:	0a 94       	dec	r0
 884:	e2 f7       	brpl	.-8      	; 0x87e <__stack+0x1f>
 886:	84 2b       	or	r24, r20
 888:	8c 93       	st	X, r24
 88a:	98 c0       	rjmp	.+304    	; 0x9bc <__stack+0x15d>
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
 88c:	ab e3       	ldi	r26, 0x3B	; 59
 88e:	b0 e0       	ldi	r27, 0x00	; 0
 890:	eb e3       	ldi	r30, 0x3B	; 59
 892:	f0 e0       	ldi	r31, 0x00	; 0
 894:	80 81       	ld	r24, Z
 896:	48 2f       	mov	r20, r24
 898:	8a 81       	ldd	r24, Y+2	; 0x02
 89a:	28 2f       	mov	r18, r24
 89c:	30 e0       	ldi	r19, 0x00	; 0
 89e:	81 e0       	ldi	r24, 0x01	; 1
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	02 2e       	mov	r0, r18
 8a4:	02 c0       	rjmp	.+4      	; 0x8aa <__stack+0x4b>
 8a6:	88 0f       	add	r24, r24
 8a8:	99 1f       	adc	r25, r25
 8aa:	0a 94       	dec	r0
 8ac:	e2 f7       	brpl	.-8      	; 0x8a6 <__stack+0x47>
 8ae:	80 95       	com	r24
 8b0:	84 23       	and	r24, r20
 8b2:	8c 93       	st	X, r24
 8b4:	83 c0       	rjmp	.+262    	; 0x9bc <__stack+0x15d>
		}
		break;
		case 'B':
		if(connect_pullup==1)
 8b6:	8b 81       	ldd	r24, Y+3	; 0x03
 8b8:	81 30       	cpi	r24, 0x01	; 1
 8ba:	a1 f4       	brne	.+40     	; 0x8e4 <__stack+0x85>
		{
			SET_BIT(PORTB,pinnumber);
 8bc:	a8 e3       	ldi	r26, 0x38	; 56
 8be:	b0 e0       	ldi	r27, 0x00	; 0
 8c0:	e8 e3       	ldi	r30, 0x38	; 56
 8c2:	f0 e0       	ldi	r31, 0x00	; 0
 8c4:	80 81       	ld	r24, Z
 8c6:	48 2f       	mov	r20, r24
 8c8:	8a 81       	ldd	r24, Y+2	; 0x02
 8ca:	28 2f       	mov	r18, r24
 8cc:	30 e0       	ldi	r19, 0x00	; 0
 8ce:	81 e0       	ldi	r24, 0x01	; 1
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	02 2e       	mov	r0, r18
 8d4:	02 c0       	rjmp	.+4      	; 0x8da <__stack+0x7b>
 8d6:	88 0f       	add	r24, r24
 8d8:	99 1f       	adc	r25, r25
 8da:	0a 94       	dec	r0
 8dc:	e2 f7       	brpl	.-8      	; 0x8d6 <__stack+0x77>
 8de:	84 2b       	or	r24, r20
 8e0:	8c 93       	st	X, r24
 8e2:	6c c0       	rjmp	.+216    	; 0x9bc <__stack+0x15d>
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
 8e4:	a8 e3       	ldi	r26, 0x38	; 56
 8e6:	b0 e0       	ldi	r27, 0x00	; 0
 8e8:	e8 e3       	ldi	r30, 0x38	; 56
 8ea:	f0 e0       	ldi	r31, 0x00	; 0
 8ec:	80 81       	ld	r24, Z
 8ee:	48 2f       	mov	r20, r24
 8f0:	8a 81       	ldd	r24, Y+2	; 0x02
 8f2:	28 2f       	mov	r18, r24
 8f4:	30 e0       	ldi	r19, 0x00	; 0
 8f6:	81 e0       	ldi	r24, 0x01	; 1
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	02 2e       	mov	r0, r18
 8fc:	02 c0       	rjmp	.+4      	; 0x902 <__stack+0xa3>
 8fe:	88 0f       	add	r24, r24
 900:	99 1f       	adc	r25, r25
 902:	0a 94       	dec	r0
 904:	e2 f7       	brpl	.-8      	; 0x8fe <__stack+0x9f>
 906:	80 95       	com	r24
 908:	84 23       	and	r24, r20
 90a:	8c 93       	st	X, r24
 90c:	57 c0       	rjmp	.+174    	; 0x9bc <__stack+0x15d>
		}
		break;
		case 'C':
		if(connect_pullup==1)
 90e:	8b 81       	ldd	r24, Y+3	; 0x03
 910:	81 30       	cpi	r24, 0x01	; 1
 912:	a1 f4       	brne	.+40     	; 0x93c <__stack+0xdd>
		{
			SET_BIT(PORTC,pinnumber);
 914:	a5 e3       	ldi	r26, 0x35	; 53
 916:	b0 e0       	ldi	r27, 0x00	; 0
 918:	e5 e3       	ldi	r30, 0x35	; 53
 91a:	f0 e0       	ldi	r31, 0x00	; 0
 91c:	80 81       	ld	r24, Z
 91e:	48 2f       	mov	r20, r24
 920:	8a 81       	ldd	r24, Y+2	; 0x02
 922:	28 2f       	mov	r18, r24
 924:	30 e0       	ldi	r19, 0x00	; 0
 926:	81 e0       	ldi	r24, 0x01	; 1
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	02 2e       	mov	r0, r18
 92c:	02 c0       	rjmp	.+4      	; 0x932 <__stack+0xd3>
 92e:	88 0f       	add	r24, r24
 930:	99 1f       	adc	r25, r25
 932:	0a 94       	dec	r0
 934:	e2 f7       	brpl	.-8      	; 0x92e <__stack+0xcf>
 936:	84 2b       	or	r24, r20
 938:	8c 93       	st	X, r24
 93a:	40 c0       	rjmp	.+128    	; 0x9bc <__stack+0x15d>

		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
 93c:	a5 e3       	ldi	r26, 0x35	; 53
 93e:	b0 e0       	ldi	r27, 0x00	; 0
 940:	e5 e3       	ldi	r30, 0x35	; 53
 942:	f0 e0       	ldi	r31, 0x00	; 0
 944:	80 81       	ld	r24, Z
 946:	48 2f       	mov	r20, r24
 948:	8a 81       	ldd	r24, Y+2	; 0x02
 94a:	28 2f       	mov	r18, r24
 94c:	30 e0       	ldi	r19, 0x00	; 0
 94e:	81 e0       	ldi	r24, 0x01	; 1
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	02 2e       	mov	r0, r18
 954:	02 c0       	rjmp	.+4      	; 0x95a <__stack+0xfb>
 956:	88 0f       	add	r24, r24
 958:	99 1f       	adc	r25, r25
 95a:	0a 94       	dec	r0
 95c:	e2 f7       	brpl	.-8      	; 0x956 <__stack+0xf7>
 95e:	80 95       	com	r24
 960:	84 23       	and	r24, r20
 962:	8c 93       	st	X, r24
 964:	2b c0       	rjmp	.+86     	; 0x9bc <__stack+0x15d>
		}
		break;
		case 'D':
		if(connect_pullup==1)
 966:	8b 81       	ldd	r24, Y+3	; 0x03
 968:	81 30       	cpi	r24, 0x01	; 1
 96a:	a1 f4       	brne	.+40     	; 0x994 <__stack+0x135>
		{
			SET_BIT(PORTD,pinnumber);
 96c:	a2 e3       	ldi	r26, 0x32	; 50
 96e:	b0 e0       	ldi	r27, 0x00	; 0
 970:	e2 e3       	ldi	r30, 0x32	; 50
 972:	f0 e0       	ldi	r31, 0x00	; 0
 974:	80 81       	ld	r24, Z
 976:	48 2f       	mov	r20, r24
 978:	8a 81       	ldd	r24, Y+2	; 0x02
 97a:	28 2f       	mov	r18, r24
 97c:	30 e0       	ldi	r19, 0x00	; 0
 97e:	81 e0       	ldi	r24, 0x01	; 1
 980:	90 e0       	ldi	r25, 0x00	; 0
 982:	02 2e       	mov	r0, r18
 984:	02 c0       	rjmp	.+4      	; 0x98a <__stack+0x12b>
 986:	88 0f       	add	r24, r24
 988:	99 1f       	adc	r25, r25
 98a:	0a 94       	dec	r0
 98c:	e2 f7       	brpl	.-8      	; 0x986 <__stack+0x127>
 98e:	84 2b       	or	r24, r20
 990:	8c 93       	st	X, r24
 992:	14 c0       	rjmp	.+40     	; 0x9bc <__stack+0x15d>

		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
 994:	a2 e3       	ldi	r26, 0x32	; 50
 996:	b0 e0       	ldi	r27, 0x00	; 0
 998:	e2 e3       	ldi	r30, 0x32	; 50
 99a:	f0 e0       	ldi	r31, 0x00	; 0
 99c:	80 81       	ld	r24, Z
 99e:	48 2f       	mov	r20, r24
 9a0:	8a 81       	ldd	r24, Y+2	; 0x02
 9a2:	28 2f       	mov	r18, r24
 9a4:	30 e0       	ldi	r19, 0x00	; 0
 9a6:	81 e0       	ldi	r24, 0x01	; 1
 9a8:	90 e0       	ldi	r25, 0x00	; 0
 9aa:	02 2e       	mov	r0, r18
 9ac:	02 c0       	rjmp	.+4      	; 0x9b2 <__stack+0x153>
 9ae:	88 0f       	add	r24, r24
 9b0:	99 1f       	adc	r25, r25
 9b2:	0a 94       	dec	r0
 9b4:	e2 f7       	brpl	.-8      	; 0x9ae <__stack+0x14f>
 9b6:	80 95       	com	r24
 9b8:	84 23       	and	r24, r20
 9ba:	8c 93       	st	X, r24
		}
		break;

	}
}
 9bc:	0f 90       	pop	r0
 9be:	0f 90       	pop	r0
 9c0:	0f 90       	pop	r0
 9c2:	0f 90       	pop	r0
 9c4:	0f 90       	pop	r0
 9c6:	cf 91       	pop	r28
 9c8:	df 91       	pop	r29
 9ca:	08 95       	ret

000009cc <seven_seg_vinit>:
 */


#include "DIO.h"
void seven_seg_vinit(unsigned char port_name)
{
 9cc:	df 93       	push	r29
 9ce:	cf 93       	push	r28
 9d0:	0f 92       	push	r0
 9d2:	cd b7       	in	r28, 0x3d	; 61
 9d4:	de b7       	in	r29, 0x3e	; 62
 9d6:	89 83       	std	Y+1, r24	; 0x01
	DIO_set_port_direction(port_name,0xFF);
 9d8:	89 81       	ldd	r24, Y+1	; 0x01
 9da:	6f ef       	ldi	r22, 0xFF	; 255
 9dc:	0e 94 3b 03 	call	0x676	; 0x676 <DIO_set_port_direction>
}
 9e0:	0f 90       	pop	r0
 9e2:	cf 91       	pop	r28
 9e4:	df 91       	pop	r29
 9e6:	08 95       	ret

000009e8 <seven_seg_write>:

void seven_seg_write(unsigned char portname,unsigned char number)
{
 9e8:	df 93       	push	r29
 9ea:	cf 93       	push	r28
 9ec:	cd b7       	in	r28, 0x3d	; 61
 9ee:	de b7       	in	r29, 0x3e	; 62
 9f0:	61 97       	sbiw	r28, 0x11	; 17
 9f2:	0f b6       	in	r0, 0x3f	; 63
 9f4:	f8 94       	cli
 9f6:	de bf       	out	0x3e, r29	; 62
 9f8:	0f be       	out	0x3f, r0	; 63
 9fa:	cd bf       	out	0x3d, r28	; 61
 9fc:	8b 87       	std	Y+11, r24	; 0x0b
 9fe:	6c 87       	std	Y+12, r22	; 0x0c
unsigned char arr[]={ 0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x47,0x7f,0x6f};
 a00:	ce 01       	movw	r24, r28
 a02:	01 96       	adiw	r24, 0x01	; 1
 a04:	9e 87       	std	Y+14, r25	; 0x0e
 a06:	8d 87       	std	Y+13, r24	; 0x0d
 a08:	ea e6       	ldi	r30, 0x6A	; 106
 a0a:	f0 e0       	ldi	r31, 0x00	; 0
 a0c:	f8 8b       	std	Y+16, r31	; 0x10
 a0e:	ef 87       	std	Y+15, r30	; 0x0f
 a10:	fa e0       	ldi	r31, 0x0A	; 10
 a12:	f9 8b       	std	Y+17, r31	; 0x11
 a14:	ef 85       	ldd	r30, Y+15	; 0x0f
 a16:	f8 89       	ldd	r31, Y+16	; 0x10
 a18:	00 80       	ld	r0, Z
 a1a:	8f 85       	ldd	r24, Y+15	; 0x0f
 a1c:	98 89       	ldd	r25, Y+16	; 0x10
 a1e:	01 96       	adiw	r24, 0x01	; 1
 a20:	98 8b       	std	Y+16, r25	; 0x10
 a22:	8f 87       	std	Y+15, r24	; 0x0f
 a24:	ed 85       	ldd	r30, Y+13	; 0x0d
 a26:	fe 85       	ldd	r31, Y+14	; 0x0e
 a28:	00 82       	st	Z, r0
 a2a:	8d 85       	ldd	r24, Y+13	; 0x0d
 a2c:	9e 85       	ldd	r25, Y+14	; 0x0e
 a2e:	01 96       	adiw	r24, 0x01	; 1
 a30:	9e 87       	std	Y+14, r25	; 0x0e
 a32:	8d 87       	std	Y+13, r24	; 0x0d
 a34:	99 89       	ldd	r25, Y+17	; 0x11
 a36:	91 50       	subi	r25, 0x01	; 1
 a38:	99 8b       	std	Y+17, r25	; 0x11
 a3a:	e9 89       	ldd	r30, Y+17	; 0x11
 a3c:	ee 23       	and	r30, r30
 a3e:	51 f7       	brne	.-44     	; 0xa14 <seven_seg_write+0x2c>

DIO_write_port(portname,arr[number]);
 a40:	8c 85       	ldd	r24, Y+12	; 0x0c
 a42:	28 2f       	mov	r18, r24
 a44:	30 e0       	ldi	r19, 0x00	; 0
 a46:	ce 01       	movw	r24, r28
 a48:	01 96       	adiw	r24, 0x01	; 1
 a4a:	fc 01       	movw	r30, r24
 a4c:	e2 0f       	add	r30, r18
 a4e:	f3 1f       	adc	r31, r19
 a50:	90 81       	ld	r25, Z
 a52:	8b 85       	ldd	r24, Y+11	; 0x0b
 a54:	69 2f       	mov	r22, r25
 a56:	0e 94 7d 03 	call	0x6fa	; 0x6fa <DIO_write_port>
}
 a5a:	61 96       	adiw	r28, 0x11	; 17
 a5c:	0f b6       	in	r0, 0x3f	; 63
 a5e:	f8 94       	cli
 a60:	de bf       	out	0x3e, r29	; 62
 a62:	0f be       	out	0x3f, r0	; 63
 a64:	cd bf       	out	0x3d, r28	; 61
 a66:	cf 91       	pop	r28
 a68:	df 91       	pop	r29
 a6a:	08 95       	ret

00000a6c <timer_CTC_init_interrupt>:
    0b01111111,
    0b01101111
};

void timer_CTC_init_interrupt(void)
{
 a6c:	df 93       	push	r29
 a6e:	cf 93       	push	r28
 a70:	cd b7       	in	r28, 0x3d	; 61
 a72:	de b7       	in	r29, 0x3e	; 62
    TCCR0 |= (1 << WGM01);
 a74:	a3 e5       	ldi	r26, 0x53	; 83
 a76:	b0 e0       	ldi	r27, 0x00	; 0
 a78:	e3 e5       	ldi	r30, 0x53	; 83
 a7a:	f0 e0       	ldi	r31, 0x00	; 0
 a7c:	80 81       	ld	r24, Z
 a7e:	88 60       	ori	r24, 0x08	; 8
 a80:	8c 93       	st	X, r24
    OCR0 = 156;
 a82:	ec e5       	ldi	r30, 0x5C	; 92
 a84:	f0 e0       	ldi	r31, 0x00	; 0
 a86:	8c e9       	ldi	r24, 0x9C	; 156
 a88:	80 83       	st	Z, r24
    TIMSK |= (1 << OCIE0);
 a8a:	a9 e5       	ldi	r26, 0x59	; 89
 a8c:	b0 e0       	ldi	r27, 0x00	; 0
 a8e:	e9 e5       	ldi	r30, 0x59	; 89
 a90:	f0 e0       	ldi	r31, 0x00	; 0
 a92:	80 81       	ld	r24, Z
 a94:	82 60       	ori	r24, 0x02	; 2
 a96:	8c 93       	st	X, r24
    TCCR0 |= (1 << CS02);
 a98:	a3 e5       	ldi	r26, 0x53	; 83
 a9a:	b0 e0       	ldi	r27, 0x00	; 0
 a9c:	e3 e5       	ldi	r30, 0x53	; 83
 a9e:	f0 e0       	ldi	r31, 0x00	; 0
 aa0:	80 81       	ld	r24, Z
 aa2:	84 60       	ori	r24, 0x04	; 4
 aa4:	8c 93       	st	X, r24
}
 aa6:	cf 91       	pop	r28
 aa8:	df 91       	pop	r29
 aaa:	08 95       	ret

00000aac <main>:

int main(void)
{
 aac:	df 93       	push	r29
 aae:	cf 93       	push	r28
 ab0:	cd b7       	in	r28, 0x3d	; 61
 ab2:	de b7       	in	r29, 0x3e	; 62
    seven_seg_vinit('D');
 ab4:	84 e4       	ldi	r24, 0x44	; 68
 ab6:	0e 94 e6 04 	call	0x9cc	; 0x9cc <seven_seg_vinit>
    seven_seg_vinit('C');
 aba:	83 e4       	ldi	r24, 0x43	; 67
 abc:	0e 94 e6 04 	call	0x9cc	; 0x9cc <seven_seg_vinit>

    SET_BIT(DDRB, 0);
 ac0:	a7 e3       	ldi	r26, 0x37	; 55
 ac2:	b0 e0       	ldi	r27, 0x00	; 0
 ac4:	e7 e3       	ldi	r30, 0x37	; 55
 ac6:	f0 e0       	ldi	r31, 0x00	; 0
 ac8:	80 81       	ld	r24, Z
 aca:	81 60       	ori	r24, 0x01	; 1
 acc:	8c 93       	st	X, r24
    SET_BIT(DDRB, 1);
 ace:	a7 e3       	ldi	r26, 0x37	; 55
 ad0:	b0 e0       	ldi	r27, 0x00	; 0
 ad2:	e7 e3       	ldi	r30, 0x37	; 55
 ad4:	f0 e0       	ldi	r31, 0x00	; 0
 ad6:	80 81       	ld	r24, Z
 ad8:	82 60       	ori	r24, 0x02	; 2
 ada:	8c 93       	st	X, r24
    SET_BIT(DDRB, 2);
 adc:	a7 e3       	ldi	r26, 0x37	; 55
 ade:	b0 e0       	ldi	r27, 0x00	; 0
 ae0:	e7 e3       	ldi	r30, 0x37	; 55
 ae2:	f0 e0       	ldi	r31, 0x00	; 0
 ae4:	80 81       	ld	r24, Z
 ae6:	84 60       	ori	r24, 0x04	; 4
 ae8:	8c 93       	st	X, r24

    timer_CTC_init_interrupt();
 aea:	0e 94 36 05 	call	0xa6c	; 0xa6c <timer_CTC_init_interrupt>
    sei();
 aee:	78 94       	sei

    while (1)
    {
        if (counter2 < 15)
 af0:	80 91 75 00 	lds	r24, 0x0075
 af4:	8f 30       	cpi	r24, 0x0F	; 15
 af6:	d8 f5       	brcc	.+118    	; 0xb6e <main+0xc2>
        {
            SET_BIT(PORTB, 0);
 af8:	a8 e3       	ldi	r26, 0x38	; 56
 afa:	b0 e0       	ldi	r27, 0x00	; 0
 afc:	e8 e3       	ldi	r30, 0x38	; 56
 afe:	f0 e0       	ldi	r31, 0x00	; 0
 b00:	80 81       	ld	r24, Z
 b02:	81 60       	ori	r24, 0x01	; 1
 b04:	8c 93       	st	X, r24
            CLR_BIT(PORTB, 1);
 b06:	a8 e3       	ldi	r26, 0x38	; 56
 b08:	b0 e0       	ldi	r27, 0x00	; 0
 b0a:	e8 e3       	ldi	r30, 0x38	; 56
 b0c:	f0 e0       	ldi	r31, 0x00	; 0
 b0e:	80 81       	ld	r24, Z
 b10:	8d 7f       	andi	r24, 0xFD	; 253
 b12:	8c 93       	st	X, r24
            CLR_BIT(PORTB, 2);
 b14:	a8 e3       	ldi	r26, 0x38	; 56
 b16:	b0 e0       	ldi	r27, 0x00	; 0
 b18:	e8 e3       	ldi	r30, 0x38	; 56
 b1a:	f0 e0       	ldi	r31, 0x00	; 0
 b1c:	80 81       	ld	r24, Z
 b1e:	8b 7f       	andi	r24, 0xFB	; 251
 b20:	8c 93       	st	X, r24
            seven_seg_write('D', (15 - counter2) / 10);
 b22:	80 91 75 00 	lds	r24, 0x0075
 b26:	28 2f       	mov	r18, r24
 b28:	30 e0       	ldi	r19, 0x00	; 0
 b2a:	8f e0       	ldi	r24, 0x0F	; 15
 b2c:	90 e0       	ldi	r25, 0x00	; 0
 b2e:	82 1b       	sub	r24, r18
 b30:	93 0b       	sbc	r25, r19
 b32:	2a e0       	ldi	r18, 0x0A	; 10
 b34:	30 e0       	ldi	r19, 0x00	; 0
 b36:	b9 01       	movw	r22, r18
 b38:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__divmodhi4>
 b3c:	cb 01       	movw	r24, r22
 b3e:	98 2f       	mov	r25, r24
 b40:	84 e4       	ldi	r24, 0x44	; 68
 b42:	69 2f       	mov	r22, r25
 b44:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <seven_seg_write>
            seven_seg_write('C', (15 - counter2) % 10);
 b48:	80 91 75 00 	lds	r24, 0x0075
 b4c:	28 2f       	mov	r18, r24
 b4e:	30 e0       	ldi	r19, 0x00	; 0
 b50:	8f e0       	ldi	r24, 0x0F	; 15
 b52:	90 e0       	ldi	r25, 0x00	; 0
 b54:	82 1b       	sub	r24, r18
 b56:	93 0b       	sbc	r25, r19
 b58:	2a e0       	ldi	r18, 0x0A	; 10
 b5a:	30 e0       	ldi	r19, 0x00	; 0
 b5c:	b9 01       	movw	r22, r18
 b5e:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__divmodhi4>
 b62:	98 2f       	mov	r25, r24
 b64:	83 e4       	ldi	r24, 0x43	; 67
 b66:	69 2f       	mov	r22, r25
 b68:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <seven_seg_write>
 b6c:	9b c0       	rjmp	.+310    	; 0xca4 <main+0x1f8>
        }
        else if (counter2 < 20)
 b6e:	80 91 75 00 	lds	r24, 0x0075
 b72:	84 31       	cpi	r24, 0x14	; 20
 b74:	d8 f5       	brcc	.+118    	; 0xbec <main+0x140>
        {
            CLR_BIT(PORTB, 0);
 b76:	a8 e3       	ldi	r26, 0x38	; 56
 b78:	b0 e0       	ldi	r27, 0x00	; 0
 b7a:	e8 e3       	ldi	r30, 0x38	; 56
 b7c:	f0 e0       	ldi	r31, 0x00	; 0
 b7e:	80 81       	ld	r24, Z
 b80:	8e 7f       	andi	r24, 0xFE	; 254
 b82:	8c 93       	st	X, r24
            CLR_BIT(PORTB, 1);
 b84:	a8 e3       	ldi	r26, 0x38	; 56
 b86:	b0 e0       	ldi	r27, 0x00	; 0
 b88:	e8 e3       	ldi	r30, 0x38	; 56
 b8a:	f0 e0       	ldi	r31, 0x00	; 0
 b8c:	80 81       	ld	r24, Z
 b8e:	8d 7f       	andi	r24, 0xFD	; 253
 b90:	8c 93       	st	X, r24
            SET_BIT(PORTB, 2);
 b92:	a8 e3       	ldi	r26, 0x38	; 56
 b94:	b0 e0       	ldi	r27, 0x00	; 0
 b96:	e8 e3       	ldi	r30, 0x38	; 56
 b98:	f0 e0       	ldi	r31, 0x00	; 0
 b9a:	80 81       	ld	r24, Z
 b9c:	84 60       	ori	r24, 0x04	; 4
 b9e:	8c 93       	st	X, r24
            seven_seg_write('D', (20 - counter2) / 10);
 ba0:	80 91 75 00 	lds	r24, 0x0075
 ba4:	28 2f       	mov	r18, r24
 ba6:	30 e0       	ldi	r19, 0x00	; 0
 ba8:	84 e1       	ldi	r24, 0x14	; 20
 baa:	90 e0       	ldi	r25, 0x00	; 0
 bac:	82 1b       	sub	r24, r18
 bae:	93 0b       	sbc	r25, r19
 bb0:	2a e0       	ldi	r18, 0x0A	; 10
 bb2:	30 e0       	ldi	r19, 0x00	; 0
 bb4:	b9 01       	movw	r22, r18
 bb6:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__divmodhi4>
 bba:	cb 01       	movw	r24, r22
 bbc:	98 2f       	mov	r25, r24
 bbe:	84 e4       	ldi	r24, 0x44	; 68
 bc0:	69 2f       	mov	r22, r25
 bc2:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <seven_seg_write>
            seven_seg_write('C', (20 - counter2) % 10);
 bc6:	80 91 75 00 	lds	r24, 0x0075
 bca:	28 2f       	mov	r18, r24
 bcc:	30 e0       	ldi	r19, 0x00	; 0
 bce:	84 e1       	ldi	r24, 0x14	; 20
 bd0:	90 e0       	ldi	r25, 0x00	; 0
 bd2:	82 1b       	sub	r24, r18
 bd4:	93 0b       	sbc	r25, r19
 bd6:	2a e0       	ldi	r18, 0x0A	; 10
 bd8:	30 e0       	ldi	r19, 0x00	; 0
 bda:	b9 01       	movw	r22, r18
 bdc:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__divmodhi4>
 be0:	98 2f       	mov	r25, r24
 be2:	83 e4       	ldi	r24, 0x43	; 67
 be4:	69 2f       	mov	r22, r25
 be6:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <seven_seg_write>
 bea:	5c c0       	rjmp	.+184    	; 0xca4 <main+0x1f8>
        }
        else if (counter2 < 30)
 bec:	80 91 75 00 	lds	r24, 0x0075
 bf0:	8e 31       	cpi	r24, 0x1E	; 30
 bf2:	d8 f5       	brcc	.+118    	; 0xc6a <main+0x1be>
        {
            CLR_BIT(PORTB, 0);
 bf4:	a8 e3       	ldi	r26, 0x38	; 56
 bf6:	b0 e0       	ldi	r27, 0x00	; 0
 bf8:	e8 e3       	ldi	r30, 0x38	; 56
 bfa:	f0 e0       	ldi	r31, 0x00	; 0
 bfc:	80 81       	ld	r24, Z
 bfe:	8e 7f       	andi	r24, 0xFE	; 254
 c00:	8c 93       	st	X, r24
            SET_BIT(PORTB, 1);
 c02:	a8 e3       	ldi	r26, 0x38	; 56
 c04:	b0 e0       	ldi	r27, 0x00	; 0
 c06:	e8 e3       	ldi	r30, 0x38	; 56
 c08:	f0 e0       	ldi	r31, 0x00	; 0
 c0a:	80 81       	ld	r24, Z
 c0c:	82 60       	ori	r24, 0x02	; 2
 c0e:	8c 93       	st	X, r24
            CLR_BIT(PORTB, 2);
 c10:	a8 e3       	ldi	r26, 0x38	; 56
 c12:	b0 e0       	ldi	r27, 0x00	; 0
 c14:	e8 e3       	ldi	r30, 0x38	; 56
 c16:	f0 e0       	ldi	r31, 0x00	; 0
 c18:	80 81       	ld	r24, Z
 c1a:	8b 7f       	andi	r24, 0xFB	; 251
 c1c:	8c 93       	st	X, r24
            seven_seg_write('D', (30 - counter2) / 10);
 c1e:	80 91 75 00 	lds	r24, 0x0075
 c22:	28 2f       	mov	r18, r24
 c24:	30 e0       	ldi	r19, 0x00	; 0
 c26:	8e e1       	ldi	r24, 0x1E	; 30
 c28:	90 e0       	ldi	r25, 0x00	; 0
 c2a:	82 1b       	sub	r24, r18
 c2c:	93 0b       	sbc	r25, r19
 c2e:	2a e0       	ldi	r18, 0x0A	; 10
 c30:	30 e0       	ldi	r19, 0x00	; 0
 c32:	b9 01       	movw	r22, r18
 c34:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__divmodhi4>
 c38:	cb 01       	movw	r24, r22
 c3a:	98 2f       	mov	r25, r24
 c3c:	84 e4       	ldi	r24, 0x44	; 68
 c3e:	69 2f       	mov	r22, r25
 c40:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <seven_seg_write>
            seven_seg_write('C', (30 - counter2) % 10);
 c44:	80 91 75 00 	lds	r24, 0x0075
 c48:	28 2f       	mov	r18, r24
 c4a:	30 e0       	ldi	r19, 0x00	; 0
 c4c:	8e e1       	ldi	r24, 0x1E	; 30
 c4e:	90 e0       	ldi	r25, 0x00	; 0
 c50:	82 1b       	sub	r24, r18
 c52:	93 0b       	sbc	r25, r19
 c54:	2a e0       	ldi	r18, 0x0A	; 10
 c56:	30 e0       	ldi	r19, 0x00	; 0
 c58:	b9 01       	movw	r22, r18
 c5a:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__divmodhi4>
 c5e:	98 2f       	mov	r25, r24
 c60:	83 e4       	ldi	r24, 0x43	; 67
 c62:	69 2f       	mov	r22, r25
 c64:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <seven_seg_write>
 c68:	1d c0       	rjmp	.+58     	; 0xca4 <main+0x1f8>
        }
        else
        {
            CLR_BIT(PORTB, 0);
 c6a:	a8 e3       	ldi	r26, 0x38	; 56
 c6c:	b0 e0       	ldi	r27, 0x00	; 0
 c6e:	e8 e3       	ldi	r30, 0x38	; 56
 c70:	f0 e0       	ldi	r31, 0x00	; 0
 c72:	80 81       	ld	r24, Z
 c74:	8e 7f       	andi	r24, 0xFE	; 254
 c76:	8c 93       	st	X, r24
            CLR_BIT(PORTB, 1);
 c78:	a8 e3       	ldi	r26, 0x38	; 56
 c7a:	b0 e0       	ldi	r27, 0x00	; 0
 c7c:	e8 e3       	ldi	r30, 0x38	; 56
 c7e:	f0 e0       	ldi	r31, 0x00	; 0
 c80:	80 81       	ld	r24, Z
 c82:	8d 7f       	andi	r24, 0xFD	; 253
 c84:	8c 93       	st	X, r24
            CLR_BIT(PORTB, 2);
 c86:	a8 e3       	ldi	r26, 0x38	; 56
 c88:	b0 e0       	ldi	r27, 0x00	; 0
 c8a:	e8 e3       	ldi	r30, 0x38	; 56
 c8c:	f0 e0       	ldi	r31, 0x00	; 0
 c8e:	80 81       	ld	r24, Z
 c90:	8b 7f       	andi	r24, 0xFB	; 251
 c92:	8c 93       	st	X, r24
            seven_seg_write('D', 10);
 c94:	84 e4       	ldi	r24, 0x44	; 68
 c96:	6a e0       	ldi	r22, 0x0A	; 10
 c98:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <seven_seg_write>
            seven_seg_write('C', 10);
 c9c:	83 e4       	ldi	r24, 0x43	; 67
 c9e:	6a e0       	ldi	r22, 0x0A	; 10
 ca0:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <seven_seg_write>
        }

        while (counter3 == 0);
 ca4:	80 91 76 00 	lds	r24, 0x0076
 ca8:	88 23       	and	r24, r24
 caa:	e1 f3       	breq	.-8      	; 0xca4 <main+0x1f8>
        counter3 = 0;
 cac:	10 92 76 00 	sts	0x0076, r1

        counter1++;
 cb0:	80 91 74 00 	lds	r24, 0x0074
 cb4:	8f 5f       	subi	r24, 0xFF	; 255
 cb6:	80 93 74 00 	sts	0x0074, r24
        counter2++;
 cba:	80 91 75 00 	lds	r24, 0x0075
 cbe:	8f 5f       	subi	r24, 0xFF	; 255
 cc0:	80 93 75 00 	sts	0x0075, r24
        if (counter2 >= 31)
 cc4:	80 91 75 00 	lds	r24, 0x0075
 cc8:	8f 31       	cpi	r24, 0x1F	; 31
 cca:	08 f4       	brcc	.+2      	; 0xcce <main+0x222>
 ccc:	11 cf       	rjmp	.-478    	; 0xaf0 <main+0x44>
        {
            counter2 = 0;
 cce:	10 92 75 00 	sts	0x0075, r1
 cd2:	0e cf       	rjmp	.-484    	; 0xaf0 <main+0x44>

00000cd4 <__vector_10>:
        }
    }
}

ISR(TIMER0_COMP_vect)
{
 cd4:	1f 92       	push	r1
 cd6:	0f 92       	push	r0
 cd8:	0f b6       	in	r0, 0x3f	; 63
 cda:	0f 92       	push	r0
 cdc:	11 24       	eor	r1, r1
 cde:	8f 93       	push	r24
 ce0:	df 93       	push	r29
 ce2:	cf 93       	push	r28
 ce4:	cd b7       	in	r28, 0x3d	; 61
 ce6:	de b7       	in	r29, 0x3e	; 62
    counter3 = 1;
 ce8:	81 e0       	ldi	r24, 0x01	; 1
 cea:	80 93 76 00 	sts	0x0076, r24
}
 cee:	cf 91       	pop	r28
 cf0:	df 91       	pop	r29
 cf2:	8f 91       	pop	r24
 cf4:	0f 90       	pop	r0
 cf6:	0f be       	out	0x3f, r0	; 63
 cf8:	0f 90       	pop	r0
 cfa:	1f 90       	pop	r1
 cfc:	18 95       	reti

00000cfe <__divmodhi4>:
 cfe:	97 fb       	bst	r25, 7
 d00:	09 2e       	mov	r0, r25
 d02:	07 26       	eor	r0, r23
 d04:	0a d0       	rcall	.+20     	; 0xd1a <__divmodhi4_neg1>
 d06:	77 fd       	sbrc	r23, 7
 d08:	04 d0       	rcall	.+8      	; 0xd12 <__divmodhi4_neg2>
 d0a:	0c d0       	rcall	.+24     	; 0xd24 <__udivmodhi4>
 d0c:	06 d0       	rcall	.+12     	; 0xd1a <__divmodhi4_neg1>
 d0e:	00 20       	and	r0, r0
 d10:	1a f4       	brpl	.+6      	; 0xd18 <__divmodhi4_exit>

00000d12 <__divmodhi4_neg2>:
 d12:	70 95       	com	r23
 d14:	61 95       	neg	r22
 d16:	7f 4f       	sbci	r23, 0xFF	; 255

00000d18 <__divmodhi4_exit>:
 d18:	08 95       	ret

00000d1a <__divmodhi4_neg1>:
 d1a:	f6 f7       	brtc	.-4      	; 0xd18 <__divmodhi4_exit>
 d1c:	90 95       	com	r25
 d1e:	81 95       	neg	r24
 d20:	9f 4f       	sbci	r25, 0xFF	; 255
 d22:	08 95       	ret

00000d24 <__udivmodhi4>:
 d24:	aa 1b       	sub	r26, r26
 d26:	bb 1b       	sub	r27, r27
 d28:	51 e1       	ldi	r21, 0x11	; 17
 d2a:	07 c0       	rjmp	.+14     	; 0xd3a <__udivmodhi4_ep>

00000d2c <__udivmodhi4_loop>:
 d2c:	aa 1f       	adc	r26, r26
 d2e:	bb 1f       	adc	r27, r27
 d30:	a6 17       	cp	r26, r22
 d32:	b7 07       	cpc	r27, r23
 d34:	10 f0       	brcs	.+4      	; 0xd3a <__udivmodhi4_ep>
 d36:	a6 1b       	sub	r26, r22
 d38:	b7 0b       	sbc	r27, r23

00000d3a <__udivmodhi4_ep>:
 d3a:	88 1f       	adc	r24, r24
 d3c:	99 1f       	adc	r25, r25
 d3e:	5a 95       	dec	r21
 d40:	a9 f7       	brne	.-22     	; 0xd2c <__udivmodhi4_loop>
 d42:	80 95       	com	r24
 d44:	90 95       	com	r25
 d46:	bc 01       	movw	r22, r24
 d48:	cd 01       	movw	r24, r26
 d4a:	08 95       	ret

00000d4c <_exit>:
 d4c:	f8 94       	cli

00000d4e <__stop_program>:
 d4e:	ff cf       	rjmp	.-2      	; 0xd4e <__stop_program>
